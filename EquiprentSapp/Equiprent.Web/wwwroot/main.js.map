{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/api-routes.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/components/abstract/access-controls/access-control.ts","./src/app/components/abstract/forms/access-control-form.ts","./src/app/components/abstract/forms/access-control-openable-as-dialog-form.ts","./src/app/components/abstract/forms/dynamic-requirement-form.ts","./src/app/components/abstract/forms/form-factories/form-submition-action-factory.ts","./src/app/components/abstract/forms/form-factories/post-action.ts","./src/app/components/abstract/forms/form-factories/put-action.ts","./src/app/components/abstract/forms/form.ts","./src/app/components/abstract/forms/openable-as-dialog-form.ts","./src/app/components/abstract/forms/simple-form.ts","./src/app/components/addresses/address.ts","./src/app/components/addresses/company-client-address.ts","./src/app/components/addresses/manufacturer-address.ts","./src/app/components/addresses/private-client-address.ts","./src/app/components/audits/audit-list-for-entity.ts","./src/app/components/clients/client-create.ts","./src/app/components/clients/client-details.ts","./src/app/components/clients/client-list.ts","./src/app/components/clients/private-client.ts","./src/app/components/dialogs/deletion-dialog.ts","./src/app/components/equipments/equipment-create.ts","./src/app/components/equipments/equipment-details.ts","./src/app/components/equipments/equipment-list.ts","./src/app/components/equipments/photos/equipment-photos.ts","./src/app/components/login/login-reset-password.ts","./src/app/components/login/login.ts","./src/app/components/manufacturers/manufacturer-create.ts","./src/app/components/manufacturers/manufacturer-details.ts","./src/app/components/manufacturers/manufacturer-list.ts","./src/app/components/name-in-languages/name-in-languages.ts","./src/app/components/representatives/client-representative-create.ts","./src/app/components/representatives/client-representative-details.ts","./src/app/components/representatives/client-representative-list.ts","./src/app/components/user-roles/permissions/fillers/user-role-permissions-filler-factory.ts","./src/app/components/user-roles/permissions/fillers/user-role-permissions-filler.ts","./src/app/components/user-roles/permissions/fillers/user-role-permissions-on-creation-filler.ts","./src/app/components/user-roles/permissions/fillers/user-role-permissions-on-edition-filler.ts","./src/app/components/user-roles/permissions/models/user-permission-node.ts","./src/app/components/user-roles/permissions/user-role-permissions.ts","./src/app/components/user-roles/user-role-create.ts","./src/app/components/user-roles/user-role-details.ts","./src/app/components/user-roles/user-role-list.ts","./src/app/components/users/user-create.ts","./src/app/components/users/user-details.ts","./src/app/components/users/user-list.ts","./src/app/components/users/user-profile.ts","./src/app/enums/api-result-enum.ts","./src/app/enums/client-type-enum.ts","./src/app/enums/error-messag-type-enum.ts","./src/app/enums/filter-type-enum.ts","./src/app/enums/form-mode-enum.ts","./src/app/enums/language-code-enum.ts","./src/app/enums/message-lifetime-enum.ts","./src/app/enums/message-type-enum.ts","./src/app/enums/search-operator-enum.ts","./src/app/enums/user-permission-enum.ts","./src/app/icon-mapper.ts","./src/app/interfaces/address.ts","./src/app/interfaces/name-in-language.ts","./src/app/interfaces/png.ts","./src/app/interfaces/ui-models.ts","./src/app/interfaces/user-permission.ts","./src/app/interfaces/user-role.ts","./src/app/layout/app.footer.component.ts","./src/app/layout/app.layout.component.ts","./src/app/layout/app.layout.module.ts","./src/app/layout/app.menu.component.ts","./src/app/layout/app.menu.service.ts","./src/app/layout/app.menuitem.component.ts","./src/app/layout/app.sidebar.component.ts","./src/app/layout/app.topbar.component.ts","./src/app/layout/config/app.config.component.ts","./src/app/layout/config/config.module.ts","./src/app/layout/services/app.layout.service.ts","./src/app/routes.ts","./src/app/services/auth-guard/auth-guard.service.ts","./src/app/services/authentication/authentication.service.ts","./src/app/services/authorization/authorization.service.ts","./src/app/services/errors/error.service.ts","./src/app/services/filters/filter.service.ts","./src/app/services/images/image.service.ts","./src/app/services/interceptors/api-url-interceptor.ts","./src/app/services/interceptors/auth-interceptor.ts","./src/app/services/layout/menu.service.ts","./src/app/services/layout/menus.ts","./src/app/services/messages/console-message.service.ts","./src/app/services/messages/dialog-message.service.ts","./src/app/services/select-options/select-options.service.ts","./src/app/tools/access-control.ts","./src/app/tools/database-operation-type.ts","./src/app/tools/message-type.ts","./src/app/tools/png-table-search-query-builder.ts","./src/app/tools/primeNgHelper.ts","./src/app/tools/regexPatterns.ts","./src/app/tools/stringBuilder.ts","./src/app/ui-controls/form-validator.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { LazyLoadEvent } from \"primeng/api\";\r\nimport { PngTableColumn } from \"./interfaces/png\";\r\nimport { PngTableSearchQueryBuilder } from \"./tools/png-table-search-query-builder\";\r\n\r\nexport const ApiRoutes = {\r\n  audit: {\r\n    getObjectHistory: (event: LazyLoadEvent, columns: PngTableColumn[], entityId: string, entityTableName: string) => `audit${new PngTableSearchQueryBuilder(event, columns).create()}&entityId=${entityId}&entityTableName=${entityTableName}`,\r\n    getFieldNames: \"audit/getFieldNames\"\r\n  },\r\n  client: {\r\n    delete: (clientId: string) => `client/${clientId}`,\r\n    getAll: (event: LazyLoadEvent, columns: PngTableColumn[]) => `client${new PngTableSearchQueryBuilder(event, columns).create()}`,\r\n    getById: (clientId: string) => `client/${clientId}`,\r\n    post: \"client\",\r\n    put: \"client\"\r\n  },\r\n  clientRepresentative: {\r\n    delete: (clientRepresentativeId: string) => `client/representative/${clientRepresentativeId}`,\r\n    getAll: (event: LazyLoadEvent, columns: PngTableColumn[], clientId: string) => `client/representative${new PngTableSearchQueryBuilder(event, columns).create()}&clientId=${clientId}`,\r\n    getById: (clientRepresentativeId: string) => `client/representative/${clientRepresentativeId}`,\r\n    post: \"client/representative\",\r\n    put: \"client/representative\"\r\n  },\r\n  equipment: {\r\n    delete: (equipmentId: string) => `equipment/${equipmentId}`,\r\n    getAll: (event: LazyLoadEvent, columns: PngTableColumn[]) => `equipment${new PngTableSearchQueryBuilder(event, columns).create()}`,\r\n    file: {\r\n      photo: {\r\n        download: (photoId: string) => `equipment/file/photo/download/${photoId}`\r\n      }\r\n    },\r\n    getById: (equipmentId: string) => `equipment/${equipmentId}`,\r\n    post: \"equipment\",\r\n    put: \"equipment\"\r\n  },\r\n  identity: {\r\n    authenticate: \"identity/authenticate\",\r\n    refreshToken: \"identity/refreshToken\"\r\n  },\r\n  manufacturer: {\r\n    delete: (manufacturerId: string) => `manufacturer/${manufacturerId}`,\r\n    getAll: (event: LazyLoadEvent, columns: PngTableColumn[]) => `manufacturer${new PngTableSearchQueryBuilder(event, columns).create()}`,\r\n    getById: (manufacturerId: string) => `manufacturer/${manufacturerId}`,\r\n    post: \"manufacturer\",\r\n    put: \"manufacturer\"\r\n  },\r\n  selectOptions: {\r\n    audits: (event: LazyLoadEvent, columns: PngTableColumn[], entityId: string, entityTableName: string) => `audit/getFieldNames${new PngTableSearchQueryBuilder(event, columns).create()}&entityId=${entityId}&entityTableName=${entityTableName}`,\r\n    clientTypes: \"selectoptions/clientTypes\",\r\n    countries: \"selectoptions/countries\",\r\n    equipmentTypes: \"selectoptions/equipmentTypes\",\r\n    languages: \"selectoptions/languages\",\r\n    manufacturers: \"selectoptions/manufacturers\",\r\n    userRoles: \"selectoptions/userRoles\",\r\n    yesNoOptions: \"selectoptions/yesNo\"\r\n  },\r\n  user: {\r\n    changeLanguage: \"user/changeLanguage\",\r\n    changeRole: \"user/changeRole\",\r\n    changeTheme: \"user/changeTheme\",\r\n    delete: (userId: string) => `user/${userId}`,\r\n    getAll: (event: LazyLoadEvent, columns: PngTableColumn[]) => `user${new PngTableSearchQueryBuilder(event, columns).create()}`,\r\n    getById: (userId: string) => `user/${userId}`,\r\n    getLanguage: (userId: string) => `user/getLanguage/${userId}`,\r\n    getProfileById: (userId: string) => `user/profile/${userId}`,\r\n    getTheme: (userId: string) => `user/getTheme/${userId}`,\r\n    post: \"user\",\r\n    put: \"user\",\r\n    saveProfile: \"user/profile\"\r\n  },\r\n  userRole: {\r\n    delete: (userRoleId: number) => `userRole/${userRoleId}`,\r\n    getAll: (event: LazyLoadEvent, columns: PngTableColumn[]) => `userRole${new PngTableSearchQueryBuilder(event, columns).create()}`,\r\n    getById: (userRoleId: number) => `userRole/${userRoleId}`,\r\n    getUserRolePermissionsForCreation: \"userRole/getUserRolePermissionsForCreation\",\r\n    post: \"userRole\",\r\n    put: \"userRole\"\r\n  }\r\n}","import { Data, RouterModule } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppLayoutComponent } from './layout/app.layout.component';\r\nimport { UserListComponent } from './components/users/user-list';\r\nimport { UserRoleListComponent } from './components/user-roles/user-role-list';\r\nimport { LoginComponent } from './components/login/login';\r\nimport { AuthGuard } from './services/auth-guard/auth-guard.service';\r\nimport { UserPermissionEnum } from './enums/user-permission-enum';\r\nimport { UserDetailsComponent } from './components/users/user-details';\r\nimport { UserCreationComponent } from './components/users/user-create';\r\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\r\nimport { Routes } from './routes';\r\nimport { UserRoleCreationComponent } from './components/user-roles/user-role-create';\r\nimport { UserRoleDetailsComponent } from './components/user-roles/user-role-details';\r\nimport { ClientListComponent } from './components/clients/client-list';\r\nimport { ClientCreationComponent } from './components/clients/client-create';\r\nimport { ClientDetailsComponent } from './components/clients/client-details';\r\nimport { ManufacturerListComponent } from './components/manufacturers/manufacturer-list';\r\nimport { ManufacturerCreationComponent } from './components/manufacturers/manufacturer-create';\r\nimport { ManufacturerDetailsComponent } from './components/manufacturers/manufacturer-details';\r\nimport { EquipmentListComponent } from './components/equipments/equipment-list';\r\nimport { EquipmentCreationComponent } from './components/equipments/equipment-create';\r\nimport { EquipmentDetailsComponent } from './components/equipments/equipment-details';\r\nimport { UserProfileComponent } from './components/users/user-profile';\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forRoot([\r\n            {\r\n                path: Routes.home.paths.default, component: AppLayoutComponent,\r\n                data: {\r\n                    breadcrumb: Routes.home.breadcrumbs.default\r\n                },\r\n                children: [\r\n                    {\r\n                        path: Routes.users.paths.profile,\r\n                        component: UserProfileComponent,\r\n                        canActivate: [AuthGuard],\r\n                        data: {\r\n                            allowedPermissions: [UserPermissionEnum.ForAll],\r\n                            breadcrumb: Routes.users.breadcrumbs.profile\r\n                        }\r\n                    },\r\n                    {\r\n                        path: Routes.clients.paths.list,\r\n                        canActivate: [AuthGuard],\r\n                        data: <Data>{\r\n                            allowedPermissions: [UserPermissionEnum.Clients_CanList],\r\n                            breadcrumb: Routes.clients.breadcrumbs.list\r\n                        },\r\n                        children: [\r\n                            {\r\n                                path: '',\r\n                                component: ClientListComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Clients_CanList],\r\n                                    breadcrumb: null\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.clients.paths.create,\r\n                                component: ClientCreationComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Clients_CanModify],\r\n                                    breadcrumb: Routes.clients.breadcrumbs.creation\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.clients.paths.edit,\r\n                                component: ClientDetailsComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Clients_CanModify],\r\n                                    breadcrumb: Routes.clients.breadcrumbs.edition\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        path: Routes.equipments.paths.list,\r\n                        canActivate: [AuthGuard],\r\n                        data: <Data>{\r\n                            allowedPermissions: [UserPermissionEnum.Equipments_CanList],\r\n                            breadcrumb: Routes.equipments.breadcrumbs.list\r\n                        },\r\n                        children: [\r\n                            {\r\n                                path: '',\r\n                                component: EquipmentListComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Equipments_CanList],\r\n                                    breadcrumb: null\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.equipments.paths.create,\r\n                                component: EquipmentCreationComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Equipments_CanModify],\r\n                                    breadcrumb: Routes.equipments.breadcrumbs.creation\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.equipments.paths.edit,\r\n                                component: EquipmentDetailsComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Equipments_CanModify],\r\n                                    breadcrumb: Routes.equipments.breadcrumbs.edition\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        path: Routes.manufacturers.paths.list,\r\n                        canActivate: [AuthGuard],\r\n                        data: <Data>{\r\n                            allowedPermissions: [UserPermissionEnum.Manufacturers_CanList],\r\n                            breadcrumb: Routes.manufacturers.breadcrumbs.list\r\n                        },\r\n                        children: [\r\n                            {\r\n                                path: '',\r\n                                component: ManufacturerListComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Manufacturers_CanList],\r\n                                    breadcrumb: null\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.manufacturers.paths.create,\r\n                                component: ManufacturerCreationComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Manufacturers_CanModify],\r\n                                    breadcrumb: Routes.manufacturers.breadcrumbs.creation\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.manufacturers.paths.edit,\r\n                                component: ManufacturerDetailsComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Manufacturers_CanModify],\r\n                                    breadcrumb: Routes.manufacturers.breadcrumbs.edition\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        path: Routes.users.paths.list,\r\n                        canActivate: [AuthGuard],\r\n                        data: <Data>{\r\n                            allowedPermissions: [UserPermissionEnum.Users_CanList],\r\n                            breadcrumb: Routes.users.breadcrumbs.list\r\n                        },\r\n                        children: [\r\n                            {\r\n                                path: '',\r\n                                component: UserListComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Users_CanList],\r\n                                    breadcrumb: null\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.users.paths.create,\r\n                                component: UserCreationComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Users_CanModify],\r\n                                    breadcrumb: Routes.users.breadcrumbs.creation\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.users.paths.edit,\r\n                                component: UserDetailsComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Users_CanList],\r\n                                    breadcrumb: Routes.users.breadcrumbs.edition\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        path: Routes.userRoles.paths.list,\r\n                        canActivate: [AuthGuard],\r\n                        data: <Data>{\r\n                            allowedPermissions: [UserPermissionEnum.UserRoles_CanList],\r\n                            breadcrumb: Routes.userRoles.breadcrumbs.list\r\n                        },\r\n                        children: [\r\n                            {\r\n                                path: '',\r\n                                component: UserRoleListComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.UserRoles_CanList],\r\n                                    breadcrumb: null\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.userRoles.paths.create,\r\n                                component: UserRoleCreationComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.UserRoles_CanModify],\r\n                                    breadcrumb: Routes.userRoles.breadcrumbs.creation\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.userRoles.paths.edit,\r\n                                component: UserRoleDetailsComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.UserRoles_CanList],\r\n                                    breadcrumb: Routes.userRoles.breadcrumbs.edition\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                path: Routes.login.paths.default,\r\n                component: LoginComponent,\r\n                data: {\r\n                    breadcrumb: null\r\n                }\r\n            },\r\n            {\r\n                path: '**',\r\n                redirectTo: Routes.home.paths.default\r\n            },\r\n            {\r\n                path: '',\r\n                redirectTo: Routes.home.paths.default,\r\n                pathMatch: 'full'\r\n            },\r\n        ], { scrollPositionRestoration: 'enabled', anchorScrolling: 'enabled', onSameUrlNavigation: 'reload', useHash: false })\r\n    ],\r\n    providers: [\r\n        {\r\n            provide: LocationStrategy, useClass: PathLocationStrategy\r\n        }\r\n    ],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit, HostListener } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { PrimeNGConfig } from 'primeng/api';\r\nimport { AuthenticationService } from './services/authentication/authentication.service';\r\nimport { AuthorizationService } from './services/authorization/authorization.service';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n    public isUserLoggedIn: boolean;\r\n\r\n    constructor(private primengConfig: PrimeNGConfig,\r\n        private translate: TranslateService,\r\n        private authenticationService: AuthenticationService,\r\n        private authorizationService: AuthorizationService,\r\n        private titleService: Title) {\r\n        this.translate.setDefaultLang('pl');\r\n        this.isUserLoggedIn = this.authenticationService.isLoggedIn();\r\n        this.authorizationService.decodeTokenAndSetData();\r\n    }\r\n\r\n    @HostListener('document:keydown.enter', ['$event']) onKeydownHandler(event: KeyboardEvent) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.primengConfig.ripple = true;\r\n        this.titleService.setTitle(\"Equiprent\");\r\n    }\r\n}\r\n","//Angular\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule, LocationStrategy, PathLocationStrategy } from '@angular/common';\r\nimport { registerLocaleData } from '@angular/common';\r\nimport localePl from '@angular/common/locales/pl';\r\nimport { NgxMaskModule, IConfig } from 'ngx-mask';\r\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { HttpClient, HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { JwtModule } from '@auth0/angular-jwt';\r\n\r\n//Application\r\nimport { AppComponent } from './app.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppLayoutModule } from './layout/app.layout.module';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n//Services\r\nimport { AuthenticationService } from './services/authentication/authentication.service';\r\nimport { AuthGuard } from './services/auth-guard/auth-guard.service';\r\nimport { AuthInterceptor } from './services/interceptors/auth-interceptor';\r\nimport { AuthorizationService } from './services/authorization/authorization.service';\r\nimport { ConsoleMessageService } from './services/messages/console-message.service';\r\nimport { DialogMessageService } from './services/messages/dialog-message.service';\r\nimport { ErrorService } from './services/errors/error.service';\r\nimport { FilterService } from './services/filters/filter.service';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ImageService } from './services/images/image.service';\r\nimport { MenuService } from './services/layout/menu.service';\r\nimport { SelectOptionsService } from './services/select-options/select-options.service';\r\n\r\n//Components\r\nimport { AddressComponent } from './components/addresses/address';\r\nimport { AuditListForEntityComponent } from './components/audits/audit-list-for-entity';\r\nimport { ClientCreationComponent } from './components/clients/client-create';\r\nimport { ClientDetailsComponent } from './components/clients/client-details';\r\nimport { ClientListComponent } from './components/clients/client-list';\r\nimport { ClientRepresentativeCreationComponent } from './components/representatives/client-representative-create';\r\nimport { ClientRepresentativeDetailsComponent } from './components/representatives/client-representative-details';\r\nimport { ClientRepresentativeListComponent } from './components/representatives/client-representative-list';\r\nimport { CompanyClientAddressComponent } from './components/addresses/company-client-address';\r\nimport { DeletionDialogComponent } from './components/dialogs/deletion-dialog';\r\nimport { EquipmentCreationComponent } from './components/equipments/equipment-create';\r\nimport { EquipmentDetailsComponent } from './components/equipments/equipment-details';\r\nimport { EquipmentListComponent } from './components/equipments/equipment-list';\r\nimport { EquipmentPhotosComponent } from './components/equipments/photos/equipment-photos';\r\nimport { LoginComponent } from './components/login/login';\r\nimport { LoginResetPasswordComponent } from './components/login/login-reset-password';\r\nimport { ManufacturerAddressComponent } from './components/addresses/manufacturer-address';\r\nimport { ManufacturerCreationComponent } from './components/manufacturers/manufacturer-create';\r\nimport { ManufacturerDetailsComponent } from './components/manufacturers/manufacturer-details';\r\nimport { ManufacturerListComponent } from './components/manufacturers/manufacturer-list';\r\nimport { NameInLanguagesComponent } from './components/name-in-languages/name-in-languages';\r\nimport { PrivateClientAddressComponent } from './components/addresses/private-client-address';\r\nimport { PrivateClientComponent } from './components/clients/private-client';\r\nimport { UserCreationComponent } from './components/users/user-create';\r\nimport { UserDetailsComponent } from './components/users/user-details';\r\nimport { UserListComponent } from './components/users/user-list';\r\nimport { UserProfileComponent } from './components/users/user-profile';\r\nimport { UserRoleCreationComponent } from './components/user-roles/user-role-create';\r\nimport { UserRoleDetailsComponent } from './components/user-roles/user-role-details';\r\nimport { UserRoleListComponent } from './components/user-roles/user-role-list';\r\nimport { UserRolePermissionsComponent } from './components/user-roles/permissions/user-role-permissions';\r\n\r\n//PrimeNG\r\nimport { ApiUrlInterceptor } from './services/interceptors/api-url-interceptor';\r\nimport { BreadcrumbModule } from 'primeng/breadcrumb';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { CheckboxModule } from 'primeng/checkbox';\r\nimport { ConfirmDialogModule } from 'primeng/confirmdialog';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { DialogService } from 'primeng/dynamicdialog';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { DynamicDialogModule } from 'primeng/dynamicdialog';\r\nimport { GalleriaModule } from 'primeng/galleria';\r\nimport { MessageModule } from 'primeng/message';\r\nimport { MessagesModule } from 'primeng/messages';\r\nimport { MessageService } from 'primeng/api';\r\nimport { MultiSelectModule } from 'primeng/multiselect';\r\nimport { PanelMenuModule } from 'primeng/panelmenu';\r\nimport { PasswordModule } from 'primeng/password';\r\nimport { SplitButtonModule } from 'primeng/splitbutton';\r\nimport { TableModule } from 'primeng/table';\r\nimport { TabViewModule } from 'primeng/tabview';\r\nimport { ToastModule } from 'primeng/toast';\r\nimport { TreeTableModule } from 'primeng/treetable';\r\n\r\nregisterLocaleData(localePl, 'pl');\r\nexport const options: Partial<IConfig> | (() => Partial<IConfig>) = {};\r\n\r\n@NgModule({\r\n    declarations: [\r\n        //[start] app components\r\n        AppComponent,\r\n        //[end] app components\r\n        //[start] custom components\r\n        AddressComponent,\r\n        AuditListForEntityComponent,\r\n        ClientCreationComponent,\r\n        ClientDetailsComponent,\r\n        ClientListComponent,\r\n        ClientRepresentativeCreationComponent,\r\n        ClientRepresentativeDetailsComponent,\r\n        ClientRepresentativeListComponent,\r\n        CompanyClientAddressComponent,\r\n        DeletionDialogComponent,\r\n        EquipmentCreationComponent,\r\n        EquipmentDetailsComponent,\r\n        EquipmentListComponent,\r\n        EquipmentPhotosComponent,\r\n        LoginComponent,\r\n        LoginResetPasswordComponent,\r\n        ManufacturerAddressComponent,\r\n        ManufacturerCreationComponent,\r\n        ManufacturerDetailsComponent,\r\n        ManufacturerListComponent,\r\n        NameInLanguagesComponent,\r\n        PrivateClientAddressComponent,\r\n        PrivateClientComponent,\r\n        UserCreationComponent,\r\n        UserDetailsComponent,\r\n        UserListComponent,\r\n        UserProfileComponent,\r\n        UserRoleCreationComponent,\r\n        UserRoleDetailsComponent,\r\n        UserRoleListComponent,\r\n        UserRolePermissionsComponent,\r\n        //[end] custom components\r\n    ],\r\n    imports: [\r\n        //[start] app modules\r\n        AppLayoutModule,\r\n        AppRoutingModule,\r\n        BrowserModule,\r\n        CommonModule,\r\n        FormsModule,\r\n        HttpClientModule,\r\n        JwtModule.forRoot({\r\n            config: {\r\n                tokenGetter: jwtTokenGetter\r\n            }\r\n        }),\r\n        NgxMaskModule.forRoot(options),\r\n        ReactiveFormsModule,\r\n        TranslateModule.forRoot({\r\n            loader: {\r\n                provide: TranslateLoader,\r\n                useFactory: HttpLoaderFactory,\r\n                deps: [HttpClient]\r\n            }\r\n        }),\r\n        //[end] app modules\r\n        //[start] primeng Modules\r\n        BreadcrumbModule,\r\n        ButtonModule,\r\n        CheckboxModule,\r\n        ConfirmDialogModule,\r\n        DropdownModule,\r\n        DynamicDialogModule,\r\n        GalleriaModule,\r\n        MessageModule,\r\n        MessagesModule,\r\n        MultiSelectModule,\r\n        PanelMenuModule,\r\n        PasswordModule,\r\n        SplitButtonModule,\r\n        TableModule,\r\n        TabViewModule,\r\n        ToastModule,\r\n        TreeTableModule,\r\n        //[end] primeng Modules\r\n    ],\r\n    providers: [\r\n        //[start] app services\r\n        { provide: LocationStrategy, useClass: PathLocationStrategy },\r\n        {\r\n            provide: HTTP_INTERCEPTORS,\r\n            useClass: AuthInterceptor,\r\n            multi: true\r\n        },\r\n        {\r\n            provide: HTTP_INTERCEPTORS,\r\n            useClass: ApiUrlInterceptor,\r\n            multi: true\r\n        },\r\n        AuthenticationService,\r\n        AuthGuard,\r\n        AuthorizationService,\r\n        ConfirmationService,\r\n        ConsoleMessageService,\r\n        DialogMessageService,\r\n        DialogService,\r\n        ErrorService,\r\n        FilterService,\r\n        ImageService,\r\n        MessageService,\r\n        MenuService,\r\n        SelectOptionsService,\r\n        //[end] app services\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\r\nexport function jwtTokenGetter() {\r\n    return localStorage.getItem(environment.auth_key);\r\n}\r\n\r\nexport function HttpLoaderFactory(http: HttpClient) {\r\n    return new TranslateHttpLoader(http);\r\n}","import { AccessControl } from \"src/app/tools/access-control\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { Confirmation, ConfirmationService } from \"primeng/api\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ApiResultEnum } from \"src/app/enums/api-result-enum\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { Identifiable } from \"src/app/interfaces/identifiable\";\r\n\r\nexport abstract class AccessControlComponent<T extends Identifiable> {\r\n\r\n  protected abstract readonly deletedEntityInstanceIdentificationInitializer: (deletedEntity: T) => string;\r\n\r\n  private accessControl: AccessControl;\r\n\r\n  public get hasAccessToButtons(): boolean {\r\n    return this.accessControl.hasAccessToButtons;\r\n  }\r\n\r\n  public get onEditLabelId(): string {\r\n    return this.accessControl.hasAccessToButtons ? 'General.Edit' : 'General.Details';\r\n  }\r\n\r\n  public readonly onDeleteLabelId = 'General.Delete';\r\n\r\n  constructor(\r\n    protected readonly authorizationService: AuthorizationService,\r\n    protected readonly confirmationService: ConfirmationService,\r\n    protected readonly consoleMessageService: ConsoleMessageService,\r\n    public readonly deletionKey: string,\r\n    protected readonly deletionLinkInitializer: (...args: any[]) => string,\r\n    protected readonly dialogMessageService: DialogMessageService,\r\n    protected readonly entityName: string,\r\n    protected readonly errorService: ErrorService,\r\n    protected readonly httpClient: HttpClient,\r\n    protected readonly onAfterDeletionSuccessOperationsHandler: (...args: any[]) => void,\r\n    protected readonly router: Router,\r\n    public readonly translate: TranslateService,\r\n    public readonly userPermissions: number[]) {\r\n\r\n    this.accessControl = new AccessControl(this.authorizationService, this.userPermissions);\r\n  }\r\n\r\n  public onDelete(entity: T) {\r\n    this.confirmationService.confirm(<Confirmation>{\r\n      key: this.deletionKey,\r\n      message: `${this.translate.instant(this.entityName + '.DeletionConfirmation')} ${this.deletedEntityInstanceIdentificationInitializer(entity)}?`,\r\n      accept: () => {\r\n        this.deleteEntity(entity);\r\n      }\r\n    });\r\n  }\r\n\r\n  private deleteEntity(entity: T) {\r\n    this.httpClient\r\n      .delete<string>(this.deletionLinkInitializer(entity.Id))\r\n      .subscribe({\r\n        next: result => {\r\n          if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n            this.dialogMessageService.addSuccess(this.translate.instant(`${this.entityName}.Deleted`));\r\n          }\r\n          else {\r\n            this.dialogMessageService.addError(this.getErrorMessageForResult(result) ?? this.errorService.getDefaultErrorMessage());\r\n          }\r\n\r\n          this.onAfterDeletionSuccessOperationsHandler();\r\n\r\n          console.log(this.consoleMessageService.getConsoleMessageWithResultForEntityAfterDeletion(this.entityName, result));\r\n        },\r\n        error: error => {\r\n          this.dialogMessageService.addError(this.errorService.getFirstTranslatedErrorMessage(error));\r\n        }\r\n      });\r\n  }\r\n\r\n  protected getErrorMessageForResult(result: string): string | undefined {\r\n    if (Object.keys(ApiResultEnum).includes(result)) {\r\n      const apiErrorKey = ApiResultEnum[Number(this.getApiResultKeyByValue(result))].toString();\r\n      return `${this.entityName}.Messages.${apiErrorKey}`;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private getApiResultKeyByValue(value: string): keyof ApiResultEnum | undefined {\r\n    const keys = Object.keys(ApiResultEnum).filter((key) => (ApiResultEnum as any)[key] === value);\r\n    return keys.length > 0 ? keys[0] as keyof ApiResultEnum : undefined;\r\n  }\r\n}","import { AccessControl } from \"src/app/tools/access-control\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { FormComponent } from \"./form\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { Confirmation, ConfirmationService } from \"primeng/api\";\r\nimport { ApiResultEnum } from \"src/app/enums/api-result-enum\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\n\r\nexport abstract class AccessControlFormComponent<T>\r\n  extends FormComponent<T> {\r\n\r\n  protected abstract override readonly afterSubmitionCustomOperationsHandler?: (...args: any[]) => void;\r\n  protected abstract readonly deletedEntityInstanceIdentificationInitializer: (...args: any[]) => string;\r\n  protected readonly entityId: string | number;\r\n  protected readonly onAfterDeletionSuccessNavigateUsingLinkHandler?: (link?: string) => void;\r\n  protected override readonly onAfterSubmitionSuccessNavigateUsingLinkHandler?: (link?: string) => void;\r\n  protected override readonly onBackNavigateUsingLinkHandler?: (link?: string) => void;\r\n\r\n  private readonly deletionLink: string;\r\n  private readonly accessControl: AccessControl;\r\n\r\n  public get hasAccessToButtons(): boolean {\r\n    return this.accessControl.hasAccessToButtons;\r\n  }\r\n\r\n  constructor(\r\n    protected readonly activatedRoute: ActivatedRoute,\r\n    protected readonly authorizationService: AuthorizationService,\r\n    protected readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    public readonly deletionKey: string,\r\n    protected readonly deletionLinkInitializer: (...args: any[]) => string,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly entityName: string,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly mode: FormModeEnum,\r\n    protected override readonly router: Router,\r\n    public override readonly submitionLink: string,\r\n    public override readonly translate: TranslateService,\r\n    public userPermissions: number[],\r\n    protected override readonly afterSubmitionNavigationLink?: string) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      entityName,\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      mode,\r\n      router,\r\n      submitionLink,\r\n      translate);\r\n\r\n    this.accessControl = new AccessControl(this.authorizationService, this.userPermissions);\r\n    this.entityId = this.activatedRoute.snapshot.params[\"id\"];\r\n    this.deletionLink = deletionLinkInitializer(this.entityId);\r\n    this.isDisabled = true;\r\n  }\r\n\r\n  public onDelete() {\r\n    this.confirmationService.confirm(<Confirmation>{\r\n      key: this.deletionKey,\r\n      message: `${this.translate.instant(this.entityName + '.DeletionConfirmation')} ${this.deletedEntityInstanceIdentificationInitializer()}?`,\r\n      accept: () => {\r\n        this.isExecuting = true;\r\n        this.deleteEntity();\r\n      }\r\n    });\r\n  }\r\n\r\n  protected override updateForm(obj?: { [key: string]: any }) {\r\n    super.updateForm(obj);\r\n    this.setAccess();\r\n\r\n    if (!this.form.disabled) {\r\n      this.formValidator.updateAllControlsToTouched();\r\n    }\r\n  }\r\n\r\n  private deleteEntity() {\r\n    this.httpClient\r\n      .delete<string>(this.deletionLink)\r\n      .subscribe({\r\n        next: result => {\r\n          if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n            this.dialogMessageService.addSuccess(this.translate.instant(`${this.entityName}.Deleted`));\r\n\r\n            if (!this.onAfterDeletionSuccessNavigateUsingLinkHandler) {\r\n              this.router.navigate([this.afterSubmitionNavigationLink]);\r\n            }\r\n            else {\r\n              this.onAfterDeletionSuccessNavigateUsingLinkHandler();\r\n            }\r\n          }\r\n          else {\r\n            this.dialogMessageService.addError(this.getErrorMessageForResult(result) ?? this.errorService.getDefaultErrorMessage());\r\n          }\r\n\r\n          console.log(this.consoleMessageService.getConsoleMessageWithResultForEntityAfterDeletion(this.entityName, result));\r\n          this.isExecuting = false;\r\n        },\r\n        error: error => {\r\n          this.dialogMessageService.addError(this.errorService.getFirstTranslatedErrorMessage(error));\r\n          this.isExecuting = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  private setAccess() {\r\n    if (this.hasAccessToButtons) {\r\n      this.form.enable();\r\n    }\r\n    else {\r\n      this.form.disable();\r\n    }\r\n\r\n    this.isDisabled = !this.hasAccessToButtons;\r\n  }\r\n}","import { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { DynamicDialogConfig, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { AccessControlFormComponent } from \"./access-control-form\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { DialogConfigData } from \"../dialogs/dialog-config-data\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\n\r\nexport abstract class AccessControlOpenableAsDialogForm<T extends DialogConfigData, U>\r\n  extends AccessControlFormComponent<U> {\r\n\r\n  protected readonly _dialogConfigData: T | undefined;\r\n  protected override readonly entityId: string | number;\r\n  protected override readonly onAfterDeletionSuccessNavigateUsingLinkHandler = this.onAfterDeletionSuccessNavigateUsingLink;\r\n  protected override readonly onAfterSubmitionSuccessNavigateUsingLinkHandler = this.onAfterSubmitSuccessNavigateUsingLink;\r\n  protected override readonly onBackNavigateUsingLinkHandler = this.onBackNavigateUsingLink;\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    public override readonly deletionKey: string,\r\n    protected override readonly deletionLinkInitializer: (...args: any[]) => string,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly entityName: string,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly mode: FormModeEnum,\r\n    public readonly openedAsDialogConfig: DynamicDialogConfig,\r\n    public readonly openedAsDialogRef: DynamicDialogRef,\r\n    protected override readonly router: Router,\r\n    public override readonly submitionLink: string,\r\n    public override readonly translate: TranslateService,\r\n    public override readonly userPermissions: number[],\r\n    protected override readonly afterSubmitionNavigationLink?: string\r\n  ) {\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      deletionKey,\r\n      deletionLinkInitializer,\r\n      dialogMessageService,\r\n      entityName,\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      mode,\r\n      router,\r\n      submitionLink,\r\n      translate,\r\n      userPermissions,\r\n      afterSubmitionNavigationLink\r\n    );\r\n\r\n    this._dialogConfigData = this.getOpenedAsDialogData(openedAsDialogConfig?.data);\r\n    this.entityId = this.getEntityId();\r\n  }\r\n\r\n  public onBack() {\r\n    this.onBackNavigateUsingLink();\r\n  }\r\n\r\n  private onAfterDeletionSuccessNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private onAfterSubmitSuccessNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private onBackNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private getEntityId() {\r\n    if (this.openedAsDialogRef) {\r\n      return this._dialogConfigData?.Id;\r\n    }\r\n    else {\r\n      return this.activatedRoute.snapshot.params[\"id\"];\r\n    }\r\n  }\r\n\r\n  private getOpenedAsDialogData(data: any) {\r\n    return this.isOfTypeT(data) ? data : undefined;\r\n  }\r\n\r\n  private isOfTypeT(value: any): value is T {\r\n    return typeof value === 'object' && value !== null;\r\n  }\r\n}","import { Directive, Input, OnInit } from \"@angular/core\";\r\nimport { SimpleFormComponent } from \"./simple-form\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\n\r\n@Directive({\r\n  selector: \"dynamic-requirement-form\"\r\n})\r\nexport abstract class DynamicRequirementFormComponent\r\n  extends SimpleFormComponent {\r\n\r\n  @Input('requiredFields') requiredFields: string[] = [];\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder\r\n  ) {\r\n    super(formBuilder);\r\n  }\r\n\r\n  protected updateFormAfterInit(): void {\r\n    this.requiredFields.forEach(fieldName => {\r\n      const requiredField = this.form.get(fieldName);\r\n      if (requiredField) {\r\n        requiredField.setValidators([Validators.required]);\r\n      }\r\n    });\r\n  }\r\n}","import { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { PostAction } from \"./post-action\";\r\nimport { PutAction } from \"./put-action\";\r\nimport { FormSubmitionAction } from \"./form-submition-action\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nexport class FormSubmitionActionFactory<T> {\r\n\r\n  constructor(\r\n    private readonly consoleMessageService: ConsoleMessageService,\r\n    private readonly httpClient: HttpClient) { }\r\n\r\n  public getFormSubmitionAction<T>(mode: FormModeEnum): FormSubmitionAction<T> | undefined {\r\n    switch (mode) {\r\n      case FormModeEnum.Creation:\r\n        return new PostAction<T>(this.consoleMessageService, this.httpClient);\r\n\r\n      case FormModeEnum.Edition:\r\n        return new PutAction<T>(this.consoleMessageService, this.httpClient);\r\n\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n}","import { Observable } from \"rxjs\";\r\nimport { FormSubmitionAction } from \"./form-submition-action\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { FormComponent } from \"../form\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nexport class PostAction<T>\r\n  implements FormSubmitionAction<T> {\r\n\r\n  constructor(\r\n    private readonly consoleMessageService: ConsoleMessageService,\r\n    private readonly httpClient: HttpClient) {\r\n  }\r\n\r\n  getConsoleMessage: (entity: string, result: string) => string = (entity: string, result: string) => {\r\n    return this.consoleMessageService.getConsoleMessageWithResultForEntityAfterCreation(entity, result);\r\n  }\r\n\r\n  execute(formComponent: FormComponent<T>): Observable<string> {\r\n    const entity = formComponent.beforeSubmitionCustomOperationsHandler();\r\n    return this.httpClient.post<string>(formComponent.submitionLink, entity);\r\n  }\r\n\r\n  successMessageTag: string = 'Created';\r\n}","import { Observable } from \"rxjs\";\r\nimport { FormSubmitionAction } from \"./form-submition-action\";\r\nimport { FormComponent } from \"../form\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nexport class PutAction<T>\r\n  implements FormSubmitionAction<T> {\r\n\r\n  constructor(\r\n    private readonly consoleMessageService: ConsoleMessageService,\r\n    private readonly httpClient: HttpClient) { }\r\n\r\n  getConsoleMessage: (entity: string, result: string) => string = (entity: string, result: string) => {\r\n    return this.consoleMessageService.getConsoleMessageWithResultForEntityAfterUpdate(entity, result);\r\n  }\r\n\r\n  execute(formComponent: FormComponent<T>): Observable<string> {\r\n    const entity = formComponent.beforeSubmitionCustomOperationsHandler();\r\n    return this.httpClient.put<string>(formComponent.submitionLink, entity);\r\n  }\r\n\r\n  successMessageTag: string = 'Updated';\r\n}","import { FormBuilder, FormGroup } from \"@angular/forms\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { FormValidator } from \"src/app/ui-controls/form-validator\";\r\nimport { FormSubmitionActionFactory as FormSubmitionActionFactory } from \"./form-factories/form-submition-action-factory\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ApiResultEnum } from \"src/app/enums/api-result-enum\";\r\nimport { Router } from \"@angular/router\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\n\r\nexport abstract class FormComponent<T> {\r\n\r\n  public readonly beforeSubmitionCustomOperationsHandler: (...args: any[]) => T;\r\n  public readonly formMode: typeof FormModeEnum = FormModeEnum;\r\n\r\n  protected readonly afterSubmitionCustomOperationsHandler?: (...args: any[]) => void;\r\n  protected readonly onAfterSubmitionSuccessNavigateUsingLinkHandler?: (link?: string) => void;\r\n  protected readonly onBackNavigateUsingLinkHandler?: (link?: string) => void;\r\n\r\n  private _formValidator: FormValidator;\r\n\r\n  form: FormGroup;\r\n  isDisabled: boolean = false;\r\n  isExecuting: boolean = false;\r\n\r\n  public get shouldActionsBeDisabled(): boolean {\r\n    return this.form.invalid ||\r\n      this.isDisabled ||\r\n      this.isExecuting;\r\n  }\r\n\r\n  protected get formValidator(): FormValidator {\r\n    return this._formValidator;\r\n  }\r\n  private set formValidator(validator: FormValidator) {\r\n    this._formValidator = validator;\r\n  }\r\n\r\n  constructor(\r\n    protected readonly consoleMessageService: ConsoleMessageService,\r\n    protected readonly dialogMessageService: DialogMessageService,\r\n    protected readonly entityName: string,\r\n    protected readonly errorService: ErrorService,\r\n    protected readonly formBuilder: FormBuilder,\r\n    protected readonly httpClient: HttpClient,\r\n    protected readonly mode: FormModeEnum,\r\n    protected readonly router: Router,\r\n    public readonly submitionLink: string,\r\n    public readonly translate: TranslateService,\r\n    protected readonly afterSubmitionNavigationLink?: string) {\r\n  }\r\n\r\n  protected createForm(formFieldGroup?: object) {\r\n    this.form = this.formBuilder.group(formFieldGroup ?? {});\r\n    this.formValidator = new FormValidator(this.form);\r\n  }\r\n\r\n  public onSubmit() {\r\n    this.isExecuting = true;\r\n    const onSubmitAction = new FormSubmitionActionFactory(this.consoleMessageService, this.httpClient)\r\n      .getFormSubmitionAction<T>(this.mode);\r\n\r\n    if (!onSubmitAction)\r\n      return;\r\n\r\n    onSubmitAction\r\n      .execute(this)\r\n      .subscribe({\r\n        next: result => {\r\n          if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n            if (!this.onAfterSubmitionSuccessNavigateUsingLinkHandler) {\r\n              this.router.navigate([this.afterSubmitionNavigationLink]);\r\n            }\r\n            else {\r\n              this.onAfterSubmitionSuccessNavigateUsingLinkHandler(this.afterSubmitionNavigationLink);\r\n            }\r\n\r\n            this.dialogMessageService.addSuccess(this.translate.instant(`${this.entityName}.${onSubmitAction.successMessageTag}`));\r\n          }\r\n          else {\r\n            this.dialogMessageService.addError(this.getErrorMessageForResult(result) ?? this.errorService.getDefaultErrorMessage());\r\n          }\r\n\r\n          console.log(onSubmitAction.getConsoleMessage(this.entityName, result));\r\n\r\n          if (this.afterSubmitionCustomOperationsHandler) {\r\n            this.afterSubmitionCustomOperationsHandler();\r\n          }\r\n\r\n          this.isExecuting = false;\r\n        },\r\n        error: error => {\r\n          const firstTranslatedErrorMessage = this.errorService.getFirstTranslatedErrorMessage(error);\r\n          if (firstTranslatedErrorMessage !== this.errorService.getDefaultErrorMessage()) {\r\n            this.dialogMessageService.addError(this.errorService.getFirstTranslatedErrorMessage(error));\r\n          }\r\n          else {\r\n            const requestValidationByDatabaseErrorMessage = this.getErrorMessageForResult(this.errorService.getFirstErrorMessageKey(error));\r\n            this.dialogMessageService.addError(requestValidationByDatabaseErrorMessage ? this.translate.instant(requestValidationByDatabaseErrorMessage) : firstTranslatedErrorMessage);\r\n          }\r\n          this.isExecuting = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  protected updateForm(obj?: { [key: string]: any }) {\r\n    if (obj) {\r\n      this.form.patchValue(obj);\r\n    }\r\n  }\r\n\r\n  protected getErrorMessageForResult(result: string): string | undefined {\r\n    if (Object.keys(ApiResultEnum).includes(result)) {\r\n      const apiErrorKey = ApiResultEnum[Number(this.getApiResultKeyByValue(result))].toString();\r\n      return `${this.entityName}.Messages.${apiErrorKey}`;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private getApiResultKeyByValue(value: string): keyof ApiResultEnum | undefined {\r\n    const keys = Object.keys(ApiResultEnum).filter((key) => (ApiResultEnum as any)[key] === value);\r\n    return keys.length > 0 ? keys[0] as keyof ApiResultEnum : undefined;\r\n  }\r\n}","import { Router } from \"@angular/router\";\r\nimport { DynamicDialogConfig, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { FormComponent } from \"./form\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\n\r\nexport abstract class OpenableAsDialogForm<T, U>\r\n  extends FormComponent<U> {\r\n\r\n  protected readonly _dialogConfigData: T | undefined;\r\n  protected readonly onAfterDeletionSuccessNavigateUsingLinkHandler: (...args: any[]) => void = this.onAfterDeletionSuccessNavigateUsingLink;\r\n  protected override readonly onAfterSubmitionSuccessNavigateUsingLinkHandler = this.onAfterSubmitSuccessNavigateUsingLink;\r\n  protected override readonly onBackNavigateUsingLinkHandler = this.onBackNavigateUsingLink;\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly entityName: string,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly mode: FormModeEnum,\r\n    public openedAsDialogConfig: DynamicDialogConfig,\r\n    public openedAsDialogRef: DynamicDialogRef,\r\n    protected override readonly router: Router,\r\n    public override submitionLink: string,\r\n    public override readonly translate: TranslateService,\r\n    protected override afterSubmitionNavigationLink?: string) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      entityName,\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      mode,\r\n      router,\r\n      submitionLink,\r\n      translate,\r\n      afterSubmitionNavigationLink\r\n    );\r\n\r\n    this._dialogConfigData = this.getOpenedAsDialogData(openedAsDialogConfig?.data);\r\n  }\r\n\r\n  public onBack() {\r\n    this.onBackNavigateUsingLink();\r\n  }\r\n\r\n  private onAfterDeletionSuccessNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private onAfterSubmitSuccessNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private onBackNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private getOpenedAsDialogData(data: any) {\r\n    return this.isOfTypeT(data) ? data : undefined;\r\n  }\r\n\r\n  private isOfTypeT(value: any): value is T {\r\n    return typeof value === 'object' && value !== null;\r\n  }\r\n}","import { FormBuilder, FormGroup } from \"@angular/forms\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { FormValidator } from \"src/app/ui-controls/form-validator\";\r\n\r\nexport abstract class SimpleFormComponent {\r\n\r\n  public readonly formMode: typeof FormModeEnum = FormModeEnum;\r\n\r\n  public get form(): FormGroup {\r\n    return this._form;\r\n  };\r\n  private set form(value: FormGroup) {\r\n    this._form = value;\r\n  }\r\n\r\n  protected get formValidator(): FormValidator {\r\n    return this._formValidator;\r\n  }\r\n  private set formValidator(value: FormValidator) {\r\n    this._formValidator = value;\r\n  }\r\n\r\n  private _form: FormGroup;\r\n  private _formValidator: FormValidator;\r\n\r\n  isDisabled: boolean = false;\r\n  isExecuting: boolean = false;\r\n\r\n  constructor(protected readonly formBuilder: FormBuilder) { }\r\n\r\n  public get shouldActionsBeDisabled(): boolean {\r\n    return this.form.invalid ||\r\n      this.isDisabled ||\r\n      this.isExecuting;\r\n  }\r\n\r\n  protected createForm(formFieldGroup?: object, reloadForm = false) {\r\n    this.form = reloadForm ? new FormGroup(formFieldGroup) : this.formBuilder.group(formFieldGroup ?? {});\r\n    this.formValidator = new FormValidator(this.form);\r\n  }\r\n\r\n  protected updateForm(obj?: { [key: string]: any }) {\r\n    if (obj)\r\n      this.form.patchValue(obj);\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { SelectItem } from \"primeng/api\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { Address } from \"src/app/interfaces/address\";\r\nimport { DynamicRequirementFormComponent } from \"../abstract/forms/dynamic-requirement-form\";\r\n\r\n@Component({\r\n  selector: 'address',\r\n  templateUrl: './address.html'\r\n})\r\nexport class AddressComponent\r\n  extends DynamicRequirementFormComponent\r\n  implements OnInit {\r\n\r\n  @Input('entityAddress') entityAddress?: Address;\r\n  @Input('showTitle') showTitle?: boolean;\r\n\r\n  countries: SelectItem[];\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public readonly translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n    this.createForm({\r\n      ApartmentNumber: [''],\r\n      City: [''],\r\n      CountryId: [''],\r\n      Email: [''],\r\n      Id: null,\r\n      PhoneNumber: [''],\r\n      PostalCode: [''],\r\n      StreetName: [''],\r\n      StreetNumber: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n    this.updateFormAfterInit();\r\n\r\n    if (this.entityAddress) {\r\n      this.updateForm({\r\n        ApartmentNumber: this.entityAddress.ApartmentNumber,\r\n        City: this.entityAddress.City,\r\n        CountryId: this.entityAddress.Country.Id,\r\n        Email: this.entityAddress.Email,\r\n        Id: this.entityAddress.Id,\r\n        PhoneNumber: this.entityAddress.PhoneNumber,\r\n        PostalCode: this.entityAddress.PostalCode,\r\n        StreetName: this.entityAddress.StreetName,\r\n        StreetNumber: this.entityAddress.StreetNumber\r\n      });\r\n    }\r\n  }\r\n\r\n  private populateDropdowns() {\r\n    this.selectOptionsService\r\n      .getCountries()\r\n      .subscribe(options => {\r\n        this.countries = options;\r\n      });\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { SimpleFormComponent } from \"../abstract/forms/simple-form\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ClientAddress } from \"src/app/interfaces/address\";\r\n\r\n@Component({\r\n  selector: 'company-client-address',\r\n  templateUrl: './company-client-address.html'\r\n})\r\nexport class CompanyClientAddressComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  @Input('clientAddress') clientAddress?: ClientAddress;\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder,\r\n    public readonly translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n    this.createForm({\r\n      NationalCompanyId: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.clientAddress) {\r\n      this.updateForm({\r\n        NationalCompanyId: this.clientAddress.NationalId\r\n      });\r\n    }\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { SimpleFormComponent } from \"../abstract/forms/simple-form\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ManufacturerAddress } from \"src/app/interfaces/address\";\r\n\r\n@Component({\r\n  selector: 'manufacturer-address',\r\n  templateUrl: './manufacturer-address.html'\r\n})\r\nexport class ManufacturerAddressComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  @Input('manufacturerAddress') manufacturerAddress?: ManufacturerAddress;\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder,\r\n    public readonly translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n    this.createForm({\r\n      NationalId: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.manufacturerAddress) {\r\n      this.updateForm({\r\n        NationalId: this.manufacturerAddress.NationalId\r\n      });\r\n    }\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { SimpleFormComponent } from \"../abstract/forms/simple-form\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ClientAddress } from \"src/app/interfaces/address\";\r\n\r\n@Component({\r\n  selector: 'private-client-address',\r\n  templateUrl: './private-client-address.html'\r\n})\r\nexport class PrivateClientAddressComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  @Input('clientAddress') clientAddress?: ClientAddress;\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder,\r\n    public readonly translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n    this.createForm({\r\n      NationalCitizenId: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.clientAddress) {\r\n      this.updateForm({\r\n        NationalCitizenId: this.clientAddress.NationalId\r\n      });\r\n    }\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { LazyLoadEvent, SelectItem } from \"primeng/api\";\r\nimport { PngTable, PngTableColumn } from \"src/app/interfaces/png\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { FilterService } from \"src/app/services/filters/filter.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { AuditListItemModel, AuditListModel } from \"src/app/interfaces/audit\";\r\nimport { concatMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: \"audit-list-for-entity\",\r\n  templateUrl: \"./audit-list-for-entity.html\"\r\n})\r\nexport class AuditListForEntityComponent implements OnInit {\r\n\r\n  private readonly _dataPopulator = {\r\n    fieldNamesForObjectHistory: {\r\n      get: () => this.getFieldNamesForObjectHistory(),\r\n      set: (options: SelectItem[]) => this.setFieldNamesForObjectHistory(options)\r\n    },\r\n    objectHistory: {\r\n      get: (event: LazyLoadEvent) => this.getObjectHistory(event),\r\n      set: (audits: AuditListModel) => this.setObjectHistory(audits)\r\n    }\r\n  };\r\n\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  public audits: AuditListItemModel[];\r\n  public table: PngTable;\r\n  public fieldNameOptions: SelectItem[] = [];\r\n  public totalRecords: number;\r\n\r\n  @Input() entityId: string;\r\n  @Input() entityTableName: string;\r\n\r\n  constructor(\r\n    public readonly filterService: FilterService,\r\n    private readonly httpClient: HttpClient,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public readonly translate: TranslateService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.table = new PngTable([\r\n      <PngTableColumn>{\r\n        field: 'UserName',\r\n        header: 'Audit.UserName',\r\n        width: '20%',\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'CreatedOn',\r\n        header: 'Audit.CreatedOn',\r\n        width: '20%'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'FieldName',\r\n        header: 'Audit.FieldName',\r\n        width: '20%',\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'OldValue',\r\n        header: 'Audit.OldValue',\r\n        width: '20%',\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'NewValue',\r\n        header: 'Audit.NewValue',\r\n        width: '20%',\r\n        applyGlobalFiltering: true\r\n      }\r\n    ]);\r\n  }\r\n\r\n  public loadAuditsLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n\r\n    this._dataPopulator.objectHistory\r\n      .get(event)\r\n      .pipe(\r\n        concatMap(result => {\r\n          this._dataPopulator.objectHistory.set(result);\r\n\r\n          return this._dataPopulator.fieldNamesForObjectHistory.get();\r\n        })\r\n      )\r\n      .subscribe(result => {\r\n        this._dataPopulator.fieldNamesForObjectHistory.set(result);\r\n      });\r\n  }\r\n\r\n  private getFieldNamesForObjectHistory() {\r\n    return this.selectOptionsService\r\n      .getFieldNamesForObjectHistory(this.tempLazyLoadEvent, this.table.cols, this.entityId, this.entityTableName);\r\n  }\r\n\r\n  private getObjectHistory(event: LazyLoadEvent) {\r\n    return this.httpClient\r\n      .get<AuditListModel>(ApiRoutes.audit.getObjectHistory(event, this.table.cols, this.entityId, this.entityTableName));\r\n  }\r\n\r\n  private setFieldNamesForObjectHistory(options: SelectItem[]) {\r\n    this.fieldNameOptions = options;\r\n    this.table.setOptionsForColumn(\"FieldName\", this.fieldNameOptions);\r\n  }\r\n\r\n  private setObjectHistory(audits: AuditListModel) {\r\n    this.totalRecords = audits.TotalRowsCount;\r\n    this.audits = audits.List;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { SelectItem } from \"primeng/api\";\r\nimport { ClientTypeEnum } from \"src/app/enums/client-type-enum\";\r\nimport { PrivateClientComponent } from \"./private-client\";\r\nimport { AddressComponent } from \"../addresses/address\";\r\nimport { PrivateClientAddressComponent } from \"../addresses/private-client-address\";\r\nimport { CompanyClientAddressComponent } from \"../addresses/company-client-address\";\r\nimport { ClientCreationModel } from \"src/app/interfaces/client\";\r\nimport { ClientAddress, Country, addressFormFields } from \"src/app/interfaces/address\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { FormComponent } from \"../abstract/forms/form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\n\r\n@Component({\r\n  selector: \"client-create\",\r\n  templateUrl: \"./client-create.html\"\r\n})\r\nexport class ClientCreationComponent\r\n  extends FormComponent<ClientCreationModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareClientCreationModel;\r\n\r\n  @ViewChild('addressForm') addressForm: AddressComponent;\r\n  @ViewChild('companyClientAddressForm') companyClientAddressForm?: CompanyClientAddressComponent;\r\n  @ViewChild('privateClientAddressForm') privateClientAddressForm?: PrivateClientAddressComponent;\r\n  @ViewChild('privateClientForm') privateClientForm?: PrivateClientComponent;\r\n\r\n  readonly clientAddressRequiredFields: string[] = [\r\n    addressFormFields.City,\r\n    addressFormFields.Country,\r\n    addressFormFields.PostalCode,\r\n    addressFormFields.StreetName,\r\n    addressFormFields.StreetNumber\r\n  ];\r\n  readonly clientType: typeof ClientTypeEnum = ClientTypeEnum;\r\n\r\n  public override get shouldActionsBeDisabled(): boolean {\r\n    return super.shouldActionsBeDisabled ||\r\n      (this.addressForm?.form.invalid ?? false) ||\r\n      (this.companyClientAddressForm?.form.invalid ?? false) ||\r\n      (this.privateClientAddressForm?.form.invalid ?? false) ||\r\n      (this.privateClientForm?.form.invalid ?? false);\r\n  }\r\n\r\n  clientTypes: SelectItem[];\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'Client',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Creation,\r\n      router,\r\n      ApiRoutes.client.post,\r\n      translate,\r\n      Routes.clients.navigations.list\r\n    );\r\n\r\n    this.createForm({\r\n      ClientTypeId: null,\r\n      Name: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.clients.navigations.list]);\r\n  }\r\n\r\n  private getClientNationalId(): string {\r\n    switch (Number(this.form.value.ClientTypeId)) {\r\n      case ClientTypeEnum.Private:\r\n        return this.privateClientAddressForm?.form.value.NationalCitizenId;\r\n      case ClientTypeEnum.Company:\r\n        return this.companyClientAddressForm?.form.value.NationalCompanyId;\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  private populateDropdowns() {\r\n    this.selectOptionsService\r\n      .getClientTypes()\r\n      .subscribe(options => {\r\n        this.clientTypes = options;\r\n      });\r\n  }\r\n\r\n  private prepareClientCreationModel(): ClientCreationModel {\r\n    const clientAddress = <ClientAddress>{\r\n      ApartmentNumber: this.addressForm.form.value.ApartmentNumber,\r\n      City: this.addressForm.form.value.City,\r\n      Country: <Country>{\r\n        Id: this.addressForm.form.value.CountryId\r\n      },\r\n      Email: this.addressForm.form.value.Email,\r\n      NationalId: this.getClientNationalId(),\r\n      PhoneNumber: this.addressForm.form.value.PhoneNumber,\r\n      PostalCode: this.addressForm.form.value.PostalCode,\r\n      StreetName: this.addressForm.form.value.StreetName,\r\n      StreetNumber: this.addressForm.form.value.StreetNumber,\r\n    };\r\n    const client = <ClientCreationModel>{\r\n      Addresses: [clientAddress],\r\n      FirstName: this.privateClientForm?.form.value.FirstName,\r\n      LastName: this.privateClientForm?.form.value.LastName,\r\n      Name: this.form.value.Name,\r\n      TypeId: this.form.value.ClientTypeId,\r\n    };\r\n\r\n    return client;\r\n  }\r\n}","import { AfterViewInit, Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { ConfirmationService, SelectItem } from \"primeng/api\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission-enum\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { ClientTypeEnum } from \"src/app/enums/client-type-enum\";\r\nimport { ClientDetailsModel } from \"src/app/interfaces/client\";\r\nimport { AddressComponent } from \"../addresses/address\";\r\nimport { CompanyClientAddressComponent } from \"../addresses/company-client-address\";\r\nimport { PrivateClientAddressComponent } from \"../addresses/private-client-address\";\r\nimport { PrivateClientComponent } from \"./private-client\";\r\nimport { ClientAddress, Country, addressFormFields } from \"src/app/interfaces/address\";\r\nimport { AccessControlFormComponent } from \"../abstract/forms/access-control-form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { Routes } from \"src/app/routes\";\r\n\r\n@Component({\r\n  selector: \"client-details\",\r\n  templateUrl: \"./client-details.html\"\r\n})\r\nexport class ClientDetailsComponent\r\n  extends AccessControlFormComponent<ClientDetailsModel>\r\n  implements OnInit, AfterViewInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareClientDetailsModel;\r\n\r\n  protected override afterSubmitionCustomOperationsHandler = undefined;\r\n  protected override readonly deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n  protected override readonly entityId: string;\r\n\r\n  activeTab: number = 0;\r\n  client: ClientDetailsModel;\r\n  clientTypes: SelectItem[];\r\n  routes = Routes;\r\n\r\n  readonly clientAddressRequiredFields: string[] = [\r\n    addressFormFields.City,\r\n    addressFormFields.Country,\r\n    addressFormFields.PostalCode,\r\n    addressFormFields.StreetName,\r\n    addressFormFields.StreetNumber\r\n  ];\r\n  readonly clientType: typeof ClientTypeEnum = ClientTypeEnum;\r\n\r\n  public override get shouldActionsBeDisabled(): boolean {\r\n    return super.shouldActionsBeDisabled ||\r\n      !this.client ||\r\n      (this.addressForm?.form.invalid ?? false) ||\r\n      (this.companyClientAddressForm?.form.invalid ?? false) ||\r\n      (this.privateClientAddressForm?.form.invalid ?? false) ||\r\n      (this.privateClientForm?.form.invalid ?? false);\r\n  }\r\n\r\n  @ViewChild('addressForm') addressForm: AddressComponent;\r\n  @ViewChild('companyClientAddressForm') companyClientAddressForm?: CompanyClientAddressComponent;\r\n  @ViewChild('privateClientAddressForm') privateClientAddressForm?: PrivateClientAddressComponent;\r\n  @ViewChild('privateClientForm') privateClientForm?: PrivateClientComponent;\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteClient',\r\n      ApiRoutes.client.delete,\r\n      dialogMessageService,\r\n      'Client',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      router,\r\n      ApiRoutes.client.put,\r\n      translate,\r\n      [UserPermissionEnum.Clients_CanModify],\r\n      Routes.clients.navigations.list);\r\n\r\n    this.createForm({\r\n      ClientTypeId: null,\r\n      Name: ['', Validators.required]\r\n    });\r\n\r\n    this.loadClient();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const activeTab = this.activatedRoute.snapshot.params['activeTab'];\r\n    if (activeTab) {\r\n      this.switchActiveTab(Number(activeTab));\r\n    }\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.clients.navigations.list]);\r\n  }\r\n\r\n  public switchActiveTab(tabIndex: number) {\r\n    this.activeTab = tabIndex;\r\n  }\r\n\r\n  private getClientNationalId(): string {\r\n    switch (Number(this.form.value.ClientTypeId)) {\r\n      case ClientTypeEnum.Private:\r\n        return this.privateClientAddressForm?.form.value.NationalCitizenId;\r\n      case ClientTypeEnum.Company:\r\n        return this.companyClientAddressForm?.form.value.NationalCompanyId;\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  private getEntityInstanceName(): string {\r\n    return this.client.Name;\r\n  }\r\n\r\n  private loadClient() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<ClientDetailsModel>(ApiRoutes.client.getById(this.entityId))\r\n      .subscribe(result => {\r\n        this.client = result;\r\n\r\n        this.updateForm({\r\n          ClientTypeId: this.client.TypeId.toString(),\r\n          Name: this.client.Name,\r\n        });\r\n      });\r\n  }\r\n\r\n  private populateDropdowns() {\r\n    this.selectOptionsService\r\n      .getClientTypes()\r\n      .subscribe(options => {\r\n        this.clientTypes = options;\r\n      });\r\n  }\r\n\r\n  private prepareClientDetailsModel(): ClientDetailsModel {\r\n    const clientAddress = <ClientAddress>{\r\n      ApartmentNumber: this.addressForm.form.value.ApartmentNumber,\r\n      City: this.addressForm.form.value.City,\r\n      Country: <Country>{\r\n        Id: this.addressForm.form.value.CountryId\r\n      },\r\n      Email: this.addressForm.form.value.Email,\r\n      Id: this.addressForm.form.value.Id,\r\n      NationalId: this.getClientNationalId(),\r\n      PhoneNumber: this.addressForm.form.value.PhoneNumber,\r\n      PostalCode: this.addressForm.form.value.PostalCode,\r\n      StreetName: this.addressForm.form.value.StreetName,\r\n      StreetNumber: this.addressForm.form.value.StreetNumber\r\n    };\r\n    const client = <ClientDetailsModel>{\r\n      Addresses: [clientAddress],\r\n      FirstName: this.privateClientForm?.form.value.FirstName,\r\n      Id: this.client.Id,\r\n      LastName: this.privateClientForm?.form.value.LastName,\r\n      Name: this.form.value.Name,\r\n      TypeId: this.form.value.ClientTypeId\r\n    };\r\n\r\n    return client;\r\n  }\r\n}","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { AccessControlComponent } from '../abstract/access-controls/access-control';\r\nimport { ConfirmationService, LazyLoadEvent, SelectItem } from 'primeng/api';\r\nimport { PngTableColumn } from 'src/app/interfaces/png';\r\nimport { Table } from 'primeng/table';\r\nimport { AuthorizationService } from 'src/app/services/authorization/authorization.service';\r\nimport { UserPermissionEnum } from 'src/app/enums/user-permission-enum';\r\nimport { ClientListItemModel, ClientListModel } from 'src/app/interfaces/client';\r\nimport { Router } from '@angular/router';\r\nimport { Routes } from 'src/app/routes';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ApiRoutes } from 'src/app/api-routes';\r\nimport { DialogMessageService } from 'src/app/services/messages/dialog-message.service';\r\nimport { ErrorService } from 'src/app/services/errors/error.service';\r\nimport { ConsoleMessageService } from 'src/app/services/messages/console-message.service';\r\nimport { SelectOptionsService } from 'src/app/services/select-options/select-options.service';\r\nimport { FilterService } from 'src/app/services/filters/filter.service';\r\nimport { FilterTypeEnum } from 'src/app/enums/filter-type-enum';\r\n\r\n@Component({\r\n  selector: \"client-list\",\r\n  templateUrl: \"./client-list.html\"\r\n})\r\nexport class ClientListComponent\r\n  extends AccessControlComponent<ClientListItemModel>\r\n  implements OnInit {\r\n\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n\r\n  private readonly _dataPopulator = {\r\n    multiSelects: {\r\n      clientTypes: {\r\n        get: () => this.getClientTypeMultiSelectData(),\r\n        set: (clientTypes: SelectItem[]) => this.setClientTypeMultiSelectData(clientTypes)\r\n      }\r\n    },\r\n    clients: {\r\n      get: (event: LazyLoadEvent) => this.getClients(event),\r\n      set: (clients: ClientListModel) => this.setClients(clients)\r\n    }\r\n  };\r\n\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  clients: ClientListItemModel[];\r\n  clientTypeOptions: SelectItem[];\r\n  cols: PngTableColumn[];\r\n  totalRecords: number;\r\n\r\n  @ViewChild('dataTable') dataTable: Table;\r\n\r\n  constructor(\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    public readonly filterService: FilterService,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionService: SelectOptionsService,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteClient',\r\n      ApiRoutes.client.delete,\r\n      dialogMessageService,\r\n      'Client',\r\n      errorService,\r\n      httpClient,\r\n      () => {\r\n        this._dataPopulator.clients\r\n          .get(this.tempLazyLoadEvent)\r\n          .subscribe(result => this._dataPopulator.clients.set(result));\r\n      },\r\n      router,\r\n      translate,\r\n      [UserPermissionEnum.Clients_CanModify]);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cols = [\r\n      <PngTableColumn>{\r\n        field: 'Name',\r\n        header: 'Client.Name',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true,\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'FirstName',\r\n        header: 'Client.FirstName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'LastName',\r\n        header: 'Client.LastName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'TypeName',\r\n        header: 'Client.TypeName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true,\r\n        replaceWith: 'ClientTypeId'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Actions',\r\n        header: '',\r\n        width: '20%'\r\n      }\r\n    ];\r\n\r\n    this._dataPopulator.multiSelects.clientTypes\r\n      .get()\r\n      .subscribe(clientTypes => this._dataPopulator.multiSelects.clientTypes.set(clientTypes));\r\n  }\r\n\r\n  public loadClientsLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n\r\n    this._dataPopulator.clients\r\n      .get(event)\r\n      .subscribe(result => this._dataPopulator.clients.set(result));\r\n  }\r\n\r\n  public onCreate() {\r\n    this.router.navigate([Routes.clients.navigations.creation]);\r\n  }\r\n\r\n  public onEdit(client: ClientListItemModel) {\r\n    this.router.navigate([Routes.clients.navigations.edition(client.Id)]);\r\n  }\r\n\r\n  private getClients(event: LazyLoadEvent) {\r\n    event.sortField ??= this.cols[0].field;\r\n\r\n    return this.httpClient\r\n      .get<ClientListModel>(ApiRoutes.client.getAll(event, this.cols));\r\n  }\r\n\r\n  private getClientTypeMultiSelectData() {\r\n    return this.selectOptionService.getClientTypes();\r\n  }\r\n\r\n  private getEntityInstanceName(client: ClientListItemModel): string {\r\n    return client.Name;\r\n  }\r\n\r\n  private setClientTypeMultiSelectData(clientTypes: SelectItem[]) {\r\n    this.clientTypeOptions = clientTypes;\r\n\r\n    const clientTypeColumn = this.cols.find(c => c.field === \"TypeName\");\r\n    if (clientTypeColumn) {\r\n      clientTypeColumn.options = this.clientTypeOptions;\r\n    }\r\n  }\r\n\r\n  private setClients(clients: ClientListModel) {\r\n    this.totalRecords = clients.TotalRowsCount;\r\n    this.clients = clients.List;\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { SimpleFormComponent } from \"../abstract/forms/simple-form\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ClientDetailsModel } from \"src/app/interfaces/client\";\r\n\r\n@Component({\r\n  selector: \"private-client\",\r\n  templateUrl: \"./private-client.html\"\r\n})\r\nexport class PrivateClientComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  @Input('client') client?: ClientDetailsModel;\r\n\r\n  constructor(\r\n    protected override formBuilder: FormBuilder,\r\n    public translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n    this.createForm({\r\n      FirstName: ['', Validators.required],\r\n      LastName: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.client) {\r\n      this.updateForm({\r\n        FirstName: this.client.FirstName,\r\n        LastName: this.client.LastName\r\n      });\r\n    }\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\n\r\n@Component({\r\n  selector: \"deletion-dialog\",\r\n  templateUrl: \"./deletion-dialog.html\"\r\n})\r\nexport class DeletionDialogComponent\r\n  implements OnInit {\r\n\r\n  @Input('deletionKey') deletionKey?: string;\r\n\r\n  constructor(\r\n    public translate: TranslateService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n}","import { Component, OnInit } from \"@angular/core\";\r\nimport { FormComponent } from \"../abstract/forms/form\";\r\nimport { EquipmentCreationModel } from \"src/app/interfaces/equipment\";\r\nimport { SelectItem } from \"primeng/api\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Router } from \"@angular/router\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { RegexPatterns } from \"src/app/tools/regexPatterns\";\r\n\r\n@Component({\r\n  selector: \"equipment-create\",\r\n  templateUrl: \"./equipment-create.html\"\r\n})\r\nexport class EquipmentCreationComponent\r\n  extends FormComponent<EquipmentCreationModel>\r\n  implements OnInit {\r\n\r\n  public override beforeSubmitionCustomOperationsHandler = this.prepareEquipmentCreationModel;\r\n\r\n  manufacturers: SelectItem[];\r\n  types: SelectItem[];\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'Equipment',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Creation,\r\n      router,\r\n      ApiRoutes.equipment.post,\r\n      translate,\r\n      Routes.equipments.navigations.list\r\n    );\r\n\r\n    this.createForm({\r\n      Description: null,\r\n      ManufacturerId: null,\r\n      MarketValue: ['', Validators.pattern(RegexPatterns.decimalNumber)],\r\n      Name: ['', Validators.required],\r\n      PricePerDay: ['', Validators.pattern(RegexPatterns.decimalNumber)],\r\n      SerialNumber: ['', Validators.required],\r\n      TypeId: null\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.equipments.navigations.list]);\r\n  }\r\n\r\n  private populateDropdowns() {\r\n\r\n    this.selectOptionsService\r\n      .getManufacturers()\r\n      .subscribe(options => {\r\n        this.manufacturers = options;\r\n      });\r\n\r\n    this.selectOptionsService\r\n      .getEquipmentTypes()\r\n      .subscribe(options => {\r\n        this.types = options;\r\n      });\r\n  }\r\n\r\n  private prepareEquipmentCreationModel(): EquipmentCreationModel {\r\n    const equipment = <EquipmentCreationModel>{\r\n      Description: this.form.value.Description,\r\n      ManufacturerId: this.form.value.ManufacturerId,\r\n      MarketValue: this.form.value.MarketValue.replace(/\\s/g, '').replace(',', '.'),\r\n      Name: this.form.value.Name,\r\n      PricePerDay: this.form.value.PricePerDay.replace(/\\s/g, '').replace(',', '.'),\r\n      SerialNumber: this.form.value.SerialNumber,\r\n      TypeId: this.form.value.TypeId\r\n    };\r\n\r\n    return equipment;\r\n  }\r\n}","import { Component, OnInit } from \"@angular/core\";\r\nimport { AccessControlFormComponent } from \"../abstract/forms/access-control-form\";\r\nimport { EquipmentDetailsModel } from \"src/app/interfaces/equipment\";\r\nimport { ConfirmationService, SelectItem } from \"primeng/api\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission-enum\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { RegexPatterns } from \"src/app/tools/regexPatterns\";\r\nimport { StringBuilder } from \"src/app/tools/stringBuilder\";\r\nimport { formatNumber } from \"@angular/common\";\r\nimport { lastValueFrom } from \"rxjs\";\r\nimport { ImageService } from \"src/app/services/images/image.service\";\r\n\r\n@Component({\r\n  selector: \"equipment-details\",\r\n  templateUrl: \"./equipment-details.html\"\r\n})\r\nexport class EquipmentDetailsComponent\r\n  extends AccessControlFormComponent<EquipmentDetailsModel>\r\n  implements OnInit {\r\n\r\n  public override beforeSubmitionCustomOperationsHandler = this.prepareEquipmentDetailsModel;\r\n\r\n  protected override afterSubmitionCustomOperationsHandler = undefined;\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n  protected override entityId: string;\r\n\r\n  equipment: EquipmentDetailsModel;\r\n  manufacturers: SelectItem[];\r\n  types: SelectItem[];\r\n\r\n  public override get shouldActionsBeDisabled(): boolean {\r\n    return super.shouldActionsBeDisabled ||\r\n      !this.equipment;\r\n  }\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    private readonly imageService: ImageService,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteEquipment',\r\n      ApiRoutes.equipment.delete,\r\n      dialogMessageService,\r\n      'Equipment',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      router,\r\n      ApiRoutes.user.put,\r\n      translate,\r\n      [UserPermissionEnum.Equipments_CanModify],\r\n      Routes.equipments.navigations.list\r\n    );\r\n\r\n    this.createForm({\r\n      Description: null,\r\n      ManufacturerId: null,\r\n      MarketValue: ['', Validators.pattern(RegexPatterns.decimalNumber)],\r\n      Name: ['', Validators.required],\r\n      PricePerDay: ['', Validators.pattern(RegexPatterns.decimalNumber)],\r\n      SerialNumber: ['', Validators.required],\r\n      TypeId: null\r\n    });\r\n\r\n    this.loadEquipment();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.equipments.navigations.list]);\r\n  }\r\n\r\n  private getEntityInstanceName(): string {\r\n    return new StringBuilder(this.equipment.Name)\r\n      .append(' ')\r\n      .append(this.equipment.SerialNumber)\r\n      .toString();\r\n  }\r\n\r\n  private loadEquipment() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    const equipment = this.httpClient\r\n      .get<EquipmentDetailsModel>(ApiRoutes.equipment.getById(this.entityId))\r\n      .subscribe(result => {\r\n        this.equipment = result;\r\n\r\n        for (const photo of this.equipment.Photos.filter(photo => photo.ThumbnailFile !== undefined)) {\r\n          photo.Thumbnail = this.imageService.getImageSourceForFile(photo.ThumbnailFile)!;\r\n        }\r\n\r\n        this.updateForm({\r\n          Description: this.equipment.Description,\r\n          ManufacturerId: this.equipment.ManufacturerId,\r\n          MarketValue: formatNumber(this.equipment.MarketValue, this.translate.getDefaultLang(), '1.2-2'),\r\n          Name: this.equipment.Name,\r\n          PricePerDay: formatNumber(this.equipment.PricePerDay, this.translate.getDefaultLang(), '1.2-2'),\r\n          SerialNumber: this.equipment.SerialNumber,\r\n          TypeId: this.equipment.TypeId.toString()\r\n        });\r\n      });\r\n  }\r\n\r\n  private populateDropdowns() {\r\n    this.selectOptionsService\r\n      .getManufacturers()\r\n      .subscribe(options => {\r\n        this.manufacturers = options;\r\n      });\r\n\r\n    this.selectOptionsService\r\n      .getEquipmentTypes()\r\n      .subscribe(options => {\r\n        this.types = options;\r\n      });\r\n  }\r\n\r\n  private prepareEquipmentDetailsModel(): EquipmentDetailsModel {\r\n    const equipment = <EquipmentDetailsModel>{\r\n      Description: this.form.value.Description,\r\n      ManufacturerId: this.form.value.ManufacturerId,\r\n      MarketValue: this.form.value.MarketValue.replace(/\\s/g, '').replace(',', '.'),\r\n      Name: this.form.value.Name,\r\n      PricePerDay: this.form.value.PricePerDay.replace(/\\s/g, '').replace(',', '.'),\r\n      SerialNumber: this.form.value.SerialNumber,\r\n      TypeId: this.form.value.TypeId\r\n    };\r\n\r\n    return equipment;\r\n  }\r\n}","import { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { AccessControlComponent } from \"../abstract/access-controls/access-control\";\r\nimport { EquipmentListItemModel, EquipmentListModel } from \"src/app/interfaces/equipment\";\r\nimport { ConfirmationService, LazyLoadEvent, SelectItem } from \"primeng/api\";\r\nimport { PngTableColumn } from \"src/app/interfaces/png\";\r\nimport { Table } from \"primeng/table\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission-enum\";\r\nimport { FilterTypeEnum } from \"src/app/enums/filter-type-enum\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { StringBuilder } from \"src/app/tools/stringBuilder\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { FilterService } from \"src/app/services/filters/filter.service\";\r\n\r\n@Component({\r\n  selector: \"equipment-list\",\r\n  templateUrl: \"./equipment-list.html\"\r\n})\r\nexport class EquipmentListComponent\r\n  extends AccessControlComponent<EquipmentListItemModel>\r\n  implements OnInit {\r\n\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n\r\n  private readonly _dataPopulator = {\r\n    multiSelects: {\r\n      manufacturers: {\r\n        get: () => this.getManufacturerMultiSelectData(),\r\n        set: (manufacturers: SelectItem[]) => this.setManufacturerMultiSelectData(manufacturers)\r\n      },\r\n      types: {\r\n        get: () => this.getTypeMultiSelectData(),\r\n        set: (types: SelectItem[]) => this.setTypeMultiSelectData(types)\r\n      }\r\n    },\r\n    equipments: {\r\n      get: (event: LazyLoadEvent) => this.getEquipments(event),\r\n      set: (equipments: EquipmentListModel) => this.setEquipments(equipments)\r\n    }\r\n  };\r\n\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  cols: PngTableColumn[];\r\n  equipments: EquipmentListItemModel[];\r\n  manufacturerOptions: SelectItem[];\r\n  totalRecords: number;\r\n  typeOptions: SelectItem[];\r\n\r\n  @ViewChild('dataTable') dataTable: Table;\r\n\r\n  constructor(\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    public readonly filterService: FilterService,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteManufacturer',\r\n      ApiRoutes.equipment.delete,\r\n      dialogMessageService,\r\n      'Equipment',\r\n      errorService,\r\n      httpClient,\r\n      () => {\r\n        this._dataPopulator.equipments\r\n          .get(this.tempLazyLoadEvent)\r\n          .subscribe(result => this._dataPopulator.equipments.set(result));\r\n      },\r\n      router,\r\n      translate,\r\n      [UserPermissionEnum.Equipments_CanModify]);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cols = [\r\n      <PngTableColumn>{\r\n        field: 'Name',\r\n        header: 'Equipment.Name',\r\n        width: '10%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'ManufacturerName',\r\n        header: 'Equipment.ManufacturerName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true,\r\n        replaceWith: 'ManufacturerId'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'SerialNumber',\r\n        header: 'Equipment.SerialNumber',\r\n        width: '10%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'TypeName',\r\n        header: 'Equipment.TypeName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true,\r\n        replaceWith: 'TypeId'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Actions',\r\n        header: '',\r\n        width: '20%'\r\n      }\r\n    ];\r\n\r\n    this._dataPopulator.multiSelects.manufacturers\r\n      .get()\r\n      .subscribe(manufacturers => this._dataPopulator.multiSelects.manufacturers.set(manufacturers));\r\n\r\n    this._dataPopulator.multiSelects.types\r\n      .get()\r\n      .subscribe(types => this._dataPopulator.multiSelects.types.set(types));\r\n  }\r\n\r\n  public loadEquipmentsLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n    this._dataPopulator.equipments\r\n      .get(event)\r\n      .subscribe(result => this._dataPopulator.equipments.set(result));\r\n  }\r\n\r\n  public onCreate() {\r\n    this.router.navigate([Routes.equipments.navigations.creation]);\r\n  }\r\n\r\n  public onEdit(equipment: EquipmentListItemModel) {\r\n    this.router.navigate([Routes.equipments.navigations.edition(equipment.Id)]);\r\n  }\r\n\r\n  private getEntityInstanceName(equipment: EquipmentListItemModel): string {\r\n    return new StringBuilder(equipment.Name)\r\n      .append(' ')\r\n      .append(equipment.SerialNumber)\r\n      .toString();\r\n  }\r\n\r\n  private getManufacturerMultiSelectData() {\r\n    return this.selectOptionsService.getManufacturers();\r\n  }\r\n\r\n  private getEquipments(event: LazyLoadEvent) {\r\n    event.sortField ??= this.cols[0]?.field;\r\n\r\n    return this.httpClient\r\n      .get<EquipmentListModel>(ApiRoutes.equipment.getAll(event, this.cols));\r\n  }\r\n\r\n  private getTypeMultiSelectData() {\r\n    return this.selectOptionsService.getEquipmentTypes();\r\n  }\r\n\r\n  private setManufacturerMultiSelectData(manufacturers: SelectItem[]) {\r\n    this.manufacturerOptions = manufacturers;\r\n\r\n    const manufacturerColumn = this.cols.find(c => c.field === \"ManufacturerName\");\r\n    if (manufacturerColumn) {\r\n      manufacturerColumn.options = this.manufacturerOptions;\r\n    }\r\n  }\r\n\r\n  private setEquipments(equipments: EquipmentListModel) {\r\n    this.totalRecords = equipments.TotalRowsCount;\r\n    this.equipments = equipments.List;\r\n  }\r\n\r\n  private setTypeMultiSelectData(types: SelectItem[]) {\r\n    this.typeOptions = types;\r\n\r\n    const typeColumn = this.cols.find(c => c.field === \"TypeName\");\r\n    if (typeColumn) {\r\n      typeColumn.options = this.typeOptions;\r\n    }\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, Input, OnInit } from \"@angular/core\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { EquipmentPhoto } from \"src/app/interfaces/equipment\";\r\nimport { SimpleFileModel } from \"src/app/interfaces/file\";\r\nimport { ImageService } from \"src/app/services/images/image.service\";\r\nimport { PrimeNgHelper } from \"src/app/tools/primeNgHelper\";\r\n\r\n@Component({\r\n  selector: 'equipment-photos',\r\n  templateUrl: 'equipment-photos.html'\r\n})\r\nexport class EquipmentPhotosComponent\r\n  implements OnInit {\r\n\r\n  get activeIndex(): number {\r\n    return this._activeIndex;\r\n  }\r\n\r\n  set activeIndex(newValue) {\r\n    if (this.equipmentPhotos && 0 <= newValue && newValue <= this.equipmentPhotos.length - 1) {\r\n      this._activeIndex = newValue;\r\n    }\r\n  }\r\n\r\n  _activeIndex: number = 0;\r\n\r\n  equipmentPhotos: EquipmentPhoto[] = [];\r\n  galleriaResponsiveOptions: any[] = PrimeNgHelper.galleriaResponsiveOptions;\r\n\r\n  @Input() equipmentId: string;\r\n  @Input() sourcePhotos: EquipmentPhoto[];\r\n\r\n  constructor(\r\n    private readonly httpClient: HttpClient,\r\n    private readonly imageService: ImageService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!this.sourcePhotos)\r\n      return;\r\n\r\n    for (const photo of this.sourcePhotos) {\r\n      this.addPhoto(photo);\r\n    }\r\n  }\r\n\r\n  public getEquipmentPhotoSource(id: string) {\r\n    if (!this.equipmentId)\r\n      return;\r\n\r\n    const equipmentPhoto = this.equipmentPhotos.find(p => p.Id === id);\r\n    if (!equipmentPhoto || equipmentPhoto.IsBeingDownloaded)\r\n      return;\r\n\r\n    equipmentPhoto.IsBeingDownloaded = true;\r\n    this.httpClient\r\n      .get<SimpleFileModel>(ApiRoutes.equipment.file.photo.download(equipmentPhoto.Id))\r\n      .subscribe(result => {\r\n        equipmentPhoto.Source = this.imageService.getImageSourceForFile(result.File);\r\n        equipmentPhoto.IsBeingDownloaded = false;\r\n      });\r\n  }\r\n\r\n  private addPhoto(photo: EquipmentPhoto) {\r\n    this.equipmentPhotos.push(<EquipmentPhoto>{\r\n      File: undefined,\r\n      FileName: photo.FileName,\r\n      Id: photo.Id,\r\n      IsBeingDownloaded: false,\r\n      IsMainThumbnail: photo.IsMainThumbnail,\r\n      Source: undefined,\r\n      Thumbnail: photo.Thumbnail,\r\n    });\r\n  }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { MessageService } from 'primeng/api';\r\nimport { ErrorService } from 'src/app/services/errors/error.service';\r\nimport { SimpleFormComponent } from '../abstract/forms/simple-form';\r\n\r\n@Component({\r\n  selector: \"login-reset-password\",\r\n  templateUrl: \"./login-reset-password.html\"\r\n})\r\nexport class LoginResetPasswordComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  token: string;\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private errorService: ErrorService,\r\n    protected override formBuilder: FormBuilder,\r\n    public dialogMessageService: MessageService,\r\n    public translate: TranslateService) {\r\n\r\n    super(formBuilder);\r\n\r\n    this.activatedRoute.queryParams.subscribe(params => {\r\n      this.token = params['token'];\r\n\r\n      this.createForm({\r\n        Email: ['', Validators.required]\r\n      });\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public onSubmit() {\r\n    if (!this.form.value.Email) {\r\n      this.dialogMessageService.add({ severity: 'error', summary: this.errorService.getDefaultErrorMessage(), detail: this.translate.instant('Messages.EnterEmailFirst') });\r\n      return;\r\n    }\r\n\r\n    // const model = <ResetPasswordModel>{\r\n    //   Email: this.form.value.Email,\r\n    //   Language: this.translate.currentLang\r\n    // };\r\n\r\n    //[TODO]\r\n    // this.http.put<string>(ApiRoutes.identity.resetPassword, model).subscribe(result => {\r\n    //   if (result == \"OK\") {\r\n    //     this.messageService.add({ key: 'tst', severity: 'success', summary: this.translate.instant('Messages.EmailWithPasswordResetInstructionsSent') });\r\n    //   }\r\n    //   else if (result == \"WrongToken\") {\r\n    //     this.messageService.add({ key: 'tst', severity: 'error', summary: this.translate.instant('Messages.CantChangeUserPassword') });\r\n    //   }\r\n    //   else if (result == \"EmailDoesntExist\") {\r\n    //     this.messageService.add({ severity: 'error', summary: this.translate.instant('Messages.ProvidedEmailDoesNotExist') });\r\n    //   }\r\n\r\n    //   console.log(`Reset password has been ended with result: ${result}`);\r\n    // }, error => console.log(error));\r\n  }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { Router } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { SelectItem } from 'primeng/api';\r\nimport { AppComponent } from 'src/app/app.component';\r\nimport { LanguageCodeEnum } from 'src/app/enums/language-code-enum';\r\nimport { SignInModel } from 'src/app/interfaces/authentication';\r\nimport { AuthenticationService } from 'src/app/services/authentication/authentication.service';\r\nimport { ErrorService } from 'src/app/services/errors/error.service';\r\nimport { DialogMessageService } from 'src/app/services/messages/dialog-message.service';\r\nimport { SelectOptionsService } from 'src/app/services/select-options/select-options.service';\r\nimport { ApiResultEnum } from 'src/app/enums/api-result-enum';\r\nimport { Routes } from 'src/app/routes';\r\nimport { SimpleFormComponent } from '../abstract/forms/simple-form';\r\n\r\n@Component({\r\n  selector: \"login\",\r\n  templateUrl: \"./login.html\"\r\n})\r\nexport class LoginComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  languageId: number;\r\n  languages: SelectItem[];\r\n\r\n  constructor(\r\n    private readonly app: AppComponent,\r\n    private readonly authenticationService: AuthenticationService,\r\n    private readonly dialogMessageService: DialogMessageService,\r\n    private readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    private readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    private readonly titleService: Title,\r\n    public readonly translate: TranslateService) {\r\n\r\n    super(formBuilder);\r\n\r\n    this.translate.setDefaultLang('pl');\r\n    this.titleService.setTitle(translate.instant('AppName'));\r\n\r\n    this.createForm({\r\n      Login: ['', Validators.required],\r\n      Password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.selectOptionsService\r\n      .getLanguages()\r\n      .subscribe(options => {\r\n        this.languages = options;\r\n\r\n        const languageIdFromStorage = localStorage.getItem('languageId');\r\n\r\n        if (languageIdFromStorage) {\r\n          this.languageId = Number(languageIdFromStorage);\r\n          this.setLanguage(this.languageId);\r\n        }\r\n      });\r\n  }\r\n\r\n  public onSubmit() {\r\n    if (!this.form.value.Login) {\r\n      this.dialogMessageService.addError(this.errorService.getDefaultErrorMessage());\r\n      return;\r\n    }\r\n\r\n    const data = <SignInModel>{\r\n      Login: this.form.value.Login,\r\n      Password: this.form.value.Password\r\n    };\r\n\r\n    this.authenticationService\r\n      .login(data)\r\n      .subscribe(result => {\r\n        switch (result) {\r\n          case ApiResultEnum[ApiResultEnum.OK]:\r\n            this.app.isUserLoggedIn = true;\r\n            this.authenticationService.isFirstTimeLoggedIn = true;\r\n            this.router.navigate([Routes.home.navigations.default]);\r\n            break;\r\n\r\n          case ApiResultEnum[ApiResultEnum.NotActive]:\r\n            this.dialogMessageService.addError(this.translate.instant('Messages.AccountNotActive'));\r\n            this.dialogMessageService.addError(this.translate.instant('Messages.PleaseContactAdmin'));\r\n            break;\r\n\r\n          default:\r\n            this.dialogMessageService.addError(this.translate.instant('Messages.InvalidLoginData'));\r\n            break;\r\n        }\r\n      });\r\n  }\r\n\r\n  private getLanguageCodeById(id: number) {\r\n    switch (id) {\r\n      case LanguageCodeEnum.Pl.valueOf():\r\n        return \"pl\";\r\n      case LanguageCodeEnum.En.valueOf():\r\n        return \"en\";\r\n      default:\r\n        return \"---\";\r\n    }\r\n  }\r\n\r\n  private setLanguage(languageId: number) {\r\n    const lang = this.getLanguageCodeById(languageId);\r\n\r\n    this.translate.use(lang).subscribe(() => {\r\n      this.titleService.setTitle(this.translate.instant('AppName'));\r\n    });\r\n  }\r\n}","import { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { FormComponent } from \"../abstract/forms/form\";\r\nimport { ManufacturerCreationModel } from \"src/app/interfaces/manufacturer\";\r\nimport { ManufacturerAddressComponent } from \"../addresses/manufacturer-address\";\r\nimport { Country, ManufacturerAddress, addressFormFields } from \"src/app/interfaces/address\";\r\nimport { AddressComponent } from \"../addresses/address\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { Routes } from \"src/app/routes\";\r\n\r\n@Component({\r\n  selector: \"manufacturer-create\",\r\n  templateUrl: \"./manufacturer-create.html\"\r\n})\r\nexport class ManufacturerCreationComponent\r\n  extends FormComponent<ManufacturerCreationModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareManufacturerCreationModel;\r\n\r\n  @ViewChild('addressForm') addressForm: AddressComponent;\r\n  @ViewChild('manufacturerAddressForm') manufacturerAddressForm: ManufacturerAddressComponent;\r\n\r\n  readonly manufacturerAddressRequiredFields: string[] = [\r\n    addressFormFields.City,\r\n    addressFormFields.Country,\r\n    addressFormFields.PostalCode,\r\n    addressFormFields.StreetName,\r\n    addressFormFields.StreetNumber\r\n  ];\r\n\r\n  public override get shouldActionsBeDisabled(): boolean {\r\n    return super.shouldActionsBeDisabled ||\r\n      (this.addressForm?.form.invalid ?? false) ||\r\n      (this.manufacturerAddressForm?.form.invalid ?? false);\r\n  }\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'Manufacturer',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Creation,\r\n      router,\r\n      ApiRoutes.manufacturer.post,\r\n      translate,\r\n      Routes.manufacturers.navigations.list\r\n    );\r\n\r\n    this.createForm({\r\n      IsOperational: false,\r\n      Name: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.manufacturers.navigations.list]);\r\n  }\r\n\r\n  private prepareManufacturerCreationModel(): ManufacturerCreationModel {\r\n    const manufacturerAddress = <ManufacturerAddress>{\r\n      ApartmentNumber: this.addressForm.form.value.ApartmentNumber,\r\n      City: this.addressForm.form.value.City,\r\n      Country: <Country>{\r\n        Id: this.addressForm.form.value.CountryId,\r\n      },\r\n      Email: this.addressForm.form.value.Email,\r\n      NationalId: this.manufacturerAddressForm.form.value.NationalId,\r\n      PhoneNumber: this.addressForm.form.value.PhoneNumber,\r\n      PostalCode: this.addressForm.form.value.PostalCode,\r\n      StreetName: this.addressForm.form.value.StreetName,\r\n      StreetNumber: this.addressForm.form.value.StreetNumber,\r\n    };\r\n    const manufacturer = <ManufacturerCreationModel>{\r\n      Address: manufacturerAddress,\r\n      IsOperational: this.form.value.IsOperational,\r\n      Name: this.form.value.Name,\r\n    };\r\n\r\n    return manufacturer;\r\n  }\r\n}","import { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { AccessControlFormComponent } from \"../abstract/forms/access-control-form\";\r\nimport { ManufacturerDetailsModel } from \"src/app/interfaces/manufacturer\";\r\nimport { Country, ManufacturerAddress, addressFormFields } from \"src/app/interfaces/address\";\r\nimport { AddressComponent } from \"../addresses/address\";\r\nimport { ManufacturerAddressComponent } from \"../addresses/manufacturer-address\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission-enum\";\r\nimport { Routes } from \"src/app/routes\";\r\n\r\n@Component({\r\n  selector: \"manufacturer-details\",\r\n  templateUrl: \"./manufacturer-details.html\"\r\n})\r\nexport class ManufacturerDetailsComponent\r\n  extends AccessControlFormComponent<ManufacturerDetailsModel>\r\n  implements OnInit {\r\n\r\n  public override beforeSubmitionCustomOperationsHandler = this.prepareManufacturerDetailsModel;\r\n\r\n  protected override afterSubmitionCustomOperationsHandler = undefined;\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n  protected override entityId: string;\r\n\r\n  manufacturer: ManufacturerDetailsModel;\r\n\r\n  readonly manufacturerAddressRequiredFields: string[] = [\r\n    addressFormFields.City,\r\n    addressFormFields.Country,\r\n    addressFormFields.PostalCode,\r\n    addressFormFields.StreetName,\r\n    addressFormFields.StreetNumber\r\n  ];\r\n\r\n  public override get shouldActionsBeDisabled(): boolean {\r\n    return super.shouldActionsBeDisabled ||\r\n      (!this.manufacturer || this.manufacturer.IsDeleted) ||\r\n      (this.addressForm?.form.invalid ?? false) ||\r\n      (this.manufacturerAddressForm?.form.invalid ?? false);\r\n  }\r\n\r\n  @ViewChild('addressForm') addressForm: AddressComponent;\r\n  @ViewChild('manufacturerAddressForm') manufacturerAddressForm: ManufacturerAddressComponent;\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteManufacturer',\r\n      ApiRoutes.manufacturer.delete,\r\n      dialogMessageService,\r\n      'Manufacturer',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      router,\r\n      ApiRoutes.manufacturer.put,\r\n      translate,\r\n      [UserPermissionEnum.Manufacturers_CanModify],\r\n      Routes.manufacturers.navigations.list\r\n    );\r\n\r\n    this.createForm({\r\n      IsOperational: false,\r\n      Name: ['', Validators.required]\r\n    });\r\n\r\n    this.loadManufacturer();\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.manufacturers.navigations.list]);\r\n  }\r\n\r\n  private getEntityInstanceName(): string {\r\n    return this.manufacturer.Name;\r\n  }\r\n\r\n  private loadManufacturer() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<ManufacturerDetailsModel>(ApiRoutes.manufacturer.getById(this.entityId))\r\n      .subscribe(result => {\r\n        this.manufacturer = result;\r\n        this.updateForm({\r\n          IsOperational: this.manufacturer.IsOperational,\r\n          Name: this.manufacturer.Name,\r\n        });\r\n      });\r\n  }\r\n\r\n  private prepareManufacturerDetailsModel(): ManufacturerDetailsModel {\r\n    const manufacturerAddress = <ManufacturerAddress>{\r\n      ApartmentNumber: this.addressForm.form.value.ApartmentNumber,\r\n      City: this.addressForm.form.value.City,\r\n      Country: <Country>{\r\n        Id: this.addressForm.form.value.CountryId\r\n      },\r\n      Email: this.addressForm.form.value.Email,\r\n      Id: this.addressForm.form.value.Id,\r\n      NationalId: this.manufacturerAddressForm.form.value.NationalId,\r\n      PhoneNumber: this.addressForm.form.value.PhoneNumber,\r\n      PostalCode: this.addressForm.form.value.PostalCode,\r\n      StreetName: this.addressForm.form.value.StreetName,\r\n      StreetNumber: this.addressForm.form.value.StreetNumber\r\n    }\r\n    const manufacturer = <ManufacturerDetailsModel>{\r\n      Address: manufacturerAddress,\r\n      Id: this.manufacturer.Id,\r\n      IsOperational: this.form.value.IsOperational,\r\n      Name: this.form.value.Name,\r\n    };\r\n\r\n    return manufacturer;\r\n  }\r\n}","import { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { AccessControlComponent } from \"../abstract/access-controls/access-control\";\r\nimport { ManufacturerListItemModel, ManufacturerListModel } from \"src/app/interfaces/manufacturer\";\r\nimport { ConfirmationService, LazyLoadEvent } from \"primeng/api\";\r\nimport { PngTableColumn } from \"src/app/interfaces/png\";\r\nimport { Table } from \"primeng/table\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission-enum\";\r\nimport { FilterService } from \"src/app/services/filters/filter.service\";\r\nimport { FilterTypeEnum } from \"src/app/enums/filter-type-enum\";\r\nimport { Routes } from \"src/app/routes\";\r\n\r\n@Component({\r\n  selector: \"manufacturer-list\",\r\n  templateUrl: \"./manufacturer-list.html\"\r\n})\r\nexport class ManufacturerListComponent\r\n  extends AccessControlComponent<ManufacturerListItemModel>\r\n  implements OnInit {\r\n\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n\r\n  private readonly _dataPopulator = {\r\n    manufacturers: {\r\n      get: (event: LazyLoadEvent) => this.getManufacturers(event),\r\n      set: (manufacturers: ManufacturerListModel) => this.setManufacturers(manufacturers)\r\n    }\r\n  };\r\n\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  cols: PngTableColumn[];\r\n  manufacturers: ManufacturerListItemModel[];\r\n  totalRecords: number;\r\n\r\n  @ViewChild('dataTable') dataTable: Table;\r\n\r\n  constructor(\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    public readonly filterService: FilterService,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteManufacturer',\r\n      ApiRoutes.manufacturer.delete,\r\n      dialogMessageService,\r\n      'Manufacturer',\r\n      errorService,\r\n      httpClient,\r\n      () => {\r\n        this._dataPopulator.manufacturers\r\n          .get(this.tempLazyLoadEvent)\r\n          .subscribe(result => this._dataPopulator.manufacturers.set(result));\r\n      },\r\n      router,\r\n      translate,\r\n      [UserPermissionEnum.Manufacturers_CanModify]);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cols = [\r\n      <PngTableColumn>{\r\n        field: 'Name',\r\n        header: 'Manufacturer.Name',\r\n        width: '10%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'IsOperational',\r\n        header: 'Manufacturer.IsOperational',\r\n        width: '10%'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'NationalId',\r\n        header: 'Manufacturer.NationalId',\r\n        width: '10%',\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'AddressSummary',\r\n        header: 'Manufacturer.AddressSummary',\r\n        width: '10%',\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Actions',\r\n        header: '',\r\n        width: '20%'\r\n      }\r\n    ];\r\n  }\r\n\r\n  public loadManufacturersLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n    this._dataPopulator.manufacturers\r\n      .get(event)\r\n      .subscribe(result => this._dataPopulator.manufacturers.set(result));\r\n  }\r\n\r\n  public onCreate() {\r\n    this.router.navigate([Routes.manufacturers.navigations.creation]);\r\n  }\r\n\r\n  public onEdit(manufacturer: ManufacturerListItemModel) {\r\n    this.router.navigate([Routes.manufacturers.navigations.edition(manufacturer.Id)]);\r\n  }\r\n\r\n  private getEntityInstanceName(manufacturer: ManufacturerListItemModel): string {\r\n    return manufacturer.Name;\r\n  }\r\n\r\n  private getManufacturers(event: LazyLoadEvent) {\r\n    event.sortField ??= this.cols[0].field;\r\n\r\n    return this.httpClient\r\n      .get<ManufacturerListModel>(ApiRoutes.manufacturer.getAll(event, this.cols));\r\n  }\r\n\r\n  private setManufacturers(manufacturers: ManufacturerListModel) {\r\n    this.totalRecords = manufacturers.TotalRowsCount;\r\n    this.manufacturers = manufacturers.List;\r\n  }\r\n}","import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\r\nimport { FormBuilder, FormControl, Validators } from \"@angular/forms\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { SelectItem } from \"primeng/api\";\r\nimport { NameInLanguage } from \"src/app/interfaces/name-in-language\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { SimpleFormComponent } from \"../abstract/forms/simple-form\";\r\n\r\n@Component({\r\n  selector: 'name-in-languages',\r\n  templateUrl: './name-in-languages.html'\r\n})\r\nexport class NameInLanguagesComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  languages: SelectItem[];\r\n\r\n  @Input('disabled') disabled: boolean;\r\n  @Input('nameInLanguages') nameInLanguages: NameInLanguage[];\r\n\r\n  @Output('isValid') isValid = new EventEmitter<boolean>();\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public readonly translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.selectOptionsService\r\n      .getLanguages()\r\n      .subscribe(languages => {\r\n        this.languages = languages;\r\n\r\n        this.createForm();\r\n\r\n        if (this.nameInLanguages) {\r\n          this.updateForm();\r\n          this.isValid.emit(true);\r\n        }\r\n\r\n        if (this.disabled) {\r\n          this.form.disable();\r\n        }\r\n        else {\r\n          this.form.enable();\r\n        }\r\n      });\r\n  }\r\n\r\n  public getNameInLanguages(): NameInLanguage[] {\r\n    const data: NameInLanguage[] = [];\r\n\r\n    this.languages.forEach(l => {\r\n      data.push(<NameInLanguage>{\r\n        LanguageId: Number(l.value),\r\n        Name: this.form.controls[l.label!].value\r\n      });\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  public onChangeInput() {\r\n    let isFormValid = true;\r\n\r\n    Object.keys(this.form.controls)\r\n      .forEach(key => {\r\n        isFormValid = isFormValid && (this.form.get(key)?.valid ?? true);\r\n      });\r\n\r\n    this.isValid.emit(isFormValid);\r\n  }\r\n\r\n  protected override createForm() {\r\n    const group: { [key: string]: FormControl } = {};\r\n\r\n    this.languages.forEach(l => {\r\n      group[l.label!] = new FormControl('');\r\n      group[l.label!].setValidators(Validators.required);\r\n    });\r\n\r\n    super.createForm(group, true);\r\n  }\r\n\r\n  protected override updateForm() {\r\n    this.languages.forEach(l => {\r\n      const data = this.nameInLanguages.find(d => d.LanguageId == l.value);\r\n\r\n      this.form.controls[l.label!].patchValue(data?.Name);\r\n    });\r\n  }\r\n}","import { Component, Input, OnInit, ViewChild } from \"@angular/core\";\r\nimport { AddressComponent } from \"../addresses/address\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Address, Country, addressFormFields } from \"src/app/interfaces/address\";\r\nimport { ClientRepresentativeDialogConfigData, ClientRepresentativeCreationModel } from \"src/app/interfaces/client\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DynamicDialogConfig, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { OpenableAsDialogForm } from \"../abstract/forms/openable-as-dialog-form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\n\r\n@Component({\r\n  selector: \"client-representative-create\",\r\n  templateUrl: \"./client-representative-create.html\"\r\n})\r\nexport class ClientRepresentativeCreationComponent\r\n  extends OpenableAsDialogForm<ClientRepresentativeDialogConfigData, ClientRepresentativeCreationModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareClientRepresentativeCreationModel;\r\n\r\n  @Input('clientId') clientId?: string;\r\n\r\n  @ViewChild('addressForm') addressForm: AddressComponent;\r\n\r\n  public static OPEN_AS_DIALOG_SETTINGS = <DynamicDialogConfig>{\r\n    header: 'ClientRepresentative.Create',\r\n    height: 'auto',\r\n    modal: true,\r\n    style: { margin: 0, padding: 0 },\r\n    width: '50vw'\r\n  };\r\n\r\n  readonly clientRepresentativeAddressRequiredFields: string[] = [\r\n    addressFormFields.City,\r\n    addressFormFields.Country,\r\n    addressFormFields.Email,\r\n    addressFormFields.PhoneNumber,\r\n    addressFormFields.PostalCode,\r\n    addressFormFields.StreetName,\r\n    addressFormFields.StreetNumber\r\n  ];\r\n\r\n  public override get shouldActionsBeDisabled() {\r\n    return super.shouldActionsBeDisabled ||\r\n      (this.addressForm?.form.invalid ?? false);\r\n  }\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    public override readonly openedAsDialogConfig: DynamicDialogConfig,\r\n    public override readonly openedAsDialogRef: DynamicDialogRef,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'ClientRepresentative',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Creation,\r\n      openedAsDialogConfig,\r\n      openedAsDialogRef,\r\n      router,\r\n      ApiRoutes.clientRepresentative.post,\r\n      translate,\r\n      Routes.clientRepresentatives.navigations.list);\r\n\r\n    this.createForm({\r\n      FirstName: ['', Validators.required],\r\n      LastName: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  private getClientRepresentativeClientId() {\r\n    return this._dialogConfigData ? this._dialogConfigData.ClientId : this.clientId;\r\n  }\r\n\r\n  private prepareClientRepresentativeCreationModel(): ClientRepresentativeCreationModel {\r\n    const clientRepresentativeAddress = <Address>{\r\n      ApartmentNumber: this.addressForm.form.value.ApartmentNumber,\r\n      City: this.addressForm.form.value.City,\r\n      Country: <Country>{\r\n        Id: this.addressForm.form.value.CountryId\r\n      },\r\n      Email: this.addressForm.form.value.Email,\r\n      PhoneNumber: this.addressForm.form.value.PhoneNumber,\r\n      PostalCode: this.addressForm.form.value.PostalCode,\r\n      StreetName: this.addressForm.form.value.StreetName,\r\n      StreetNumber: this.addressForm.form.value.StreetNumber\r\n    };\r\n    const clientRepresentative = <ClientRepresentativeCreationModel>{\r\n      Address: clientRepresentativeAddress,\r\n      ClientId: this.getClientRepresentativeClientId(),\r\n      FirstName: this.form.value.FirstName,\r\n      LastName: this.form.value.LastName\r\n    };\r\n\r\n    return clientRepresentative;\r\n  }\r\n}","import { Component, Input, OnInit, ViewChild } from \"@angular/core\";\r\nimport { ClientRepresentativeDetailsModel, ClientRepresentativeDialogConfigData } from \"src/app/interfaces/client\";\r\nimport { AddressComponent } from \"../addresses/address\";\r\nimport { DynamicDialogConfig, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { Address, Country, addressFormFields } from \"src/app/interfaces/address\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { AccessControlOpenableAsDialogForm } from \"../abstract/forms/access-control-openable-as-dialog-form\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission-enum\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { StringBuilder } from \"src/app/tools/stringBuilder\";\r\n\r\n@Component({\r\n  selector: \"client-representative-details\",\r\n  templateUrl: \"./client-representative-details.html\"\r\n})\r\nexport class ClientRepresentativeDetailsComponent\r\n  extends AccessControlOpenableAsDialogForm<ClientRepresentativeDialogConfigData, ClientRepresentativeDetailsModel>\r\n  implements OnInit {\r\n\r\n  public static readonly OPEN_AS_DIALOG_SETTINGS = <DynamicDialogConfig>{\r\n    header: 'ClientRepresentative.Details',\r\n    height: 'auto',\r\n    modal: true,\r\n    style: { margin: 0, padding: 0 },\r\n    width: '50vw'\r\n  };\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareClientRepresentativeDetailsModel;\r\n\r\n  protected override readonly afterSubmitionCustomOperationsHandler = undefined;\r\n  protected override readonly deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n  protected override readonly entityId: string;\r\n\r\n  @Input('clientId') clientId?: string;\r\n\r\n  @ViewChild('addressForm') addressForm: AddressComponent;\r\n\r\n  readonly clientRepresentativeAddressRequiredFields: string[] = [\r\n    addressFormFields.City,\r\n    addressFormFields.Country,\r\n    addressFormFields.Email,\r\n    addressFormFields.PhoneNumber,\r\n    addressFormFields.PostalCode,\r\n    addressFormFields.StreetName,\r\n    addressFormFields.StreetNumber\r\n  ];\r\n\r\n  clientRepresentative: ClientRepresentativeDetailsModel;\r\n\r\n  public override get shouldActionsBeDisabled() {\r\n    return super.shouldActionsBeDisabled ||\r\n      !this.clientRepresentative ||\r\n      (this.addressForm?.form.invalid ?? false);\r\n  }\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    public override readonly openedAsDialogConfig: DynamicDialogConfig,\r\n    public override readonly openedAsDialogRef: DynamicDialogRef,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteClientRepresentative',\r\n      ApiRoutes.clientRepresentative.delete,\r\n      dialogMessageService,\r\n      'ClientRepresentative',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      openedAsDialogConfig,\r\n      openedAsDialogRef,\r\n      router,\r\n      ApiRoutes.clientRepresentative.put,\r\n      translate,\r\n      [UserPermissionEnum.ClientRepresentatives_CanModify],\r\n      Routes.clientRepresentatives.navigations.list\r\n    );\r\n\r\n    this.createForm({\r\n      FirstName: ['', Validators.required],\r\n      LastName: ['', Validators.required]\r\n    });\r\n\r\n    this.loadClientRepresentative();\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  private getEntityInstanceName(): string {\r\n    return new StringBuilder(this.clientRepresentative.LastName)\r\n      .append(' ')\r\n      .append(this.clientRepresentative.FirstName)\r\n      .toString();\r\n  }\r\n\r\n  private loadClientRepresentative() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<ClientRepresentativeDetailsModel>(ApiRoutes.clientRepresentative.getById(this.entityId))\r\n      .subscribe(result => {\r\n        this.clientRepresentative = result;\r\n\r\n        this.updateForm({\r\n          FirstName: this.clientRepresentative.FirstName,\r\n          LastName: this.clientRepresentative.LastName\r\n        });\r\n      });\r\n  }\r\n\r\n  private prepareClientRepresentativeDetailsModel(): ClientRepresentativeDetailsModel {\r\n    const clientRepresentativeAddress = <Address>{\r\n      ApartmentNumber: this.addressForm.form.value.ApartmentNumber,\r\n      City: this.addressForm.form.value.City,\r\n      Country: <Country>{\r\n        Id: this.addressForm.form.value.CountryId\r\n      },\r\n      Email: this.addressForm.form.value.Email,\r\n      Id: this.addressForm.form.value.Id,\r\n      PhoneNumber: this.addressForm.form.value.PhoneNumber,\r\n      PostalCode: this.addressForm.form.value.PostalCode,\r\n      StreetName: this.addressForm.form.value.StreetName,\r\n      StreetNumber: this.addressForm.form.value.StreetNumber\r\n    };\r\n    const clientRepresentative = <ClientRepresentativeDetailsModel>{\r\n      Address: clientRepresentativeAddress,\r\n      ClientId: this.clientRepresentative.ClientId,\r\n      FirstName: this.form.value.FirstName,\r\n      Id: this.entityId,\r\n      LastName: this.form.value.LastName\r\n    }\r\n\r\n    return clientRepresentative;\r\n  }\r\n}","import { Component, Input, OnDestroy, OnInit, ViewChild } from \"@angular/core\";\r\nimport { AccessControlComponent } from \"../abstract/access-controls/access-control\";\r\nimport { Confirmation, ConfirmationService, LazyLoadEvent } from 'primeng/api';\r\nimport { PngTableColumn } from \"src/app/interfaces/png\";\r\nimport { Table } from \"primeng/table\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission-enum\";\r\nimport { FilterTypeEnum } from \"src/app/enums/filter-type-enum\";\r\nimport { ClientRepresentativeDialogConfigData, ClientRepresentativeListItemModel, ClientRepresentativeListModel } from \"src/app/interfaces/client\";\r\nimport { Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { FilterService } from \"src/app/services/filters/filter.service\";\r\nimport { DialogService, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { ClientRepresentativeCreationComponent } from \"./client-representative-create\";\r\nimport { ClientRepresentativeDetailsComponent } from \"./client-representative-details\";\r\n\r\n@Component({\r\n  selector: \"client-representative-list\",\r\n  templateUrl: \"./client-representative-list.html\"\r\n})\r\nexport class ClientRepresentativeListComponent\r\n  extends AccessControlComponent<ClientRepresentativeListItemModel>\r\n  implements OnInit, OnDestroy {\r\n\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n\r\n  @Input('clientId') clientId: string;\r\n\r\n  @ViewChild('dataTable') dataTable: Table;\r\n\r\n  private readonly _dataPopulator = {\r\n    clientRepresentatives: {\r\n      get: (event: LazyLoadEvent) => this.getClientRepresentatives(event),\r\n      set: (clientRepresentatives: ClientRepresentativeListModel) => this.setClientRepresentatives(clientRepresentatives)\r\n    }\r\n  };\r\n\r\n  private clientRepresentativeCreationDialog: DynamicDialogRef | undefined;\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  clientRepresentatives: ClientRepresentativeListItemModel[];\r\n  cols: PngTableColumn[];\r\n  totalRecords: number;\r\n\r\n  constructor(\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    private readonly dialogService: DialogService,\r\n    protected override readonly errorService: ErrorService,\r\n    public readonly filterService: FilterService,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteClientRepresentative',\r\n      ApiRoutes.clientRepresentative.delete,\r\n      dialogMessageService,\r\n      'ClientRepresentative',\r\n      errorService,\r\n      httpClient,\r\n      () => {\r\n        this._dataPopulator.clientRepresentatives\r\n          .get(this.tempLazyLoadEvent)\r\n          .subscribe(result => this._dataPopulator.clientRepresentatives.set(result));\r\n      },\r\n      router,\r\n      translate,\r\n      [UserPermissionEnum.ClientRepresentatives_CanModify]);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cols = [\r\n      <PngTableColumn>{\r\n        field: 'LastName',\r\n        header: 'ClientRepresentative.LastName',\r\n        width: '30%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'FirstName',\r\n        header: 'ClientRepresentative.FirstName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Email',\r\n        header: 'ClientRepresentative.Email',\r\n        width: '30%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'PhoneNumber',\r\n        header: 'ClientRepresentative.PhoneNumber',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Actions',\r\n        header: '',\r\n        width: '20%'\r\n      }\r\n    ];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.clientRepresentativeCreationDialog) {\r\n      this.clientRepresentativeCreationDialog.close();\r\n    }\r\n  }\r\n\r\n  public loadClientRepresentativesLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n\r\n    this._dataPopulator.clientRepresentatives\r\n      .get(event)\r\n      .subscribe(result => this._dataPopulator.clientRepresentatives.set(result));\r\n  }\r\n\r\n  public onCreate() {\r\n    if (!this.clientId)\r\n      return;\r\n\r\n    this.openClientRepresentativeDialog();\r\n  }\r\n\r\n  public onEdit(clientRepresentative: ClientRepresentativeListItemModel) {\r\n    this.openClientRepresentativeDialog(clientRepresentative);\r\n  }\r\n\r\n  private getClientRepresentatives(event: LazyLoadEvent) {\r\n    event.sortField ??= this.cols[0].field;\r\n\r\n    return this.httpClient\r\n      .get<ClientRepresentativeListModel>(ApiRoutes.clientRepresentative.getAll(event, this.cols, this.clientId));\r\n  }\r\n\r\n  private getEntityInstanceName(clientRepresentative: ClientRepresentativeListItemModel): string {\r\n    return `${clientRepresentative.LastName} ${clientRepresentative.FirstName}`;\r\n  }\r\n\r\n  private openClientRepresentativeDialog(clientRepresentative?: ClientRepresentativeListItemModel) {\r\n\r\n    const clientRepresentativeDialogConfigData = <ClientRepresentativeDialogConfigData>{\r\n      ClientId: this.clientId,\r\n      Id: clientRepresentative ? clientRepresentative.Id : undefined\r\n    };\r\n\r\n    this.clientRepresentativeCreationDialog = this.dialogService.open(\r\n      clientRepresentative ? ClientRepresentativeDetailsComponent : ClientRepresentativeCreationComponent,\r\n      clientRepresentative\r\n        ? {\r\n          ...ClientRepresentativeDetailsComponent.OPEN_AS_DIALOG_SETTINGS,\r\n          data: clientRepresentativeDialogConfigData\r\n        }\r\n        : {\r\n          ...ClientRepresentativeCreationComponent.OPEN_AS_DIALOG_SETTINGS,\r\n          data: clientRepresentativeDialogConfigData\r\n        });\r\n\r\n    this.clientRepresentativeCreationDialog.onClose.subscribe(() => {\r\n      this._dataPopulator.clientRepresentatives\r\n        .get(this.tempLazyLoadEvent)\r\n        .subscribe(result => this._dataPopulator.clientRepresentatives.set(result));\r\n    });\r\n  }\r\n\r\n  private setClientRepresentatives(clientRepresentatives: ClientRepresentativeListModel) {\r\n    this.totalRecords = clientRepresentatives.TotalRowsCount;\r\n    this.clientRepresentatives = clientRepresentatives.List;\r\n  }\r\n}","import { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { PermissionGroupItemModel } from \"src/app/interfaces/user-permission\";\r\nimport { UserRolePermissionsDestinations } from \"src/app/interfaces/user-role\";\r\nimport { UserRolePermissionsOnCreationFiller } from \"./user-role-permissions-on-creation-filler\";\r\nimport { UserRolePermissionsOnEditionFiller } from \"./user-role-permissions-on-edition-filler\";\r\nimport { UserRolePermissionsFiller } from \"./user-role-permissions-filler\";\r\n\r\nexport class UserRolePermissionsFillerFactory {\r\n  static makeFiller(formMode: FormModeEnum, source: PermissionGroupItemModel[], destinations: UserRolePermissionsDestinations) {\r\n\r\n    let filler: UserRolePermissionsFiller;\r\n\r\n    switch (formMode) {\r\n      case FormModeEnum.Creation:\r\n        filler = new UserRolePermissionsOnCreationFiller(source, destinations);\r\n        break;\r\n\r\n      case FormModeEnum.Edition:\r\n        filler = new UserRolePermissionsOnEditionFiller(source, destinations);\r\n        break;\r\n\r\n      default:\r\n        throw new Error(`[${this.constructor.name}] Unsupported form mode.`);\r\n    }\r\n\r\n    return filler;\r\n  }\r\n}","import { Icons, LIST_ICON_NAME, MODIFY_ICON_NAME } from \"src/app/icon-mapper\";\r\nimport { PermissionGroupItemModel, PermissionItemModel } from \"src/app/interfaces/user-permission\";\r\nimport { UserPermissionNode } from \"../models/user-permission-node\";\r\n\r\nexport abstract class UserRolePermissionsFiller {\r\n\r\n  public abstract createChildNode(permission: PermissionItemModel): UserPermissionNode;\r\n  public abstract createParentNode(permissionsGroup: PermissionGroupItemModel, children: UserPermissionNode[]): UserPermissionNode;\r\n  public abstract fill(): void;\r\n\r\n  protected getIconStyleClassNameForPermission(permission: PermissionItemModel) {\r\n    return permission.Name.endsWith('.CanList')\r\n      ? LIST_ICON_NAME\r\n      : permission.Name.endsWith('.CanModify')\r\n        ? MODIFY_ICON_NAME\r\n        : Icons[permission.Name]\r\n  }\r\n}","import { PermissionGroupItemModel, PermissionItemModel, UserPermissionNodeData } from \"src/app/interfaces/user-permission\";\r\nimport { UserRolePermissionsDestinations } from \"src/app/interfaces/user-role\";\r\nimport { UserRolePermissionsFiller } from \"./user-role-permissions-filler\";\r\nimport { Icons } from \"src/app/icon-mapper\";\r\nimport { UserPermissionNode } from \"../models/user-permission-node\";\r\n\r\nexport class UserRolePermissionsOnCreationFiller extends UserRolePermissionsFiller {\r\n\r\n  constructor(private source: PermissionGroupItemModel[], private destinations: UserRolePermissionsDestinations) {\r\n    super();\r\n  }\r\n\r\n  public override createChildNode(permission: PermissionItemModel): UserPermissionNode<any> {\r\n\r\n    const result = new UserPermissionNode();\r\n\r\n    result.data = <UserPermissionNodeData>{\r\n      icon: this.getIconStyleClassNameForPermission(permission),\r\n      id: permission.Id,\r\n      name: permission.Name,\r\n      linkedPermissionIds: permission.LinkedPermissionsIds\r\n    };\r\n\r\n    return result;\r\n  }\r\n\r\n  public override createParentNode(permissionsGroup: PermissionGroupItemModel, children: UserPermissionNode[]): UserPermissionNode<any> {\r\n\r\n    const result = new UserPermissionNode();\r\n\r\n    result.children = children;\r\n    result.data = <UserPermissionNodeData>{\r\n      icon: Icons[permissionsGroup.Name],\r\n      id: null,\r\n      name: permissionsGroup.Name,\r\n      linkedPermissionIds: [],\r\n    };\r\n\r\n    return result;\r\n  }\r\n\r\n  public override fill() {\r\n    for (const permissionsGroup of this.source) {\r\n      const permissionsGroupChildren: UserPermissionNode[] = [];\r\n\r\n      for (const permission of permissionsGroup.Permissions) {\r\n        permissionsGroupChildren.push(this.createChildNode(permission));\r\n      }\r\n\r\n      this.destinations.allItems.push(this.createParentNode(permissionsGroup, permissionsGroupChildren));\r\n    }\r\n  }\r\n}","import { Icons } from \"src/app/icon-mapper\";\r\nimport { PermissionGroupItemModel, PermissionItemModel, UserPermissionNodeData } from \"src/app/interfaces/user-permission\";\r\nimport { UserRolePermissionsDestinations } from \"src/app/interfaces/user-role\";\r\nimport { UserRolePermissionsFiller } from \"./user-role-permissions-filler\";\r\nimport { UserPermissionNode } from \"../models/user-permission-node\";\r\n\r\nexport class UserRolePermissionsOnEditionFiller extends UserRolePermissionsFiller {\r\n\r\n  constructor(private source: PermissionGroupItemModel[], private destinations: UserRolePermissionsDestinations) {\r\n    super();\r\n  }\r\n\r\n  public override createChildNode(permission: PermissionItemModel): UserPermissionNode<any> {\r\n\r\n    const result = new UserPermissionNode();\r\n\r\n    result.data = <UserPermissionNodeData>{\r\n      icon: this.getIconStyleClassNameForPermission(permission),\r\n      id: permission.Id,\r\n      isSelected: permission.IsSelected,\r\n      linkedPermissionIds: permission.LinkedPermissionsIds,\r\n      name: permission.Name\r\n    };\r\n    result.expanded = true;\r\n    result.partialSelected = permission.IsSelected ? false : undefined;\r\n\r\n    return result;\r\n  }\r\n\r\n  public override createParentNode(permissionsGroup: PermissionGroupItemModel, children: UserPermissionNode<any>[]): UserPermissionNode<any> {\r\n\r\n    const result = new UserPermissionNode();\r\n\r\n    result.children = children;\r\n    result.data = <UserPermissionNodeData>{\r\n      icon: Icons[permissionsGroup.Name],\r\n      id: null,\r\n      isSelected: children.every(c => c.isSelected()),\r\n      linkedPermissionIds: [],\r\n      name: permissionsGroup.Name\r\n    };\r\n    result.expanded = true;\r\n    result.partialSelected = !children.every(c => c.isSelected()) && children.some(c => c.isSelected());\r\n\r\n    return result;\r\n  }\r\n\r\n  public override fill() {\r\n    this.updateUserRolePermissions();\r\n    this.updateUserRolePermissionsSelected();\r\n  }\r\n\r\n  private updateUserRolePermissions() {\r\n    for (const permissionsGroup of this.source) {\r\n      const permissionsGroupChildren: UserPermissionNode[] = [];\r\n\r\n      for (const permission of permissionsGroup.Permissions) {\r\n        permissionsGroupChildren.push(this.createChildNode(permission));\r\n      }\r\n\r\n      this.destinations.allItems.push(this.createParentNode(permissionsGroup, permissionsGroupChildren));\r\n    }\r\n  }\r\n\r\n  private updateUserRolePermissionsSelected() {\r\n    for (const permissionNode of this.destinations.allItems) {\r\n      if (permissionNode.hasChildren()) {\r\n        for (const childPermissionNode of permissionNode.children!) {\r\n          this.destinations.selectedItems.tryPush(childPermissionNode);\r\n        }\r\n      }\r\n\r\n      this.destinations.selectedItems.tryPush(permissionNode);\r\n    }\r\n  }\r\n}","import { TreeNode } from \"primeng/api\";\r\nimport { UserPermissionNodeData } from \"src/app/interfaces/user-permission\";\r\n\r\nexport class UserPermissionNode<T = any> implements TreeNode {\r\n  children?: UserPermissionNode<T>[] = [];\r\n  data: UserPermissionNodeData;\r\n  expanded?: boolean | undefined;\r\n  partialSelected?: boolean | undefined;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  public hasChildren(): boolean {\r\n    return this.children !== undefined && this.children.length > 0\r\n  }\r\n\r\n  public hasLinkedPermissions() {\r\n    return this.data.linkedPermissionIds.length > 0;\r\n  }\r\n\r\n  public isSelected(): boolean {\r\n    return this.data.isSelected ?? false;\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { PngTreeColumn } from \"src/app/interfaces/png\";\r\nimport { PermissionGroupItemModel, PermissionItemModel, SelectedUserPermissionNodeArray } from \"src/app/interfaces/user-permission\";\r\nimport { UserRolePermissionsFillerFactory } from \"./fillers/user-role-permissions-filler-factory\";\r\nimport { UserRolePermissionsDestinations } from \"src/app/interfaces/user-role\";\r\nimport { UserPermissionNode } from \"./models/user-permission-node\";\r\n\r\n@Component({\r\n  selector: 'user-role-permissions',\r\n  templateUrl: './user-role-permissions.html'\r\n})\r\nexport class UserRolePermissionsComponent implements OnInit {\r\n\r\n  selectedUserPermissionNodes = new SelectedUserPermissionNodeArray();\r\n  userPermissionNodes: UserPermissionNode[] = [];\r\n  userRolePermissionColumns: PngTreeColumn[] = [];\r\n\r\n  @Input() formMode: FormModeEnum = FormModeEnum.Creation;\r\n  @Input() groupedUserPermissions: PermissionGroupItemModel[];\r\n\r\n  constructor(\r\n    public translate: TranslateService\r\n  ) {\r\n    this.userRolePermissionColumns = [\r\n      {\r\n        icon: 'icon',\r\n        field: 'name',\r\n        header: 'UserPermission.Name'\r\n      }\r\n    ];\r\n  }\r\n\r\n  ngOnInit() {\r\n    UserRolePermissionsFillerFactory\r\n      .makeFiller(\r\n        this.formMode,\r\n        this.groupedUserPermissions,\r\n        <UserRolePermissionsDestinations>{ allItems: this.userPermissionNodes, selectedItems: this.selectedUserPermissionNodes })\r\n      .fill();\r\n  }\r\n\r\n  public getPermissionsSubmitted() {\r\n    const permissionsSubmitted: PermissionItemModel[] = [];\r\n    for (const permissionNode of this.selectedUserPermissionNodes) {\r\n      if (!permissionNode.hasChildren()) {\r\n        permissionsSubmitted.push(<PermissionItemModel>{\r\n          Id: permissionNode.data.id\r\n        });\r\n      }\r\n      else {\r\n        for (const childPermissionNode of permissionNode.children!) {\r\n          permissionsSubmitted.push(<PermissionItemModel>{\r\n            Id: childPermissionNode.data.id\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return permissionsSubmitted;\r\n  }\r\n\r\n  public onPermissionSelected(permissionNode: UserPermissionNode) {\r\n    if (!permissionNode.hasLinkedPermissions())\r\n      return;\r\n\r\n    for (const linkedPermissionId of permissionNode.data.linkedPermissionIds) {\r\n      const isPermissionAlreadySelected = this.selectedUserPermissionNodes.find(p => p.data.id === linkedPermissionId);\r\n\r\n      if (!isPermissionAlreadySelected) {\r\n        const permissionToBeSelected = this.getPermissionNodeToBeSelected(linkedPermissionId);\r\n\r\n        if (permissionToBeSelected) {\r\n          this.selectedUserPermissionNodes.push(permissionToBeSelected);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private findPermissionById(permissionNode: UserPermissionNode, idToFind: number): UserPermissionNode | undefined {\r\n    if (permissionNode.data && permissionNode.data.id === idToFind)\r\n      return permissionNode;\r\n\r\n    if (permissionNode.hasChildren()) {\r\n      for (const nodeChild of permissionNode.children!) {\r\n        const result = this.findPermissionById(nodeChild, idToFind);\r\n\r\n        if (result)\r\n          return result;\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private getPermissionNodeToBeSelected(permissionId: number): UserPermissionNode | undefined {\r\n    let permission: UserPermissionNode | undefined;\r\n\r\n    for (const userPermissionGroup of this.userPermissionNodes) {\r\n      permission = this.findPermissionById(userPermissionGroup, permissionId);\r\n\r\n      if (permission)\r\n        return permission;\r\n    }\r\n\r\n    return permission;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { UserRoleCreationModel, UserRolePermissionsForCreation } from \"src/app/interfaces/user-role\";\r\nimport { PermissionGroupItemModel } from \"src/app/interfaces/user-permission\";\r\nimport { NameInLanguagesComponent } from \"../name-in-languages/name-in-languages\";\r\nimport { ApiResultEnum } from \"src/app/enums/api-result-enum\";\r\nimport { UserRolePermissionsComponent } from \"./permissions/user-role-permissions\";\r\nimport { FormComponent } from \"../abstract/forms/form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\n\r\n@Component({\r\n  selector: \"user-role-create\",\r\n  templateUrl: \"./user-role-create.html\"\r\n})\r\nexport class UserRoleCreationComponent\r\n  extends FormComponent<UserRoleCreationModel>\r\n  implements OnInit {\r\n\r\n  public override beforeSubmitionCustomOperationsHandler = this.prepareUserRoleCreationModel;\r\n\r\n  private readonly _dataPopulator = {\r\n    userPermissions: {\r\n      get: () => this.httpClient.get<UserRolePermissionsForCreation>(ApiRoutes.userRole.getUserRolePermissionsForCreation),\r\n      set: (userPermissions: UserRolePermissionsForCreation) => this.groupedUserPermissions = userPermissions.List\r\n    }\r\n  }\r\n\r\n  groupedUserPermissions: PermissionGroupItemModel[];\r\n  isNameInLanguagesValid: boolean = false;\r\n\r\n  @ViewChild('nameInLanguages') nameInLanguages: NameInLanguagesComponent;\r\n  @ViewChild('userRolePermissions') userRolePermissions: UserRolePermissionsComponent;\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'UserRole',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Creation,\r\n      router,\r\n      ApiRoutes.userRole.post,\r\n      translate,\r\n      Routes.userRoles.navigations.list);\r\n\r\n    this.createForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._dataPopulator.userPermissions\r\n      .get()\r\n      .subscribe(result => this._dataPopulator.userPermissions.set(result));\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.userRoles.navigations.list]);\r\n  }\r\n\r\n  public onIsNameInLanguagesValid(value: boolean) {\r\n    this.isNameInLanguagesValid = value;\r\n  }\r\n\r\n  private prepareUserRoleCreationModel(): UserRoleCreationModel {\r\n    const userRole = new UserRoleCreationModel();\r\n    userRole.NameInLanguages = this.nameInLanguages.getNameInLanguages();\r\n\r\n    const permissionsSubmitted = this.userRolePermissions.getPermissionsSubmitted();\r\n    for (const permission of permissionsSubmitted) {\r\n      if (!userRole.doesPermissionExistWithinSelected(permission.Id)) {\r\n        userRole.PermissionsSelected.push(permission);\r\n      }\r\n    }\r\n\r\n    return userRole;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission-enum\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { SelectedUserPermissionNodeArray } from \"src/app/interfaces/user-permission\";\r\nimport { PngTreeColumn } from \"src/app/interfaces/png\";\r\nimport { NameInLanguagesComponent } from \"../name-in-languages/name-in-languages\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { UserRoleDetailsModel } from \"src/app/interfaces/user-role\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { UserRolePermissionsComponent } from \"./permissions/user-role-permissions\";\r\nimport { UserPermissionNode } from \"./permissions/models/user-permission-node\";\r\nimport { AccessControlFormComponent } from \"../abstract/forms/access-control-form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\n\r\n@Component({\r\n  selector: 'user-role-details',\r\n  templateUrl: './user-role-details.html'\r\n})\r\nexport class UserRoleDetailsComponent\r\n  extends AccessControlFormComponent<UserRoleDetailsModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareUserRoleDetailsModel;\r\n\r\n  protected override afterSubmitionCustomOperationsHandler = undefined;\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n  protected override readonly entityId: number;\r\n\r\n  isNameInLanguagesValid: boolean = false;\r\n  selectedUserPermissions = new SelectedUserPermissionNodeArray();\r\n  userPermissionColumns: PngTreeColumn[] = [];\r\n  userPermissionGroups: UserPermissionNode[] = [];\r\n  userRole: UserRoleDetailsModel;\r\n\r\n  public override get shouldActionsBeDisabled(): boolean {\r\n    return super.shouldActionsBeDisabled ||\r\n      !this.userRole;\r\n  }\r\n\r\n  @ViewChild('nameInLanguages') nameInLanguages: NameInLanguagesComponent;\r\n  @ViewChild('userRolePermissions') userRolePermissions: UserRolePermissionsComponent;\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteUserRole',\r\n      ApiRoutes.userRole.delete,\r\n      dialogMessageService,\r\n      'UserRole',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      router,\r\n      ApiRoutes.userRole.put,\r\n      translate,\r\n      [UserPermissionEnum.UserRoles_CanModify],\r\n      Routes.userRoles.navigations.list);\r\n\r\n    this.createForm();\r\n    this.loadUserRole();\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.userRoles.navigations.list]);\r\n  }\r\n\r\n  public onIsNameInLanguagesValid(value: boolean) {\r\n    this.isNameInLanguagesValid = value;\r\n  }\r\n\r\n  private getEntityInstanceName(): string {\r\n    return this.userRole.Name!;\r\n  }\r\n\r\n  private loadUserRole() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<UserRoleDetailsModel>(ApiRoutes.userRole.getById(this.entityId))\r\n      .subscribe(result => {\r\n        this.userRole = result;\r\n        this.updateForm();\r\n      });\r\n  }\r\n\r\n  protected override updateForm() {\r\n    if (!this.userRole)\r\n      return;\r\n\r\n    super.updateForm();\r\n  }\r\n\r\n  private prepareUserRoleDetailsModel() {\r\n    const userRole = new UserRoleDetailsModel();\r\n\r\n    userRole.Id = this.userRole.Id;\r\n    userRole.NameInLanguages = this.nameInLanguages.getNameInLanguages();\r\n\r\n    const permissionsSubmitted = this.userRolePermissions.getPermissionsSubmitted();\r\n    for (const permission of permissionsSubmitted) {\r\n      if (!userRole.doesPermissionExistWithinSelected(permission.Id)) {\r\n        userRole.PermissionsSelected.push(permission);\r\n      }\r\n    }\r\n\r\n    return userRole;\r\n  }\r\n}","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Table } from 'primeng/table';\r\nimport { PngTableColumn } from 'src/app/interfaces/png';\r\nimport { UserRoleListItemModel, UserRoleListModel } from 'src/app/interfaces/user-role';\r\nimport { FilterService } from 'src/app/services/filters/filter.service';\r\nimport { ConfirmationService, LazyLoadEvent, SelectItem } from 'primeng/api';\r\nimport { SelectOptionsService } from 'src/app/services/select-options/select-options.service';\r\nimport { FilterTypeEnum } from 'src/app/enums/filter-type-enum';\r\nimport { ApiRoutes } from 'src/app/api-routes';\r\nimport { ConsoleMessageService } from 'src/app/services/messages/console-message.service';\r\nimport { ErrorService } from 'src/app/services/errors/error.service';\r\nimport { DialogMessageService } from 'src/app/services/messages/dialog-message.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserPermissionEnum } from 'src/app/enums/user-permission-enum';\r\nimport { Routes } from 'src/app/routes';\r\nimport { ApiResultEnum } from 'src/app/enums/api-result-enum';\r\nimport { AccessControlComponent } from '../abstract/access-controls/access-control';\r\nimport { AuthorizationService } from 'src/app/services/authorization/authorization.service';\r\n\r\n@Component({\r\n  selector: \"user-role-list\",\r\n  templateUrl: \"./user-role-list.html\"\r\n})\r\nexport class UserRoleListComponent\r\n  extends AccessControlComponent<UserRoleListItemModel>\r\n  implements OnInit {\r\n\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n\r\n  private readonly _dataPopulator = {\r\n    multiSelects: {\r\n      userRoles: {\r\n        get: () => this.getUserRoleMultiSelectData(),\r\n        set: (userRoles: SelectItem[]) => this.setUserRoleMultiSelectData(userRoles)\r\n      }\r\n    },\r\n    userRoles: {\r\n      get: (event: LazyLoadEvent) => this.getUserRoles(event),\r\n      set: (userRoles: UserRoleListModel) => this.setUserRoles(userRoles)\r\n    }\r\n  };\r\n\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  cols: PngTableColumn[];\r\n  totalRecords: number;\r\n  userRoleOptions: SelectItem[];\r\n  userRoles: UserRoleListItemModel[];\r\n\r\n  @ViewChild('dataTable') dataTable: Table;\r\n\r\n  constructor(\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    public readonly filterService: FilterService,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteUserRole',\r\n      ApiRoutes.userRole.delete,\r\n      dialogMessageService,\r\n      'UserRole',\r\n      errorService,\r\n      httpClient,\r\n      () => {\r\n        this._dataPopulator.userRoles\r\n          .get(this.tempLazyLoadEvent)\r\n          .subscribe(result => this._dataPopulator.userRoles.set(result));\r\n      },\r\n      router,\r\n      translate,\r\n      [UserPermissionEnum.UserRoles_CanModify]);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.cols = [\r\n      <PngTableColumn>{\r\n        field: 'Id',\r\n        header: 'UserRole.Id',\r\n        width: '10%',\r\n        filterType: FilterTypeEnum.Numeric\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Name',\r\n        header: 'UserRole.Name',\r\n        width: '70%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true,\r\n        replaceWith: 'Id'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Actions',\r\n        header: '',\r\n        width: '20%'\r\n      }\r\n    ];\r\n\r\n    this._dataPopulator.multiSelects.userRoles\r\n      .get()\r\n      .subscribe(userRoles => this._dataPopulator.multiSelects.userRoles.set(userRoles));\r\n  }\r\n\r\n  public loadUserRolesLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n\r\n    this._dataPopulator.userRoles\r\n      .get(event)\r\n      .subscribe(result => this._dataPopulator.userRoles.set(result));\r\n  }\r\n\r\n  public onCreate() {\r\n    this.router.navigate([Routes.userRoles.navigations.creation]);\r\n  }\r\n\r\n  public onEdit(userRole: UserRoleListItemModel) {\r\n    this.router.navigate([Routes.userRoles.navigations.edition(userRole.Id)]);\r\n  }\r\n\r\n  private getEntityInstanceName(userRole: UserRoleListItemModel): string {\r\n    return userRole.Name;\r\n  }\r\n\r\n  private getUserRoleMultiSelectData() {\r\n    return this.selectOptionsService.getUserRoles();\r\n  }\r\n\r\n  private getUserRoles(event: LazyLoadEvent) {\r\n    event.sortField ??= this.cols[0]?.field;\r\n\r\n    return this.httpClient\r\n      .get<UserRoleListModel>(ApiRoutes.userRole.getAll(event, this.cols));\r\n  }\r\n\r\n  private setUserRoleMultiSelectData(userRoles: SelectItem[]) {\r\n    this.userRoleOptions = userRoles;\r\n\r\n    const userRoleColumn = this.cols.find(c => c.field === \"Name\");\r\n\r\n    if (userRoleColumn) {\r\n      userRoleColumn.options = this.userRoleOptions;\r\n    }\r\n  }\r\n\r\n  private setUserRoles(userRoles: UserRoleListModel) {\r\n    this.totalRecords = userRoles.TotalRowsCount;\r\n    this.userRoles = userRoles.List;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { SelectItem } from \"primeng/api\";\r\nimport { Router } from \"@angular/router\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { RegexPatterns } from \"src/app/tools/regexPatterns\";\r\nimport { UserCreationModel } from \"src/app/interfaces/user\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { FormComponent } from \"../abstract/forms/form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\n\r\n@Component({\r\n  selector: \"user-create\",\r\n  templateUrl: \"./user-create.html\"\r\n})\r\nexport class UserCreationComponent\r\n  extends FormComponent<UserCreationModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareUserCreationModel;\r\n\r\n  languages: SelectItem<number>[];\r\n  userRoles: SelectItem<number>[];\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'User',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Creation,\r\n      router,\r\n      ApiRoutes.user.post,\r\n      translate,\r\n      Routes.users.navigations.list);\r\n\r\n    this.createForm({\r\n      Email: ['', Validators.pattern(RegexPatterns.emailPattern)],\r\n      FirstName: ['', Validators.required],\r\n      IsActive: false,\r\n      LanguageId: null,\r\n      LastName: ['', Validators.required],\r\n      Login: ['', Validators.required],\r\n      Password: ['', Validators.pattern(RegexPatterns.passwordPattern)],\r\n      UserRoleId: null\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.users.navigations.list]);\r\n  }\r\n\r\n  private populateDropdowns() {\r\n\r\n    this.selectOptionsService\r\n      .getLanguages()\r\n      .subscribe(options => {\r\n        this.languages = options;\r\n      });\r\n\r\n    this.selectOptionsService\r\n      .getUserRoles()\r\n      .subscribe(options => {\r\n        this.userRoles = options;\r\n      });\r\n  }\r\n\r\n  private prepareUserCreationModel(): UserCreationModel {\r\n    const user = <UserCreationModel>{\r\n      Email: this.form.value.Email,\r\n      FirstName: this.form.value.FirstName,\r\n      IsActive: this.form.value.IsActive,\r\n      LanguageId: this.form.value.LanguageId,\r\n      LastName: this.form.value.LastName,\r\n      Login: this.form.value.Login,\r\n      Password: this.form.value.Password,\r\n      UserRoleId: this.form.value.UserRoleId\r\n    };\r\n\r\n    return user;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ConfirmationService, SelectItem } from \"primeng/api\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission-enum\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { PrimeNgHelper } from \"src/app/tools/primeNgHelper\";\r\nimport { RegexPatterns } from \"src/app/tools/regexPatterns\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { AccessControlFormComponent } from \"../abstract/forms/access-control-form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { StringBuilder } from \"src/app/tools/stringBuilder\";\r\nimport { UserDetailsModel } from \"src/app/interfaces/user\";\r\n\r\n@Component({\r\n  selector: \"user-details\",\r\n  templateUrl: \"./user-details.html\"\r\n})\r\nexport class UserDetailsComponent\r\n  extends AccessControlFormComponent<UserDetailsModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareUserDetailsModel;\r\n\r\n  protected override afterSubmitionCustomOperationsHandler = undefined;\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n  protected override entityId: string;\r\n\r\n  user: UserDetailsModel;\r\n  userRoles: SelectItem<number>[];\r\n\r\n  public override get shouldActionsBeDisabled(): boolean {\r\n    return super.shouldActionsBeDisabled ||\r\n      !this.user;\r\n  }\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteUser',\r\n      ApiRoutes.user.delete,\r\n      dialogMessageService,\r\n      'User',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      router,\r\n      ApiRoutes.user.put,\r\n      translate,\r\n      [UserPermissionEnum.Users_CanModify],\r\n      Routes.users.navigations.list);\r\n\r\n    this.createForm({\r\n      CreatedOn: [{ value: '', disabled: true }],\r\n      Email: ['', Validators.pattern(RegexPatterns.emailPattern)],\r\n      FirstName: ['', Validators.required],\r\n      IsActive: false,\r\n      LastName: ['', Validators.required],\r\n      Login: [{ value: '', disabled: true }],\r\n      UserRoleId: null,\r\n      Password: ['', Validators.pattern(RegexPatterns.passwordPattern)]\r\n    });\r\n\r\n    this.loadUser();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.users.navigations.list]);\r\n  }\r\n\r\n  private getEntityInstanceName(): string {\r\n    return new StringBuilder(this.user.LastName)\r\n      .append(' ')\r\n      .append(this.user.FirstName)\r\n      .toString();\r\n  }\r\n\r\n  private isPasswordFieldFilled() {\r\n    return this.form.value.Password.length > 0;\r\n  }\r\n\r\n  private loadUser() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<UserDetailsModel>(ApiRoutes.user.getById(this.entityId))\r\n      .subscribe(result => {\r\n        this.user = result;\r\n\r\n        this.updateForm({\r\n          CreatedOn: PrimeNgHelper.getDateFromCalendarAsString(new Date(this.user.CreatedOn ?? \"\")),\r\n          Email: this.user.Email,\r\n          FirstName: this.user.FirstName,\r\n          IsActive: this.user.IsActive,\r\n          LastName: this.user.LastName,\r\n          Login: this.user.Login,\r\n          UserRoleId: this.user.UserRoleId.toString(),\r\n        });\r\n      });\r\n  }\r\n\r\n  private populateDropdowns() {\r\n    this.selectOptionsService\r\n      .getUserRoles()\r\n      .subscribe(options => {\r\n        this.userRoles = options;\r\n      });\r\n  }\r\n\r\n  private prepareUserDetailsModel(): UserDetailsModel {\r\n    const user = <UserDetailsModel>{\r\n      Email: this.form.value.Email,\r\n      FirstName: this.form.value.FirstName,\r\n      Id: this.user.Id,\r\n      IsActive: this.form.value.IsActive,\r\n      LastName: this.form.value.LastName,\r\n      UserRoleId: this.form.value.UserRoleId\r\n    };\r\n\r\n    if (this.isPasswordFieldFilled()) {\r\n      user.Password = this.form.value.Password;\r\n    }\r\n\r\n    return user;\r\n  }\r\n}","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { PngTableColumn } from '../../interfaces/png';\r\nimport { UserListItemModel, UserListModel } from 'src/app/interfaces/user';\r\nimport { Table } from 'primeng/table';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ConfirmationService, LazyLoadEvent, SelectItem } from 'primeng/api';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { FilterService } from '../../services/filters/filter.service';\r\nimport { SelectOptionsService } from 'src/app/services/select-options/select-options.service';\r\nimport { ApiRoutes } from 'src/app/api-routes';\r\nimport { Router } from '@angular/router';\r\nimport { StringBuilder } from 'src/app/tools/stringBuilder';\r\nimport { UserPermissionEnum } from 'src/app/enums/user-permission-enum';\r\nimport { ErrorService } from 'src/app/services/errors/error.service';\r\nimport { DialogMessageService } from 'src/app/services/messages/dialog-message.service';\r\nimport { ConsoleMessageService } from 'src/app/services/messages/console-message.service';\r\nimport { Routes } from 'src/app/routes';\r\nimport { AccessControlComponent } from '../abstract/access-controls/access-control';\r\nimport { AuthorizationService } from 'src/app/services/authorization/authorization.service';\r\nimport { FilterTypeEnum } from 'src/app/enums/filter-type-enum';\r\n\r\n@Component({\r\n  selector: \"user-list\",\r\n  templateUrl: \"./user-list.html\"\r\n})\r\nexport class UserListComponent\r\n  extends AccessControlComponent<UserListItemModel>\r\n  implements OnInit {\r\n\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n\r\n  private readonly _dataPopulator = {\r\n    multiSelects: {\r\n      userRoles: {\r\n        get: () => this.getUserRoleMultiSelectData(),\r\n        set: (userRoles: SelectItem[]) => this.setUserRoleMultiSelectData(userRoles)\r\n      }\r\n    },\r\n    users: {\r\n      get: (event: LazyLoadEvent) => this.getUsers(event),\r\n      set: (users: UserListModel) => this.setUsers(users)\r\n    }\r\n  };\r\n\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  cols: PngTableColumn[];\r\n  totalRecords: number;\r\n  userRoleOptions: SelectItem[];\r\n  users: UserListItemModel[];\r\n\r\n  @ViewChild('dataTable') dataTable: Table;\r\n\r\n  constructor(\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    public readonly filterService: FilterService,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteUser',\r\n      ApiRoutes.user.delete,\r\n      dialogMessageService,\r\n      'User',\r\n      errorService,\r\n      httpClient,\r\n      () => {\r\n        this._dataPopulator.users\r\n          .get(this.tempLazyLoadEvent)\r\n          .subscribe(result => this._dataPopulator.users.set(result));\r\n      },\r\n      router,\r\n      translate,\r\n      [UserPermissionEnum.Users_CanModify]);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cols = [\r\n      <PngTableColumn>{\r\n        field: 'Login',\r\n        header: 'User.Login',\r\n        width: '10%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'FirstName',\r\n        header: 'User.FirstName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'LastName',\r\n        header: 'User.LastName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'UserRoleName',\r\n        header: 'User.UserRoleName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true,\r\n        replaceWith: 'UserRoleId'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'IsActive',\r\n        header: 'User.IsActive',\r\n        width: '10%'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Actions',\r\n        header: '',\r\n        width: '20%'\r\n      }\r\n    ];\r\n\r\n    this._dataPopulator.multiSelects.userRoles\r\n      .get()\r\n      .subscribe(userRoles => this._dataPopulator.multiSelects.userRoles.set(userRoles));\r\n  }\r\n\r\n  public loadUsersLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n    this._dataPopulator.users\r\n      .get(event)\r\n      .subscribe(result => this._dataPopulator.users.set(result));\r\n  }\r\n\r\n  public onCreate() {\r\n    this.router.navigate([Routes.users.navigations.creation]);\r\n  }\r\n\r\n  public onEdit(user: UserListItemModel) {\r\n    this.router.navigate([Routes.users.navigations.edition(user.Id)]);\r\n  }\r\n\r\n  private getEntityInstanceName(user: UserListItemModel): string {\r\n    return new StringBuilder(user.LastName)\r\n      .append(' ')\r\n      .append(user.FirstName)\r\n      .toString();\r\n  }\r\n\r\n  private getUserRoleMultiSelectData() {\r\n    return this.selectOptionsService.getUserRoles();\r\n  }\r\n\r\n  private getUsers(event: LazyLoadEvent) {\r\n    event.sortField ??= this.cols[0]?.field;\r\n\r\n    return this.httpClient\r\n      .get<UserListModel>(ApiRoutes.user.getAll(event, this.cols));\r\n  }\r\n\r\n  private setUserRoleMultiSelectData(userRoles: SelectItem[]) {\r\n    this.userRoleOptions = userRoles;\r\n\r\n    const userRoleColumn = this.cols.find(c => c.field === \"UserRoleName\");\r\n    if (userRoleColumn) {\r\n      userRoleColumn.options = this.userRoleOptions;\r\n    }\r\n  }\r\n\r\n  private setUsers(users: UserListModel) {\r\n    this.totalRecords = users.TotalRowsCount;\r\n    this.users = users.List;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { SelectItem } from \"primeng/api\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { UserDetailsModel, UserProfileModel } from \"src/app/interfaces/user\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { RegexPatterns } from \"src/app/tools/regexPatterns\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { MenuService } from \"src/app/services/layout/menu.service\";\r\nimport { FormComponent } from \"../abstract/forms/form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\n\r\n@Component({\r\n  selector: \"user-profile\",\r\n  templateUrl: \"./user-profile.html\"\r\n})\r\nexport class UserProfileComponent\r\n  extends FormComponent<UserProfileModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareUserProfileModel;\r\n\r\n  protected override afterSubmitionCustomOperationsHandler = undefined;\r\n\r\n  private readonly entityId: string;\r\n\r\n  user: UserProfileModel;\r\n  userRoles: SelectItem<number>[];\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    private readonly menuService: MenuService,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'User',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      router,\r\n      ApiRoutes.user.saveProfile,\r\n      translate,\r\n      Routes.home.navigations.default);\r\n\r\n    this.createForm({\r\n      Email: ['', Validators.pattern(RegexPatterns.emailPattern)],\r\n      FirstName: ['', Validators.required],\r\n      LastName: ['', Validators.required],\r\n      Login: [{ value: '', disabled: true }],\r\n      UserRoleId: null,\r\n      Password: ['', Validators.pattern(RegexPatterns.passwordPattern)]\r\n    });\r\n\r\n    this.entityId = AuthorizationService.currentUserId!;\r\n    this.loadUser();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  public onBack() {\r\n    const firstMenuItemUserIsAuthorizedFor = this.menuService.getFirstMenuItemUserIsAuthorizedFor();\r\n    this.router.navigate([Routes.home.navigations.default]);\r\n  }\r\n\r\n  private isPasswordFieldFilled() {\r\n    return this.form.value.Password.length > 0;\r\n  }\r\n\r\n  private loadUser() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<UserProfileModel>(ApiRoutes.user.getProfileById(this.entityId))\r\n      .subscribe(result => {\r\n        this.user = result;\r\n\r\n        this.updateForm({\r\n          Email: this.user.Email,\r\n          FirstName: this.user.FirstName,\r\n          LastName: this.user.LastName,\r\n          Login: this.user.Login,\r\n          UserRoleId: this.user.UserRoleId.toString(),\r\n        });\r\n      });\r\n  }\r\n\r\n  private populateDropdowns() {\r\n    this.selectOptionsService\r\n      .getUserRoles()\r\n      .subscribe(options => {\r\n        this.userRoles = options;\r\n      });\r\n  }\r\n\r\n  private prepareUserProfileModel(): UserProfileModel {\r\n    const user = <UserProfileModel>{\r\n      Email: this.form.value.Email,\r\n      FirstName: this.form.value.FirstName,\r\n      Id: this.user.Id,\r\n      LastName: this.form.value.LastName\r\n    };\r\n\r\n    if (this.isPasswordFieldFilled()) {\r\n      user.Password = this.form.value.Password;\r\n    }\r\n\r\n    return user;\r\n  }\r\n}","export enum ApiResultEnum {\r\n  AssignedRoleDeletionAttempt,\r\n  BadRequest,\r\n  DoesNotExist,\r\n  DoesNotMatchJWT,\r\n  Error,\r\n  ExistsInDatabase,\r\n  Invalid,\r\n  LoginExists,\r\n  NameExists,\r\n  NationalIdExists,\r\n  None,\r\n  NotActive,\r\n  NotFound,\r\n  NoUserPermissionAssigned,\r\n  OK,\r\n  RepresentativeExists,\r\n  TheOnlyAssignedRoleDeletionAttempt,\r\n  Used,\r\n  UserHasBeenAlreadyAssignedToRole,\r\n  WrongOldPassword,\r\n}","export enum ClientTypeEnum {\r\n  Private = 1,\r\n  Company = 2,\r\n}","export enum ErrorMessageTypeEnum {\r\n  Email = \"Email\",\r\n  Empty = \"Empty\",\r\n  Length = \"Length\",\r\n  MatchAllowedLetters = \"MatchAllowedLetters\",\r\n  MatchSmallLetters = \"MatchSmallLetters\"\r\n}","export enum FilterTypeEnum {\r\n  Date = \"date\",\r\n  Numeric = \"numeric\",\r\n  Special = \"special\",\r\n  Text = \"text\",\r\n}","export enum FormModeEnum {\r\n  Creation,\r\n  Edition\r\n}","export enum LanguageCodeEnum {\r\n  En = 1,\r\n  Pl = 2\r\n}","export enum MessageLifeTimeEnum {\r\n  Error = 2000,\r\n  Info = 2000,\r\n  Success = 3000,\r\n  Warning = 2000\r\n}","export enum MessageTypeEnum {\r\n  Error = \"error\",\r\n  Info = \"info\",\r\n  Success = \"success\",\r\n  Warning = \"warn\"\r\n}","export enum SearchOperatorEnum {\r\n  MatchAll = \"and\",\r\n  MatchAny = \"or\"\r\n}","export enum UserPermissionEnum {\r\n  ForAll = 0,\r\n  Users_CanList = 1,\r\n  Users_CanModify = 2,\r\n  UserRoles_CanList = 3,\r\n  UserRoles_CanModify = 4,\r\n  Clients_CanList = 5,\r\n  Clients_CanModify = 6,\r\n  ClientRepresentatives_CanList = 7,\r\n  ClientRepresentatives_CanModify = 8,\r\n  Equipments_CanList = 9,\r\n  Equipments_CanModify = 10,\r\n  Manufacturers_CanList = 11,\r\n  Manufacturers_CanModify = 12,\r\n}","export const LIST_ICON_NAME = 'pi pi-list'\r\nexport const MODIFY_ICON_NAME = 'pi pi-pencil';\r\n\r\nexport const Icons: { [key: string]: string } = {\r\n  'Permissions.Clients': 'fa fa-solid fa-face-smile',\r\n  'Permissions.ClientRepresentatives': 'fa fa-solid fa-circle-user',\r\n  'Permissions.UserRoles': 'pi pi-users',\r\n  'Permissions.Users': 'pi pi-user'\r\n}","export interface Address {\r\n  ApartmentNumber?: string,\r\n  City: string,\r\n  Country: Country,\r\n  Email?: string,\r\n  Id: number,\r\n  PhoneNumber?: string,\r\n  PostalCode: string,\r\n  StreetName: string,\r\n  StreetNumber: string\r\n}\r\n\r\nexport const addressFormFields = {\r\n  ApartmentNumber: 'ApartmentNumber',\r\n  City: 'City',\r\n  Country: 'CountryId',\r\n  Email: 'Email',\r\n  PhoneNumber: 'PhoneNumber',\r\n  PostalCode: 'PostalCode',\r\n  StreetName: 'StreetName',\r\n  StreetNumber: 'StreetNumber'\r\n}\r\n\r\nexport interface ClientAddress extends Address {\r\n  NationalId: string\r\n}\r\n\r\nexport interface Country {\r\n  Id: string,\r\n  Code?: string\r\n}\r\n\r\nexport interface ManufacturerAddress extends Address {\r\n  NationalId: string;\r\n}","export class NameInLanguage {\r\n  Name: string;\r\n  LanguageId: number;\r\n  LanguageName: string;\r\n}\r\n\r\nexport abstract class NameInLanguagesBase {\r\n  NameInLanguages: NameInLanguage[];\r\n}","import { SelectItem } from \"primeng/api\";\r\nimport { FilterTypeEnum } from \"../enums/filter-type-enum\";\r\n\r\nexport class PngTable {\r\n  cols: PngTableColumn[] = [];\r\n\r\n  constructor(cols: PngTableColumn[]) {\r\n    this.cols = cols;\r\n  }\r\n\r\n  public setOptionsForColumn(columnName: string, options: SelectItem[]) {\r\n    const column = this.cols.find(c => c.field === columnName);\r\n\r\n    if (column) {\r\n      column.options = options;\r\n    }\r\n  }\r\n}\r\n\r\nexport class PngTableColumn {\r\n  applyGlobalFiltering: boolean;\r\n  field: string;\r\n  filterMatchMode?: string;\r\n  header: string;\r\n  options?: SelectItem[];\r\n  replaceWith?: string;\r\n  filterType: FilterTypeEnum = FilterTypeEnum.Text;\r\n  width?: string;\r\n\r\n  constructor(field: string, header: string, width: string, applyGlobalFiltering?: boolean) {\r\n    this.field = field;\r\n    this.header = header;\r\n    this.width = width;\r\n    this.applyGlobalFiltering = applyGlobalFiltering ? applyGlobalFiltering : false;\r\n    this.filterType = FilterTypeEnum.Text;\r\n  }\r\n}\r\n\r\nexport class PngTreeColumn {\r\n  field: string;\r\n  header: string;\r\n  icon: string;\r\n}","export class Menu {\r\n    Icon?: string;\r\n    Items?: MenuArray;\r\n    Label: string;\r\n    Permissions?: number[];\r\n    RouterLink?: string[];\r\n}\r\n\r\nexport class MenuArray extends Array<Menu> {\r\n    public getItemsForLabel(label: string): MenuArray | undefined {\r\n        return this.find(m => m.Label == label)?.Items;\r\n    }\r\n}\r\n\r\nexport interface SelectOption {\r\n    IsSelected: boolean;\r\n    Name: string;\r\n    Value: string | number;\r\n}","import { UserPermissionNode } from \"../components/user-roles/permissions/models/user-permission-node\";\r\n\r\nexport class PermissionGroupItemModel {\r\n  Name: string;\r\n  Permissions: PermissionItemModel[];\r\n}\r\n\r\nexport class PermissionItemModel {\r\n  Id: number;\r\n  Name: string;\r\n  IsSelected: boolean;\r\n  LinkedPermissionsIds: number[];\r\n}\r\n\r\nexport class SelectedUserPermissionNodeArray extends Array<UserPermissionNode<any>> {\r\n  public tryPush(item: UserPermissionNode<any>) {\r\n    if (item.data.isSelected)\r\n      this.push(item);\r\n  }\r\n}\r\n\r\nexport interface UserPermissionNodeData {\r\n  icon?: string;\r\n  id: number | null,\r\n  isSelected?: boolean,\r\n  linkedPermissionIds: number[],\r\n  name: string\r\n}","import { UserPermissionNode } from \"../components/user-roles/permissions/models/user-permission-node\";\r\nimport { NameInLanguagesBase } from \"./name-in-language\";\r\nimport { PermissionGroupItemModel, PermissionItemModel, SelectedUserPermissionNodeArray } from \"./user-permission\";\r\n\r\nexport class UserRoleCreationModel extends NameInLanguagesBase {\r\n  PermissionsSelected: PermissionItemModel[] = [];\r\n\r\n  public doesPermissionExistWithinSelected(permissionId: number) {\r\n    return this.PermissionsSelected.find(p => p.Id === permissionId);\r\n  }\r\n}\r\n\r\nexport class UserRoleDetailsModel extends NameInLanguagesBase {\r\n  Id: number;\r\n  Name?: string;\r\n  GroupedPermissions: PermissionGroupItemModel[] = [];\r\n  PermissionsSelected: PermissionItemModel[] = [];\r\n\r\n  public doesPermissionExistWithinSelected(permissionId: number) {\r\n    return this.PermissionsSelected.find(p => p.Id === permissionId);\r\n  }\r\n}\r\n\r\nexport interface UserRoleListModel {\r\n  List: UserRoleListItemModel[];\r\n  TotalRowsCount: number;\r\n}\r\n\r\nexport interface UserRoleListItemModel {\r\n  Id: number;\r\n  Name: string;\r\n}\r\n\r\nexport interface UserRolePermissionsDestinations {\r\n  allItems: UserPermissionNode<any>[];\r\n  selectedItems: SelectedUserPermissionNodeArray;\r\n}\r\n\r\nexport interface UserRolePermissionsForCreation {\r\n  List: PermissionGroupItemModel[];\r\n}","import { Component } from '@angular/core';\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { LayoutService } from \"./services/app.layout.service\";\r\nimport { ApiRoutes } from '../api-routes';\r\nimport { AuthorizationService } from '../services/authorization/authorization.service';\r\nimport { UserChangeThemeModel } from '../interfaces/user';\r\nimport { ApiResultEnum } from '../enums/api-result-enum';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n    selector: 'app-footer',\r\n    templateUrl: './app.footer.component.html'\r\n})\r\nexport class AppFooterComponent {\r\n\r\n    isDarkModeThemeSelected: boolean = false;\r\n\r\n    constructor(\r\n        private readonly httpClient: HttpClient,\r\n        public readonly layoutService: LayoutService,\r\n        public readonly translate: TranslateService) {\r\n\r\n        const isDarkModeThemeSelectedFromStorage = localStorage.getItem('isDarkModeThemeSelected');\r\n\r\n        if (isDarkModeThemeSelectedFromStorage) {\r\n            this.isDarkModeThemeSelected = Boolean(isDarkModeThemeSelectedFromStorage);\r\n        }\r\n\r\n        this.httpClient\r\n            .get<boolean>(ApiRoutes.user.getTheme(AuthorizationService.currentUserId!))\r\n            .subscribe({\r\n                next: result => {\r\n                    this.isDarkModeThemeSelected = result;\r\n                    this.changeTheme();\r\n                }\r\n            });\r\n    }\r\n\r\n    changeUserTheme() {\r\n        localStorage.setItem('isDarkModeThemeSelected', this.isDarkModeThemeSelected.toString());\r\n\r\n        const model = <UserChangeThemeModel>{\r\n            Id: AuthorizationService.currentUserId\r\n        };\r\n\r\n        this.httpClient\r\n            .post<string>(ApiRoutes.user.changeTheme, model)\r\n            .subscribe({\r\n                next: result => {\r\n                    if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n                        this.changeTheme();\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    private changeTheme() {\r\n        const theme = this.isDarkModeThemeSelected ? 'arya-blue' : 'saga-orange';\r\n        const colorScheme = this.isDarkModeThemeSelected ? 'dark' : 'light';\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const newHref = themeLink.getAttribute('href')!.replace(this.layoutService.config.theme, theme);\r\n\r\n        this.layoutService.config.colorScheme\r\n        this.replaceThemeLink(newHref, () => {\r\n            this.layoutService.config.theme = theme;\r\n            this.layoutService.config.colorScheme = colorScheme;\r\n            this.layoutService.onConfigUpdate();\r\n        });\r\n    }\r\n\r\n    private replaceThemeLink(href: string, onComplete: Function) {\r\n        const id = 'theme-css';\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const cloneLinkElement = <HTMLLinkElement>themeLink.cloneNode(true);\r\n\r\n        cloneLinkElement.setAttribute('href', href);\r\n        cloneLinkElement.setAttribute('id', id + '-clone');\r\n\r\n        themeLink.parentNode!.insertBefore(cloneLinkElement, themeLink.nextSibling);\r\n\r\n        cloneLinkElement.addEventListener('load', () => {\r\n            themeLink.remove();\r\n            cloneLinkElement.setAttribute('id', id);\r\n            onComplete();\r\n        });\r\n    }\r\n}\r\n","import { Component, OnDestroy, Renderer2, ViewChild } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { filter, Subscription } from 'rxjs';\r\nimport { LayoutService } from \"./services/app.layout.service\";\r\nimport { AppSidebarComponent } from \"./app.sidebar.component\";\r\nimport { AppTopBarComponent } from './app.topbar.component';\r\nimport { AuthenticationService } from '../services/authentication/authentication.service';\r\nimport { Routes } from '../routes';\r\nimport { MenuService } from '../services/layout/menu.service';\r\n\r\n@Component({\r\n    selector: 'app-layout',\r\n    templateUrl: './app.layout.component.html',\r\n})\r\nexport class AppLayoutComponent implements OnDestroy {\r\n\r\n    isUserLoggedIn: boolean;\r\n    menuOutsideClickListener: any;\r\n    overlayMenuOpenSubscription: Subscription;\r\n    profileMenuOutsideClickListener: any;\r\n\r\n    @ViewChild(AppSidebarComponent) appSidebar!: AppSidebarComponent;\r\n    @ViewChild(AppTopBarComponent) appTopbar!: AppTopBarComponent;\r\n\r\n    constructor(\r\n        private readonly authenticationService: AuthenticationService,\r\n        public readonly layoutService: LayoutService,\r\n        private readonly menuService: MenuService,\r\n        public readonly renderer: Renderer2,\r\n        public readonly router: Router\r\n    ) {\r\n        this.isUserLoggedIn = this.authenticationService.isLoggedIn();\r\n        if (!this.isUserLoggedIn) {\r\n            this.router.navigate([Routes.login.navigations.default]);\r\n        }\r\n        else {\r\n            this.overlayMenuOpenSubscription = this.layoutService.overlayOpen$.subscribe(() => {\r\n                if (!this.menuOutsideClickListener) {\r\n                    this.menuOutsideClickListener = this.renderer.listen('document', 'click', event => {\r\n                        const isOutsideClicked = !(this.appSidebar.el.nativeElement.isSameNode(event.target) || this.appSidebar.el.nativeElement.contains(event.target)\r\n                            || this.appTopbar.menuButton.nativeElement.isSameNode(event.target) || this.appTopbar.menuButton.nativeElement.contains(event.target));\r\n\r\n                        if (isOutsideClicked) {\r\n                            this.hideMenu();\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (!this.profileMenuOutsideClickListener) {\r\n                    this.profileMenuOutsideClickListener = this.renderer.listen('document', 'click', event => {\r\n                        const isOutsideClicked = !(this.appTopbar.menu.nativeElement.isSameNode(event.target) || this.appTopbar.menu.nativeElement.contains(event.target)\r\n                            || this.appTopbar.topbarMenuButton.nativeElement.isSameNode(event.target) || this.appTopbar.topbarMenuButton.nativeElement.contains(event.target));\r\n\r\n                        if (isOutsideClicked) {\r\n                            this.hideProfileMenu();\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (this.layoutService.state.staticMenuMobileActive) {\r\n                    this.blockBodyScroll();\r\n                }\r\n            });\r\n\r\n            this.router.events.pipe(filter(event => event instanceof NavigationEnd))\r\n                .subscribe(() => {\r\n                    this.hideMenu();\r\n                    this.hideProfileMenu();\r\n                });\r\n\r\n            if (this.authenticationService.isFirstTimeLoggedIn) {\r\n                const firstMenuItemUserIsAuthorizedFor = this.menuService.getFirstMenuItemUserIsAuthorizedFor();\r\n                if (firstMenuItemUserIsAuthorizedFor?.Items && firstMenuItemUserIsAuthorizedFor.Items[0]?.RouterLink) {\r\n                    this.router.navigate(firstMenuItemUserIsAuthorizedFor!.Items![0].RouterLink!);\r\n                }\r\n\r\n                this.authenticationService.isFirstTimeLoggedIn = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    blockBodyScroll(): void {\r\n        if (document.body.classList) {\r\n            document.body.classList.add('blocked-scroll');\r\n        }\r\n        else {\r\n            document.body.className += ' blocked-scroll';\r\n        }\r\n    }\r\n\r\n    hideMenu() {\r\n        this.layoutService.state.overlayMenuActive = false;\r\n        this.layoutService.state.staticMenuMobileActive = false;\r\n        this.layoutService.state.menuHoverActive = false;\r\n        if (this.menuOutsideClickListener) {\r\n            this.menuOutsideClickListener();\r\n            this.menuOutsideClickListener = null;\r\n        }\r\n        this.unblockBodyScroll();\r\n    }\r\n\r\n    hideProfileMenu() {\r\n        this.layoutService.state.profileSidebarVisible = false;\r\n        if (this.profileMenuOutsideClickListener) {\r\n            this.profileMenuOutsideClickListener();\r\n            this.profileMenuOutsideClickListener = null;\r\n        }\r\n    }\r\n\r\n    unblockBodyScroll(): void {\r\n        if (document.body.classList) {\r\n            document.body.classList.remove('blocked-scroll');\r\n        }\r\n        else {\r\n            document.body.className = document.body.className.replace(new RegExp('(^|\\\\b)' +\r\n                'blocked-scroll'.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\r\n        }\r\n    }\r\n\r\n    get containerClass() {\r\n        return {\r\n            'layout-theme-light': this.layoutService.config.colorScheme === 'light',\r\n            'layout-theme-dark': this.layoutService.config.colorScheme === 'dark',\r\n            'layout-overlay': this.layoutService.config.menuMode === 'overlay',\r\n            'layout-static': this.layoutService.config.menuMode === 'static',\r\n            'layout-static-inactive': this.layoutService.state.staticMenuDesktopInactive && this.layoutService.config.menuMode === 'static',\r\n            'layout-overlay-active': this.layoutService.state.overlayMenuActive,\r\n            'layout-mobile-active': this.layoutService.state.staticMenuMobileActive,\r\n            'p-input-filled': this.layoutService.config.inputStyle === 'filled',\r\n            'p-ripple-disabled': !this.layoutService.config.ripple\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.overlayMenuOpenSubscription) {\r\n            this.overlayMenuOpenSubscription.unsubscribe();\r\n        }\r\n\r\n        if (this.menuOutsideClickListener) {\r\n            this.menuOutsideClickListener();\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { SidebarModule } from 'primeng/sidebar';\r\nimport { BadgeModule } from 'primeng/badge';\r\nimport { RadioButtonModule } from 'primeng/radiobutton';\r\nimport { InputSwitchModule } from 'primeng/inputswitch';\r\nimport { RippleModule } from 'primeng/ripple';\r\nimport { AppMenuComponent } from './app.menu.component';\r\nimport { AppMenuitemComponent } from './app.menuitem.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AppTopBarComponent } from './app.topbar.component';\r\nimport { AppFooterComponent } from './app.footer.component';\r\nimport { AppConfigModule } from './config/config.module';\r\nimport { AppSidebarComponent } from \"./app.sidebar.component\";\r\nimport { AppLayoutComponent } from \"./app.layout.component\";\r\nimport { MessagesModule } from 'primeng/messages';\r\n\r\n\r\n//primeng\r\nimport { BreadcrumbModule } from 'primeng/breadcrumb';\r\nimport { PanelMenuModule } from 'primeng/panelmenu';\r\nimport { SplitButtonModule } from 'primeng/splitbutton';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppFooterComponent,\r\n        AppLayoutComponent,\r\n        AppMenuComponent,\r\n        AppMenuitemComponent,\r\n        AppSidebarComponent,\r\n        AppTopBarComponent,\r\n    ],\r\n    imports: [\r\n        AppConfigModule,\r\n        BadgeModule,\r\n        BrowserAnimationsModule,\r\n        BrowserModule,\r\n        FormsModule,\r\n        HttpClientModule,\r\n        InputSwitchModule,\r\n        InputTextModule,\r\n        RadioButtonModule,\r\n        RippleModule,\r\n        RouterModule,\r\n        SidebarModule,\r\n        //primeng\r\n        BreadcrumbModule,\r\n        MessagesModule,\r\n        PanelMenuModule,\r\n        SplitButtonModule,\r\n    ],\r\n    exports: [AppLayoutComponent]\r\n})\r\nexport class AppLayoutModule { }\r\n","import { OnInit } from '@angular/core';\r\nimport { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Menu } from '../interfaces/ui-models';\r\nimport { LayoutService } from './services/app.layout.service';\r\nimport { AuthorizationService } from '../services/authorization/authorization.service';\r\nimport { MenuService } from '../services/layout/menu.service';\r\n\r\n@Component({\r\n    selector: 'app-menu',\r\n    templateUrl: './app.menu.component.html'\r\n})\r\nexport class AppMenuComponent implements OnInit {\r\n\r\n    model: any[] = [];\r\n\r\n    constructor(public layoutService: LayoutService,\r\n        private router: Router,\r\n        private menuService: MenuService,\r\n        private authorizationService: AuthorizationService,\r\n        public translate: TranslateService) {\r\n\r\n        this.buildMenu();\r\n        this.router.events.forEach(() => {\r\n            this.buildMenu();\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    public buildMenu() {\r\n        this.authorizationService.decodeTokenAndSetData();\r\n        this.model = [];\r\n        const menu = this.menuService.getMenu();\r\n        menu.forEach(menu => this.appendMenu(menu));\r\n        this.model = [...this.model];\r\n    }\r\n\r\n    private appendMenu(menu: Menu) {\r\n        if (!this.model)\r\n            return;\r\n\r\n        const menuItemsCurrentUserIsAuthorizedFor = menu.Items!.filter(item => this.isLoggedUserAuthorizedForMenu(item.Permissions!));\r\n        const menuItems: { label: string; icon: string | undefined; routerLink: string[] | undefined; }[] = [];\r\n\r\n        menuItemsCurrentUserIsAuthorizedFor.forEach(m => menuItems.push({\r\n            label: this.translate.instant(m.Label),\r\n            icon: m.Icon,\r\n            routerLink: m.RouterLink\r\n        }));\r\n\r\n        this.model.push({\r\n            label: this.translate.instant(menu.Label),\r\n            items: menuItems\r\n        });\r\n    }\r\n\r\n    private isLoggedUserAuthorizedForMenu(permissions: number[]): boolean {\r\n        return permissions.some(permission => this.authorizationService.isAuthorized([permission]));\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { MenuChangeEvent } from './api/menuchangeevent';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MenuService {\r\n\r\n    private menuSource = new Subject<MenuChangeEvent>();\r\n    private resetSource = new Subject();\r\n\r\n    menuSource$ = this.menuSource.asObservable();\r\n    resetSource$ = this.resetSource.asObservable();\r\n\r\n    onMenuStateChange(event: MenuChangeEvent) {\r\n        this.menuSource.next(event);\r\n    }\r\n\r\n    reset() {\r\n        this.resetSource.next(true);\r\n    }\r\n}\r\n","import { ChangeDetectorRef, Component, Host, HostBinding, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { Subscription } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { MenuService } from './app.menu.service';\r\nimport { LayoutService } from './services/app.layout.service';\r\n\r\n@Component({\r\n    // eslint-disable-next-line @angular-eslint/component-selector\r\n    selector: '[app-menuitem]',\r\n    template: `\r\n\t\t<ng-container>\r\n            <div *ngIf=\"root && item.visible !== false\" class=\"layout-menuitem-root-text\">{{item.label}}</div>\r\n\t\t\t<a *ngIf=\"(!item.routerLink || item.items) && item.visible !== false\" [attr.href]=\"item.url\" (click)=\"itemClick($event)\"\r\n\t\t\t   [ngClass]=\"item.class\" [attr.target]=\"item.target\" tabindex=\"0\" pRipple>\r\n\t\t\t\t<i [ngClass]=\"item.icon\" class=\"layout-menuitem-icon\"></i>\r\n\t\t\t\t<span class=\"layout-menuitem-text\">{{item.label}}</span>\r\n\t\t\t\t<i class=\"pi pi-fw pi-angle-down layout-submenu-toggler\" *ngIf=\"item.items\"></i>\r\n\t\t\t</a>\r\n\t\t\t<a *ngIf=\"(item.routerLink && !item.items) && item.visible !== false\" (click)=\"itemClick($event)\" [ngClass]=\"item.class\" \r\n\t\t\t   [routerLink]=\"item.routerLink\" routerLinkActive=\"active-route\" [routerLinkActiveOptions]=\"item.routerLinkActiveOptions||{ paths: 'exact', queryParams: 'ignored', matrixParams: 'ignored', fragment: 'ignored' }\"\r\n               [fragment]=\"item.fragment\" [queryParamsHandling]=\"item.queryParamsHandling\" [preserveFragment]=\"item.preserveFragment\" \r\n               [skipLocationChange]=\"item.skipLocationChange\" [replaceUrl]=\"item.replaceUrl\" [state]=\"item.state\" [queryParams]=\"item.queryParams\"\r\n               [attr.target]=\"item.target\" tabindex=\"0\" pRipple>\r\n\t\t\t\t<i [ngClass]=\"item.icon\" class=\"layout-menuitem-icon\"></i>\r\n\t\t\t\t<span class=\"layout-menuitem-text\">{{item.label}}</span>\r\n\t\t\t\t<i class=\"pi pi-fw pi-angle-down layout-submenu-toggler\" *ngIf=\"item.items\"></i>\r\n\t\t\t</a>\r\n\r\n\t\t\t<ul *ngIf=\"item.items && item.visible !== false\" [@children]=\"submenuAnimation\">\r\n\t\t\t\t<ng-template ngFor let-child let-i=\"index\" [ngForOf]=\"item.items\">\r\n\t\t\t\t\t<li app-menuitem [item]=\"child\" [index]=\"i\" [parentKey]=\"key\" [class]=\"child.badgeClass\"></li>\r\n\t\t\t\t</ng-template>\r\n\t\t\t</ul>\r\n\t\t</ng-container>\r\n    `,\r\n    animations: [\r\n        trigger('children', [\r\n            state('collapsed', style({\r\n                height: '0'\r\n            })),\r\n            state('expanded', style({\r\n                height: '*'\r\n            })),\r\n            transition('collapsed <=> expanded', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))\r\n        ])\r\n    ]\r\n})\r\nexport class AppMenuitemComponent implements OnInit, OnDestroy {\r\n\r\n    @Input() item: any;\r\n\r\n    @Input() index!: number;\r\n\r\n    @Input() @HostBinding('class.layout-root-menuitem') root!: boolean;\r\n\r\n    @Input() parentKey!: string;\r\n\r\n    active = false;\r\n\r\n    menuSourceSubscription: Subscription;\r\n\r\n    menuResetSubscription: Subscription;\r\n\r\n    key: string = \"\";\r\n\r\n    constructor(public layoutService: LayoutService, private cd: ChangeDetectorRef, public router: Router, private menuService: MenuService) {\r\n        this.menuSourceSubscription = this.menuService.menuSource$.subscribe(value => {\r\n            Promise.resolve(null).then(() => {\r\n                if (value.routeEvent) {\r\n                    this.active = (value.key === this.key || value.key.startsWith(this.key + '-')) ? true : false;\r\n                }\r\n                else {\r\n                    if (value.key !== this.key && !value.key.startsWith(this.key + '-')) {\r\n                        this.active = false;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        this.menuResetSubscription = this.menuService.resetSource$.subscribe(() => {\r\n            this.active = false;\r\n        });\r\n\r\n        this.router.events.pipe(filter(event => event instanceof NavigationEnd))\r\n            .subscribe(params => {\r\n                if (this.item.routerLink) {\r\n                    this.updateActiveStateFromRoute();\r\n                }\r\n            });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.key = this.parentKey ? this.parentKey + '-' + this.index : String(this.index);\r\n\r\n        if (this.item.routerLink) {\r\n            this.updateActiveStateFromRoute();\r\n        }\r\n    }\r\n\r\n    updateActiveStateFromRoute() {\r\n        let activeRoute = this.router.isActive(this.item.routerLink[0], { paths: 'exact', queryParams: 'ignored', matrixParams: 'ignored', fragment: 'ignored' });\r\n\r\n        if (activeRoute) {\r\n            this.menuService.onMenuStateChange({ key: this.key, routeEvent: true });\r\n        }\r\n    }\r\n\r\n    itemClick(event: Event) {\r\n        // avoid processing disabled items\r\n        if (this.item.disabled) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // execute command\r\n        if (this.item.command) {\r\n            this.item.command({ originalEvent: event, item: this.item });\r\n        }\r\n\r\n        // toggle active state\r\n        if (this.item.items) {\r\n            this.active = !this.active;\r\n        }\r\n\r\n        this.menuService.onMenuStateChange({ key: this.key });\r\n    }\r\n\r\n    get submenuAnimation() {\r\n        return this.root ? 'expanded' : (this.active ? 'expanded' : 'collapsed');\r\n    }\r\n\r\n    @HostBinding('class.active-menuitem') \r\n    get activeClass() {\r\n        return this.active && !this.root;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.menuSourceSubscription) {\r\n            this.menuSourceSubscription.unsubscribe();\r\n        }\r\n\r\n        if (this.menuResetSubscription) {\r\n            this.menuResetSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n","import { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { LayoutService } from \"./services/app.layout.service\";\r\nimport { AppMenuComponent } from './app.menu.component';\r\n\r\n@Component({\r\n    selector: 'app-sidebar',\r\n    templateUrl: './app.sidebar.component.html'\r\n})\r\nexport class AppSidebarComponent {\r\n\r\n    @ViewChild('appMenu') appMenu: AppMenuComponent;\r\n\r\n    constructor(public layoutService: LayoutService, public el: ElementRef) { }\r\n}\r\n\r\n","import { Component, ElementRef, Input, ViewChild } from '@angular/core';\r\nimport { MenuItem, PrimeNGConfig, SelectItem } from 'primeng/api';\r\nimport { AppComponent } from '../app.component';\r\nimport { LayoutService } from \"./services/app.layout.service\";\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AuthenticationService } from '../services/authentication/authentication.service';\r\nimport { ActivatedRoute, NavigationEnd, Router, RouterEvent, Scroll } from '@angular/router';\r\nimport { SelectOptionsService } from '../services/select-options/select-options.service';\r\nimport { LanguageCodeEnum } from '../enums/language-code-enum';\r\nimport { Title } from \"@angular/platform-browser\";\r\nimport { AppSidebarComponent } from './app.sidebar.component';\r\nimport { AuthorizationService } from '../services/authorization/authorization.service';\r\nimport { UserChangeLanguageModel } from '../interfaces/user';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ApiRoutes } from '../api-routes';\r\nimport { ApiResultEnum } from '../enums/api-result-enum';\r\nimport { concatMap, filter } from 'rxjs';\r\nimport { StringBuilder } from '../tools/stringBuilder';\r\nimport { Routes } from '../routes';\r\n\r\n@Component({\r\n    selector: 'app-topbar',\r\n    templateUrl: './app.topbar.component.html'\r\n})\r\nexport class AppTopBarComponent {\r\n\r\n    public readonly home = { icon: 'pi pi-home', url: 'home' };\r\n\r\n    private languageId: number;\r\n\r\n    breadcrumbItems: MenuItem[] = [];\r\n    userMenuItems: MenuItem[] = [];\r\n\r\n    @Input('appSidebar') appSidebar!: AppSidebarComponent;\r\n\r\n    @ViewChild('menubutton') menuButton!: ElementRef;\r\n    @ViewChild('topbarmenubutton') topbarMenuButton!: ElementRef;\r\n    @ViewChild('topbarmenu') menu!: ElementRef;\r\n\r\n    constructor(\r\n        private activatedRoute: ActivatedRoute,\r\n        public app: AppComponent,\r\n        public authenticationService: AuthenticationService,\r\n        private config: PrimeNGConfig,\r\n        private httpClient: HttpClient,\r\n        public layoutService: LayoutService,\r\n        private router: Router,\r\n        private selectOptionsService: SelectOptionsService,\r\n        private titleService: Title,\r\n        public translate: TranslateService) {\r\n\r\n        this.updateWithLanguageOnInit();\r\n    }\r\n\r\n    public onProfileButtonClick() {\r\n        this.router.navigate([Routes.users.navigations.profile]);\r\n    }\r\n\r\n    public setTheme(withDarkMode: boolean) {\r\n        const theme = withDarkMode ? 'arya-blue' : 'saga-orange';\r\n        const colorScheme = withDarkMode ? 'dark' : 'light';\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const newHref = themeLink.getAttribute('href')!.replace(this.layoutService.config.theme, theme);\r\n\r\n        this.layoutService.config.colorScheme\r\n        this.replaceThemeLink(newHref, () => {\r\n            this.layoutService.config.theme = theme;\r\n            this.layoutService.config.colorScheme = colorScheme;\r\n            this.layoutService.onConfigUpdate();\r\n        });\r\n    }\r\n\r\n    private createBreadcrumbs(route: ActivatedRoute, urlBuilder = new StringBuilder(), breadcrumbs: MenuItem[] = []): MenuItem[] {\r\n        const children: ActivatedRoute[] = route.children;\r\n\r\n        if (children.length === 0)\r\n            return breadcrumbs;\r\n\r\n        for (const child of children) {\r\n            const routeURL: string = child.snapshot.url.map(segment => segment.path).join('/');\r\n\r\n            if (routeURL !== '') {\r\n                urlBuilder.append(`/${routeURL}`);\r\n            }\r\n\r\n            const label = child.snapshot.data['breadcrumb'];\r\n\r\n            if (label) {\r\n                breadcrumbs.push(<MenuItem>{ label: label, url: urlBuilder.toString(), target: \"_self\" });\r\n            }\r\n\r\n            return this.createBreadcrumbs(child, urlBuilder, breadcrumbs);\r\n        }\r\n\r\n        return breadcrumbs;\r\n    }\r\n\r\n    private getLanguageCodeById(id: number): string {\r\n        switch (id) {\r\n            case LanguageCodeEnum.Pl.valueOf():\r\n                return \"pl\";\r\n            case LanguageCodeEnum.En.valueOf():\r\n                return \"en\";\r\n            default:\r\n                return \"---\";\r\n        }\r\n    }\r\n\r\n    private initializeLayout() {\r\n        this.titleService.setTitle(this.translate.instant('AppName'));\r\n        this.appSidebar?.appMenu?.buildMenu();\r\n    }\r\n\r\n    private initializeUserMenu(languages: SelectItem[]) {\r\n        this.userMenuItems = [\r\n            {\r\n                label: this.translate.instant('Language.Plural'),\r\n                icon: 'fa fa-solid fa-language',\r\n                items: languages.map(l => <MenuItem>{ label: l.label, command: () => this.onLanguageChange(l.value) })\r\n            },\r\n            { label: this.translate.instant('General.LogOut'), icon: 'fa fa-power-off', command: () => this.logout() }\r\n        ];\r\n    }\r\n\r\n    private logout(): void {\r\n        if (this.authenticationService.logout()) {\r\n            this.router.navigate([Routes.login.navigations.default]);\r\n        }\r\n    }\r\n\r\n    private onLanguageChange(id: number) {\r\n        const currentUserId = AuthorizationService.currentUserId;\r\n\r\n        if (!currentUserId)\r\n            return;\r\n\r\n        this.languageId = Number(id);\r\n\r\n        localStorage.setItem('languageId', this.languageId.toString());\r\n\r\n        const model = <UserChangeLanguageModel>{\r\n            Id: currentUserId,\r\n            LanguageId: this.languageId\r\n        };\r\n\r\n        this.httpClient\r\n            .put<string>(ApiRoutes.user.changeLanguage, model)\r\n            .subscribe(\r\n                result => {\r\n                    if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n                        this.updateWithLanguageOnLanguageChange();\r\n                    }\r\n                }\r\n            );\r\n    }\r\n\r\n    private updateBreadcrumbItemsWithLanguage() {\r\n        this.breadcrumbItems = this.breadcrumbItems.map(breadcrumbItem => ({ ...breadcrumbItem, label: this.translate.instant(breadcrumbItem.label!) }));\r\n    }\r\n\r\n    private updateWithLanguageOnInit() {\r\n        const userLanguageId = AuthorizationService.currentUserLanguageId;\r\n\r\n        if (userLanguageId) {\r\n            this.languageId = Number(userLanguageId);\r\n        }\r\n        else {\r\n            const languageIdFromStorage = localStorage.getItem('languageId');\r\n\r\n            if (languageIdFromStorage) {\r\n                this.languageId = Number(languageIdFromStorage);\r\n            }\r\n        }\r\n\r\n        if (this.languageId) {\r\n            const language = this.getLanguageCodeById(this.languageId);\r\n\r\n            this.router.events\r\n                .pipe(filter(event => event instanceof Scroll || event instanceof NavigationEnd))\r\n                .pipe(\r\n                    concatMap(() => {\r\n                        this.breadcrumbItems = this.createBreadcrumbs(this.activatedRoute.root);\r\n\r\n                        return this.translate.use(language);\r\n                    }),\r\n                    concatMap(() => {\r\n                        this.initializeLayout();\r\n\r\n                        return this.translate.get('primeng');\r\n                    }),\r\n                    concatMap(translation => {\r\n                        this.config.setTranslation(translation);\r\n\r\n                        return this.selectOptionsService.getLanguages();\r\n                    }))\r\n                .subscribe(languages => {\r\n                    this.initializeUserMenu(languages);\r\n                    this.updateBreadcrumbItemsWithLanguage();\r\n                });\r\n        }\r\n    }\r\n\r\n    private updateWithLanguageOnLanguageChange() {\r\n        const language = this.getLanguageCodeById(this.languageId);\r\n\r\n        this.translate\r\n            .use(language)\r\n            .pipe(\r\n                concatMap(() => {\r\n                    this.initializeLayout();\r\n\r\n                    return this.translate.get('primeng');\r\n                }),\r\n                concatMap(translation => {\r\n                    this.config.setTranslation(translation);\r\n\r\n                    return this.selectOptionsService.getLanguages();\r\n                }))\r\n            .subscribe(languages => {\r\n                this.initializeUserMenu(languages);\r\n                this.updateBreadcrumbItemsWithLanguage();\r\n            });\r\n    }\r\n\r\n    private replaceThemeLink(href: string, onComplete: Function) {\r\n        const id = 'theme-css';\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const cloneLinkElement = <HTMLLinkElement>themeLink.cloneNode(true);\r\n\r\n        cloneLinkElement.setAttribute('href', href);\r\n        cloneLinkElement.setAttribute('id', id + '-clone');\r\n\r\n        themeLink.parentNode!.insertBefore(cloneLinkElement, themeLink.nextSibling);\r\n\r\n        cloneLinkElement.addEventListener('load', () => {\r\n            themeLink.remove();\r\n            cloneLinkElement.setAttribute('id', id);\r\n            onComplete();\r\n        });\r\n    }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { LayoutService } from \"../services/app.layout.service\";\r\nimport { MenuService } from \"../app.menu.service\";\r\n\r\n@Component({\r\n    selector: 'app-config',\r\n    templateUrl: './app.config.component.html'\r\n})\r\nexport class AppConfigComponent {\r\n\r\n    @Input() minimal: boolean = false;\r\n\r\n    scales: number[] = [12, 13, 14, 15, 16];\r\n\r\n    constructor(public layoutService: LayoutService, public menuService: MenuService) { }\r\n\r\n    get visible(): boolean {\r\n        return this.layoutService.state.configSidebarVisible;\r\n    }\r\n\r\n    set visible(_val: boolean) {\r\n        this.layoutService.state.configSidebarVisible = _val;\r\n    }\r\n\r\n    get scale(): number {\r\n        return this.layoutService.config.scale;\r\n    }\r\n\r\n    set scale(_val: number) {\r\n        this.layoutService.config.scale = _val;\r\n    }\r\n\r\n    get menuMode(): string {\r\n        return this.layoutService.config.menuMode;\r\n    }\r\n\r\n    set menuMode(_val: string) {\r\n        this.layoutService.config.menuMode = _val;\r\n    }\r\n\r\n    get inputStyle(): string {\r\n        return this.layoutService.config.inputStyle;\r\n    }\r\n\r\n    set inputStyle(_val: string) {\r\n        this.layoutService.config.inputStyle = _val;\r\n    }\r\n\r\n    get ripple(): boolean {\r\n        return this.layoutService.config.ripple;\r\n    }\r\n\r\n    set ripple(_val: boolean) {\r\n        this.layoutService.config.ripple = _val;\r\n    }\r\n\r\n    onConfigButtonClick() {\r\n        this.layoutService.showConfigSidebar();\r\n    }\r\n\r\n    changeTheme(theme: string, colorScheme: string) {\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const newHref = themeLink.getAttribute('href')!.replace(this.layoutService.config.theme, theme);\r\n        this.layoutService.config.colorScheme\r\n        this.replaceThemeLink(newHref, () => {\r\n            this.layoutService.config.theme = theme;\r\n            this.layoutService.config.colorScheme = colorScheme;\r\n            this.layoutService.onConfigUpdate();\r\n        });\r\n    }\r\n\r\n    replaceThemeLink(href: string, onComplete: Function) {\r\n        const id = 'theme-css';\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const cloneLinkElement = <HTMLLinkElement>themeLink.cloneNode(true);\r\n\r\n        cloneLinkElement.setAttribute('href', href);\r\n        cloneLinkElement.setAttribute('id', id + '-clone');\r\n\r\n        themeLink.parentNode!.insertBefore(cloneLinkElement, themeLink.nextSibling);\r\n\r\n        cloneLinkElement.addEventListener('load', () => {\r\n            themeLink.remove();\r\n            cloneLinkElement.setAttribute('id', id);\r\n            onComplete();\r\n        });\r\n    }\r\n\r\n    decrementScale() {\r\n        this.scale--;\r\n        this.applyScale();\r\n    }\r\n\r\n    incrementScale() {\r\n        this.scale++;\r\n        this.applyScale();\r\n    }\r\n\r\n    applyScale() {\r\n        document.documentElement.style.fontSize = this.scale + 'px';\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SidebarModule } from 'primeng/sidebar';\r\nimport { RadioButtonModule } from 'primeng/radiobutton';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { InputSwitchModule } from 'primeng/inputswitch';\r\nimport { AppConfigComponent } from './app.config.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        ButtonModule,\r\n        CommonModule,\r\n        FormsModule,\r\n        InputSwitchModule,\r\n        RadioButtonModule,\r\n        SidebarModule,\r\n    ],\r\n    declarations: [\r\n        AppConfigComponent\r\n    ],\r\n    exports: [\r\n        AppConfigComponent\r\n    ]\r\n})\r\nexport class AppConfigModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nexport interface AppConfig {\r\n    inputStyle: string;\r\n    colorScheme: string;\r\n    theme: string;\r\n    ripple: boolean;\r\n    menuMode: string;\r\n    scale: number;\r\n}\r\n\r\ninterface LayoutState {\r\n    staticMenuDesktopInactive: boolean;\r\n    overlayMenuActive: boolean;\r\n    profileSidebarVisible: boolean;\r\n    configSidebarVisible: boolean;\r\n    staticMenuMobileActive: boolean;\r\n    menuHoverActive: boolean;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LayoutService {\r\n\r\n    config: AppConfig = {\r\n        ripple: false,\r\n        inputStyle: 'outlined',\r\n        menuMode: 'static',\r\n        colorScheme: 'light',\r\n        theme: 'arya-blue',\r\n        scale: 14,\r\n    };\r\n\r\n    state: LayoutState = {\r\n        staticMenuDesktopInactive: false,\r\n        overlayMenuActive: false,\r\n        profileSidebarVisible: false,\r\n        configSidebarVisible: false,\r\n        staticMenuMobileActive: false,\r\n        menuHoverActive: false\r\n    };\r\n\r\n    private configUpdate = new Subject<AppConfig>();\r\n\r\n    private overlayOpen = new Subject<any>();\r\n\r\n    configUpdate$ = this.configUpdate.asObservable();\r\n\r\n    overlayOpen$ = this.overlayOpen.asObservable();\r\n\r\n    onMenuToggle() {\r\n        if (this.isOverlay()) {\r\n            this.state.overlayMenuActive = !this.state.overlayMenuActive;\r\n            if (this.state.overlayMenuActive) {\r\n                this.overlayOpen.next(null);\r\n            }\r\n        }\r\n\r\n        if (this.isDesktop()) {\r\n            this.state.staticMenuDesktopInactive = !this.state.staticMenuDesktopInactive;\r\n        }\r\n        else {\r\n            this.state.staticMenuMobileActive = !this.state.staticMenuMobileActive;\r\n\r\n            if (this.state.staticMenuMobileActive) {\r\n                this.overlayOpen.next(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    showProfileSidebar() {\r\n        this.state.profileSidebarVisible = !this.state.profileSidebarVisible;\r\n        if (this.state.profileSidebarVisible) {\r\n            this.overlayOpen.next(null);\r\n        }\r\n    }\r\n\r\n    showConfigSidebar() {\r\n        this.state.configSidebarVisible = true;\r\n    }\r\n\r\n    isOverlay() {\r\n        return this.config.menuMode === 'overlay';\r\n    }\r\n\r\n    isDesktop() {\r\n        return window.innerWidth > 991;\r\n    }\r\n\r\n    isMobile() {\r\n        return !this.isDesktop();\r\n    }\r\n\r\n    onConfigUpdate() {\r\n        this.configUpdate.next(this.config);\r\n    }\r\n}\r\n","export const Routes = {\r\n  home: {\r\n    breadcrumbs: {\r\n      default: 'General.Dashboard'\r\n    },\r\n    navigations: {\r\n      default: 'home'\r\n    },\r\n    paths: {\r\n      default: 'home'\r\n    }\r\n  },\r\n  login: {\r\n    navigations: {\r\n      default: 'login'\r\n    },\r\n    paths: {\r\n      default: 'login'\r\n    }\r\n  },\r\n  clientRepresentatives: {\r\n    breadcrumbs: {\r\n      creation: 'ClientRepresentative.Create',\r\n      edition: 'ClientRepresentative.Edit',\r\n      list: 'ClientRepresentative.List'\r\n    },\r\n    navigations: {\r\n      creation: 'home/client-representatives/create',\r\n      edition: (id: string) => `home/client-representatives/edit/${id}`,\r\n      list: 'home/client-representatives'\r\n    },\r\n    paths: {\r\n      create: 'create',\r\n      edit: 'edit/:id',\r\n      list: 'client-representatives'\r\n    }\r\n  },\r\n  clients: {\r\n    breadcrumbs: {\r\n      creation: 'Client.Create',\r\n      edition: 'Client.Edit',\r\n      list: 'Client.List'\r\n    },\r\n    navigations: {\r\n      creation: 'home/clients/create',\r\n      edition: (id: string) => `home/clients/edit/${id}`,\r\n      list: 'home/clients'\r\n    },\r\n    paths: {\r\n      create: 'create',\r\n      edit: 'edit/:id',\r\n      list: 'clients'\r\n    },\r\n    tabs: {\r\n      general: {\r\n        index: 0\r\n      },\r\n      representatives: {\r\n        index: 1\r\n      },\r\n      audits: {\r\n        index: 2\r\n      }\r\n    }\r\n  },\r\n  equipments: {\r\n    breadcrumbs: {\r\n      creation: 'Equipment.Create',\r\n      edition: 'Equipment.Edit',\r\n      list: 'Equipment.List'\r\n    },\r\n    navigations: {\r\n      creation: 'home/equipments/create',\r\n      edition: (id: string) => `home/equipments/edit/${id}`,\r\n      list: `home/equipments`\r\n    },\r\n    paths: {\r\n      create: 'create',\r\n      edit: 'edit/:id',\r\n      list: 'equipments'\r\n    }\r\n  },\r\n  manufacturers: {\r\n    breadcrumbs: {\r\n      creation: 'Manufacturer.Create',\r\n      edition: 'Manufacturer.Edit',\r\n      list: 'Manufacturer.List'\r\n    },\r\n    navigations: {\r\n      creation: 'home/manufacturers/create',\r\n      edition: (id: string) => `home/manufacturers/edit/${id}`,\r\n      list: `home/manufacturers`\r\n    },\r\n    paths: {\r\n      create: 'create',\r\n      edit: 'edit/:id',\r\n      list: 'manufacturers'\r\n    }\r\n  },\r\n  userRoles: {\r\n    breadcrumbs: {\r\n      creation: 'UserRole.Create',\r\n      edition: 'UserRole.Edit',\r\n      list: 'UserRole.List'\r\n    },\r\n    navigations: {\r\n      creation: 'home/user-roles/create',\r\n      edition: (id: number) => `home/user-roles/edit/${id}`,\r\n      list: 'home/user-roles'\r\n    },\r\n    paths: {\r\n      create: 'create',\r\n      edit: 'edit/:id',\r\n      list: 'user-roles'\r\n    }\r\n  },\r\n  users: {\r\n    breadcrumbs: {\r\n      creation: 'User.Create',\r\n      edition: 'User.Edit',\r\n      list: 'User.List',\r\n      profile: 'User.Profile',\r\n    },\r\n    navigations: {\r\n      creation: 'home/users/create',\r\n      edition: (id: string) => `home/users/edit/${id}`,\r\n      list: 'home/users',\r\n      profile: 'home/profile'\r\n    },\r\n    paths: {\r\n      create: 'create',\r\n      edit: 'edit/:id',\r\n      list: 'users',\r\n      profile: 'profile',\r\n    }\r\n  }\r\n}","import { AuthorizationService } from '../authorization/authorization.service';\r\nimport { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Router } from '@angular/router';\r\nimport { Routes } from '../../routes';\r\n\r\n@Injectable()\r\nexport class AuthGuard {\r\n\r\n  constructor(\r\n    private readonly authorizationService: AuthorizationService,\r\n    private readonly router: Router) {\r\n  }\r\n\r\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n    return this.getCanActivateResult(false, next);\r\n  }\r\n\r\n  canActivateChild(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n    return this.getCanActivateResult(true, next);\r\n  }\r\n\r\n  private getCanActivateResult(checkForChild: boolean, next: ActivatedRouteSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n    const allowedPermissions = next.data['allowedPermissions'];\r\n    const isAuthorized = this.authorizationService.isAuthorized(allowedPermissions);\r\n\r\n    if (!isAuthorized) {\r\n      if (checkForChild)\r\n        this.authorizationService.resetAllData();\r\n      else\r\n        this.authorizationService.decodeTokenAndSetData();\r\n\r\n      this.router.navigate([Routes.login.navigations.default]);\r\n    }\r\n\r\n    this.authorizationService.decodeTokenAndSetData();\r\n\r\n    return isAuthorized;\r\n  }\r\n}","import { AuthorizationService } from '../authorization/authorization.service';\r\nimport { SignInModel } from '../../interfaces/authentication';\r\nimport { Inject, Injectable, PLATFORM_ID } from \"@angular/core\";\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { environment } from \"../../../environments/environment\";\r\nimport { TokenResponse } from '../../interfaces/identity';\r\nimport { ApiRoutes } from '../../api-routes';\r\nimport { ApiResultEnum } from '../../enums/api-result-enum';\r\n\r\n@Injectable()\r\nexport class AuthenticationService {\r\n\r\n    isLoggedIn$: Observable<boolean>;\r\n    isFirstTimeLoggedIn = false;\r\n\r\n    constructor(\r\n        private readonly authorizationService: AuthorizationService,\r\n        private readonly httpClient: HttpClient,\r\n        @Inject(PLATFORM_ID) private platformId: any) {\r\n    }\r\n\r\n    getAuth(): TokenResponse | null {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            const key = localStorage.getItem(environment.auth_key);\r\n\r\n            if (key) {\r\n                return JSON.parse(key);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    isLoggedIn(): boolean {\r\n        return isPlatformBrowser(this.platformId) && localStorage.getItem(environment.auth_key) != null;\r\n    }\r\n\r\n    // performs the login\r\n    login(authData: SignInModel): Observable<string> {\r\n        const data = {\r\n            UserName: authData.Login,\r\n            Password: authData.Password,\r\n            // required when signing up with username/password\r\n            GrantType: \"password\",\r\n            // space-separated list of scopes for which the token is issued\r\n            Scope: \"offline_access profile email\"\r\n        };\r\n\r\n        return this.httpClient\r\n            .post<TokenResponse>(ApiRoutes.identity.authenticate, data)\r\n            .pipe(\r\n                map(res => {\r\n                    const token = res && res.Token;\r\n\r\n                    if (res.Code == 165) {\r\n                        return ApiResultEnum[ApiResultEnum.NotActive];\r\n                    }\r\n                    else if (res.Code !== 200) {\r\n                        return ApiResultEnum[ApiResultEnum.Error];\r\n                    }\r\n\r\n                    if (token) {\r\n                        // store username and jwt token\r\n                        this.setAuth(res);\r\n                        this.authorizationService.decodeTokenAndSetData();\r\n\r\n                        return ApiResultEnum[ApiResultEnum.OK];\r\n                    }\r\n\r\n                    return \"Error\";\r\n                }),\r\n                catchError(error => {\r\n                    console.log(error);\r\n                    return new Observable<any>(error);\r\n                }));\r\n    }\r\n\r\n    logout() {\r\n        this.setAuth(null);\r\n        this.authorizationService.resetAllData();\r\n\r\n        return true;\r\n    }\r\n\r\n    refreshToken(): Observable<string> {\r\n        const tokenData = JSON.parse(localStorage.getItem(environment.auth_key) || '') as TokenResponse;\r\n\r\n        const data = {\r\n            Token: tokenData.Token,\r\n            RefreshToken: tokenData.RefreshToken\r\n        };\r\n\r\n        return this.httpClient\r\n            .post<TokenResponse>(ApiRoutes.identity.refreshToken, data)\r\n            .pipe(\r\n                map(res => {\r\n                    this.setAuth(res);\r\n                    this.authorizationService.decodeTokenAndSetData();\r\n\r\n                    return ApiResultEnum[ApiResultEnum.OK];\r\n                }),\r\n                catchError(error => {\r\n                    console.log(error);\r\n\r\n                    return new Observable<any>(error);\r\n                }));\r\n    }\r\n\r\n    setAuth(auth: TokenResponse | null): boolean {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            if (auth) {\r\n                localStorage.setItem(environment.auth_key, JSON.stringify(auth));\r\n\r\n                this.isLoggedIn$ = of(true);\r\n            }\r\n            else {\r\n                localStorage.removeItem(environment.auth_key);\r\n\r\n                this.isLoggedIn$ = of(false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthorizationService {\r\n  private static _currentUserId?: string;\r\n  private static _currentUserName?: string;\r\n  private static _currentUserLanguageId?: number;\r\n  private static _currentUserPermissions?: number[];\r\n  private static _currentUserRoleId?: number;\r\n  private static _currentUserRoleName?: string;\r\n  private static _currentUserRoles?: string[];\r\n\r\n  //property let to use static properties.\r\n  AS = AuthorizationService;\r\n\r\n  public static get currentUserId(): string | undefined {\r\n    return this._currentUserId;\r\n  }\r\n\r\n  public static get currentUserName(): string | undefined {\r\n    return this._currentUserName;\r\n  }\r\n\r\n  public static get currentUserRoles(): string[] | undefined {\r\n    return this._currentUserRoles;\r\n  }\r\n\r\n  public static get currentUserLanguageId(): number | undefined {\r\n    return this._currentUserLanguageId;\r\n  }\r\n\r\n  public static get currentUserPermissions(): number[] | undefined {\r\n    return this._currentUserPermissions;\r\n  }\r\n\r\n  public static get currentUserRoleId(): number | undefined {\r\n    return this._currentUserRoleId;\r\n  }\r\n\r\n  public static get currentUserRoleName(): string | undefined {\r\n    return this._currentUserRoleName;\r\n  }\r\n\r\n  constructor(private jwtHelperService: JwtHelperService) {\r\n  }\r\n\r\n  decodeToken() {\r\n    const token = localStorage.getItem(environment.auth_key);\r\n\r\n    return this.jwtHelperService.decodeToken(token || '');\r\n  }\r\n\r\n  decodeTokenAndSetData() {\r\n    const decodedToken = this.decodeToken();\r\n\r\n    if (decodedToken) {\r\n      AuthorizationService._currentUserId = decodedToken['sub'];\r\n      AuthorizationService._currentUserName = decodedToken['given_name'];\r\n      AuthorizationService._currentUserLanguageId = decodedToken['userlanguageid'];\r\n      AuthorizationService._currentUserRoleId = decodedToken['userroleid'];\r\n      AuthorizationService._currentUserRoleName = decodedToken['userrolename'];\r\n      AuthorizationService._currentUserRoles = decodedToken['role'];\r\n      AuthorizationService._currentUserPermissions = [];\r\n\r\n      var currentUserPermissionsTextArray = (decodedToken['permissions'] as string).split(',');\r\n\r\n      currentUserPermissionsTextArray.forEach(item =>\r\n        AuthorizationService._currentUserPermissions?.push(Number(item))\r\n      );\r\n    }\r\n    else {\r\n      this.resetAllData();\r\n    }\r\n  }\r\n\r\n  isAuthorized(allowedPermissions: number[] | undefined): boolean {\r\n    if (allowedPermissions === undefined)\r\n      return false;\r\n    // check if the list of allowed permissions is empty, if empty, authorize the user to access the page\r\n    if (allowedPermissions == null || allowedPermissions.length === 0)\r\n      return true;\r\n\r\n    const decodedToken = this.decodeToken();\r\n    // check if it was decoded successfully, if not the token is not valid, deny access\r\n    if (!decodedToken)\r\n      return false;\r\n    // check if the user roles is in the list of allowed permissions, return true if allowed and false if not allowed\r\n    var permissions: number[] = [];\r\n    var permissionsTextArray = (decodedToken['permissions'] as string).split(',');\r\n\r\n    permissionsTextArray.forEach(item => permissions.push(Number(item)));\r\n\r\n    return allowedPermissions.some(r => permissions.includes(r));\r\n  }\r\n\r\n  resetAllData() {\r\n    AuthorizationService._currentUserId = undefined;\r\n    AuthorizationService._currentUserName = undefined;\r\n    AuthorizationService._currentUserLanguageId = undefined;\r\n    AuthorizationService._currentUserRoleId = undefined;\r\n    AuthorizationService._currentUserRoleName = undefined;\r\n    AuthorizationService._currentUserRoles = undefined;\r\n    AuthorizationService._currentUserPermissions = undefined;\r\n  }\r\n}\r\n","import { Component, Injectable } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { StringBuilder } from \"../../tools/stringBuilder\";\r\nimport { ErrorMessageTypeEnum } from \"../../enums/error-messag-type-enum\";\r\nimport { FormComponent } from \"src/app/components/abstract/forms/form\";\r\n\r\n@Injectable()\r\nexport class ErrorService {\r\n\r\n  private static readonly _idMessagePart = \"ID\";\r\n  private static readonly _maxLengthMessagePart = \"MAX\";\r\n  private static readonly _messageSeparator = \"|\";\r\n  private static readonly _messageInnerSeparator = \":\";\r\n  private static readonly _minLengthMessagePart = \"MIN\";\r\n  private static readonly _typeMessagePart = \"TYPE\";\r\n\r\n  private readonly errorMessage: ErrorMessage;\r\n  private readonly errorMessageBuilder: ErrorMessageBuilder;\r\n\r\n  constructor(private readonly translate: TranslateService) {\r\n    this.errorMessage = new ErrorMessage();\r\n    this.errorMessageBuilder = new ErrorMessageBuilder(translate, this.errorMessage);\r\n  }\r\n\r\n  public getDefaultErrorMessage() {\r\n    return this.translate.instant('General.Error.Global');\r\n  }\r\n\r\n  public getFirstErrorMessageKey(error: any) {\r\n    if (this.isValidErrorObject(error)) {\r\n      const errorObject = error.errors;\r\n      const firstErrorPropertyName = this.getFirstErrorName(errorObject);\r\n\r\n      if (!firstErrorPropertyName)\r\n        return;\r\n\r\n      const firstError: string | string[] = errorObject[firstErrorPropertyName];\r\n\r\n      if (!firstError)\r\n        return;\r\n\r\n      const splitError = this.getSplitError(firstError);\r\n\r\n      return splitError[0];\r\n    }\r\n    else {\r\n      return this.getDefaultErrorMessage();\r\n    }\r\n  }\r\n\r\n  public getFirstTranslatedErrorMessage(error: any) {\r\n\r\n    if (this.isValidErrorObject(error)) {\r\n      const errorObject = error.errors;\r\n      const firstErrorPropertyName = this.getFirstErrorName(errorObject);\r\n\r\n      if (!firstErrorPropertyName)\r\n        return;\r\n\r\n      const firstError: string | string[] = errorObject[firstErrorPropertyName];\r\n\r\n      if (!firstError)\r\n        return;\r\n\r\n      const splitError = this.getSplitError(firstError);\r\n      this.fillErrorMessageBasedOnError(splitError);\r\n\r\n      if (!this.errorMessage.hasRequiredPropertiesAssigned()) {\r\n        return this.getDefaultErrorMessage();\r\n      }\r\n\r\n      this.errorMessageBuilder.build();\r\n\r\n      return this.errorMessageBuilder.getMessage();\r\n    }\r\n    else {\r\n      return this.getDefaultErrorMessage();\r\n    }\r\n  }\r\n\r\n  private fillErrorMessageBasedOnError(error: string[]) {\r\n    for (const message of error) {\r\n      const splitMessage = message.split(ErrorService._messageInnerSeparator);\r\n\r\n      switch (splitMessage[0]) {\r\n        case ErrorService._idMessagePart:\r\n          this.errorMessage.id = splitMessage[1];\r\n          break;\r\n        case ErrorService._maxLengthMessagePart:\r\n          this.errorMessage.maxLength = splitMessage[1];\r\n          break;\r\n        case ErrorService._minLengthMessagePart:\r\n          this.errorMessage.minLength = splitMessage[1];\r\n          break;\r\n        case ErrorService._typeMessagePart:\r\n          this.errorMessage.type = splitMessage[1];\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  private getFirstErrorName(errors: any) {\r\n    return Object.keys(errors)[0];\r\n  }\r\n\r\n  private getSplitError(error: string[] | string) {\r\n    return Array.isArray(error)\r\n      ? error[0].split(ErrorService._messageSeparator)\r\n      : error.split(ErrorService._messageSeparator)\r\n  }\r\n\r\n  private isValidErrorObject(error: any) {\r\n    return error?.errors;\r\n  }\r\n}\r\n\r\nclass ErrorMessage {\r\n  id?: string;\r\n  maxLength?: string;\r\n  minLength?: string;\r\n  type?: string;\r\n\r\n  hasRequiredPropertiesAssigned() {\r\n    return this.id && this.type;\r\n  }\r\n}\r\n\r\nclass ErrorMessageBuilder {\r\n  message: ErrorMessage;\r\n  resultMessageBuilder = new StringBuilder();\r\n  translate: TranslateService;\r\n\r\n  constructor(translate: TranslateService, errorMessage: ErrorMessage) {\r\n    this.message = errorMessage;\r\n    this.translate = translate;\r\n  }\r\n\r\n  append(messagePart: string): ErrorMessageBuilder {\r\n    this.resultMessageBuilder.append(messagePart);\r\n    return this;\r\n  }\r\n\r\n  build() {\r\n    this.clean();\r\n\r\n    this\r\n      .append(this.translate.instant('Messages.TheValueOfTheField'))\r\n      .append(\" \")\r\n      .append(\"'\")\r\n      .withId()\r\n      .append(\"'\")\r\n      .append(\" \")\r\n      .withTypeSpecificMessagePart()\r\n      .append(\".\");\r\n  }\r\n\r\n  private clean() {\r\n    if (this.resultMessageBuilder.length() > 0)\r\n      this.resultMessageBuilder = new StringBuilder();\r\n  }\r\n\r\n  getMessage() {\r\n    return this.resultMessageBuilder.toString();\r\n  }\r\n\r\n  private withId(): ErrorMessageBuilder {\r\n    return this.append(this.translate.instant(this.message.id!));\r\n  }\r\n\r\n  private withTypeSpecificMessagePart(): ErrorMessageBuilder {\r\n\r\n    let typeSpecificMessage = '';\r\n\r\n    switch (this.message.type) {\r\n      case ErrorMessageTypeEnum.Email:\r\n        typeSpecificMessage = this.translate.instant('General.Error.IsNotValidEmail');\r\n        break;\r\n      case ErrorMessageTypeEnum.Empty:\r\n        typeSpecificMessage = this.translate.instant('General.Error.IsEmpty');\r\n        break;\r\n      case ErrorMessageTypeEnum.Length:\r\n        typeSpecificMessage = this.translate.instant('General.Error.HasIncorrectLength', { minLength: this.message.minLength, maxLength: this.message.maxLength });\r\n        break;\r\n      case ErrorMessageTypeEnum.MatchAllowedLetters:\r\n        typeSpecificMessage = this.translate.instant('General.Error.IsNotMatchingAllowedLetters');\r\n        break;\r\n      case ErrorMessageTypeEnum.MatchSmallLetters:\r\n        typeSpecificMessage = this.translate.instant('General.Error.IsNotMatchingSmallLetters');\r\n        break;\r\n    }\r\n\r\n    return this.append(typeSpecificMessage);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { FilterMatchMode } from \"primeng/api\";\r\nimport { Table } from \"primeng/table\";\r\n\r\n@Injectable()\r\nexport class FilterService {\r\n\r\n  constructor(public readonly translate: TranslateService) {\r\n  }\r\n\r\n  public getPlaceholder(field: string): string {\r\n    const capitalizedField = field.replace(/^\\w/, (c) => c.toUpperCase());\r\n    return `${this.translate.instant('General.SearchFor')} ${capitalizedField}`;\r\n  }\r\n\r\n  onClearFilters(dataTable: Table) {\r\n    dataTable.reset();\r\n  }\r\n\r\n  onFilterGlobal(dataTable: Table, filterValue: string) {\r\n    dataTable.filterGlobal(filterValue, FilterMatchMode.CONTAINS);\r\n  }\r\n\r\n  public shouldHideIcon(filterValue: string): boolean {\r\n    let inputWidth = 0;\r\n\r\n    const filterElement = document.getElementById('filter');\r\n    const textContentLengthHelper = document.createElement('span');\r\n\r\n    textContentLengthHelper.style.visibility = 'hidden';\r\n    textContentLengthHelper.style.position = 'absolute';\r\n\r\n    textContentLengthHelper.textContent = filterValue;\r\n\r\n    if (filterElement)\r\n      inputWidth = filterElement.offsetWidth;\r\n\r\n    document.body.appendChild(textContentLengthHelper);\r\n    const textContentWidth = textContentLengthHelper.offsetWidth;\r\n    document.body.removeChild(textContentLengthHelper);\r\n\r\n    return textContentWidth > inputWidth - 30;\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\r\n\r\n@Injectable()\r\nexport class ImageService {\r\n\r\n  constructor(private readonly sanitizer: DomSanitizer) {\r\n  }\r\n\r\n  public getImageSourceForFile(file: string | undefined): SafeUrl | undefined {\r\n    return file\r\n      ? this.sanitizer.bypassSecurityTrustUrl(`data:image/jpg;base64, ${file}`)\r\n      : undefined;\r\n  }\r\n}","import { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable()\r\nexport class ApiUrlInterceptor implements HttpInterceptor {\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        const baseAddress = req.url.includes('assets/i18n')\r\n            ? `${location.protocol === 'https:' ? 'https' : 'http'}://${window.location.host}`\r\n            : environment.apiUrl;\r\n\r\n        const apiRequest = req.clone({ url: `${baseAddress}${req.url}` });\r\n\r\n        return next.handle(apiRequest);\r\n    }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { HttpHandler, HttpEvent, HttpInterceptor, HttpRequest, HttpErrorResponse } from \"@angular/common/http\";\r\nimport { AuthenticationService } from \"../authentication/authentication.service\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { catchError, tap } from \"rxjs/operators\";\r\nimport { ApiResultEnum } from \"src/app/enums/api-result-enum\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    isRefreshingToken: boolean;\r\n\r\n    constructor(private readonly injector: Injector) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const authenticationService = this.injector.get(AuthenticationService);\r\n\r\n        const token = (authenticationService.isLoggedIn())\r\n            ? authenticationService.getAuth()!.Token\r\n            : null;\r\n\r\n        if (token) {\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    ApiKey: '5f97f178-1fb8-4a24-a71c-0b145a3709c4'\r\n                }\r\n            });\r\n        }\r\n\r\n        return next.handle(request).pipe(\r\n            catchError((errorResponse: HttpErrorResponse) => {\r\n                if (errorResponse.status === 401 && !this.isRefreshingToken) {\r\n                    this.isRefreshingToken = true;\r\n\r\n                    console.log(\"refreshing token...\");\r\n\r\n                    authenticationService.refreshToken().subscribe(result => {\r\n                        console.log(`token refreshed with result: ${result}`);\r\n\r\n                        if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n                            this.isRefreshingToken = false;\r\n\r\n                            window.location.reload();\r\n\r\n                            return tap(() => ApiResultEnum[ApiResultEnum.OK]);\r\n                        }\r\n                        else {\r\n                            console.error(errorResponse);\r\n\r\n                            return throwError(() => errorResponse.error);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                console.error(errorResponse);\r\n\r\n                return throwError(() => errorResponse.error);\r\n            })\r\n        );\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Menu, MenuArray } from \"src/app/interfaces/ui-models\";\r\nimport { UserPermissionEnum } from \"../../enums/user-permission-enum\";\r\nimport { AuthorizationService } from \"../authorization/authorization.service\";\r\nimport { Routes } from \"../../routes\";\r\nimport { Menus } from \"./menus\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MenuService {\r\n\r\n  private menu = new MenuArray();\r\n\r\n  constructor(private readonly authorizationService: AuthorizationService) {\r\n    this.initializeMenu();\r\n    this.initializeMenuItems();\r\n  }\r\n\r\n  public getMenu(): MenuArray {\r\n    return this.menu;\r\n  }\r\n\r\n  public getFirstMenuItemUserIsAuthorizedFor(): Menu | undefined {\r\n    const firstMenuUserIsAuthorizedFor = this.menu.find(menu =>\r\n      (menu.Items || []).some(menuItem => this.authorizationService.isAuthorized(menuItem.Permissions)));\r\n\r\n    return firstMenuUserIsAuthorizedFor;\r\n  }\r\n\r\n  private getAdministrationItems() {\r\n    return this.menu.getItemsForLabel(Menus.administration.label);\r\n  }\r\n\r\n  private getMainMenuItems() {\r\n    return this.menu.getItemsForLabel(Menus.main.label);\r\n  }\r\n\r\n  private initializeMenu() {\r\n\r\n    //MENU\r\n    this.menu.push({\r\n      Label: Menus.main.label,\r\n      Items: new MenuArray()\r\n    });\r\n\r\n    //ADMINISTRATION\r\n    this.menu.push({\r\n      Label: Menus.administration.label,\r\n      Items: new MenuArray()\r\n    });\r\n  }\r\n\r\n  private initializeMenuItems() {\r\n    const mainMenuItems = this.getMainMenuItems();\r\n\r\n    //CLIENTS\r\n    mainMenuItems?.push(<Menu>{\r\n      Permissions: [\r\n        UserPermissionEnum.Clients_CanList\r\n      ],\r\n      Label: Menus.main.items.clients.label,\r\n      Icon: Menus.main.items.clients.icon,\r\n      RouterLink: [`/${Routes.clients.navigations.list}`]\r\n    });\r\n\r\n    //EQUIPMENTS\r\n    mainMenuItems?.push(<Menu>{\r\n      Permissions: [\r\n        UserPermissionEnum.Equipments_CanList\r\n      ],\r\n      Label: Menus.main.items.equipments.label,\r\n      Icon: Menus.main.items.equipments.icon,\r\n      RouterLink: [`/${Routes.equipments.navigations.list}`]\r\n    });\r\n\r\n    //MANUFACTURERS\r\n    mainMenuItems?.push(<Menu>{\r\n      Permissions: [\r\n        UserPermissionEnum.Manufacturers_CanList\r\n      ],\r\n      Label: Menus.main.items.manufacturers.label,\r\n      Icon: Menus.main.items.manufacturers.icon,\r\n      RouterLink: [`/${Routes.manufacturers.navigations.list}`]\r\n    });\r\n\r\n    const administrationItems = this.getAdministrationItems();\r\n\r\n    //USERS\r\n    administrationItems?.push(<Menu>{\r\n      Permissions: [\r\n        UserPermissionEnum.Users_CanList\r\n      ],\r\n      Label: Menus.administration.items.users.label,\r\n      Icon: Menus.administration.items.users.icon,\r\n      RouterLink: [`/${Routes.users.navigations.list}`]\r\n    });\r\n\r\n    //USER ROLES\r\n    administrationItems?.push(<Menu>{\r\n      Permissions: [\r\n        UserPermissionEnum.UserRoles_CanList\r\n      ],\r\n      Label: Menus.administration.items.userRoles.label,\r\n      Icon: Menus.administration.items.userRoles.icon,\r\n      RouterLink: [`/${Routes.userRoles.navigations.list}`]\r\n    });\r\n  }\r\n}","export const Menus = {\r\n  administration: {\r\n    label: 'Menu.Administration',\r\n    items: {\r\n      userRoles: {\r\n        label: 'Menu.UserRoles',\r\n        icon: 'fa fa-solid fa-users'\r\n      },\r\n      users: {\r\n        label: 'Menu.Users',\r\n        icon: 'fa fa-solid fa-user'\r\n      }\r\n    }\r\n  },\r\n  main: {\r\n    label: 'Menu.Title',\r\n    items: {\r\n      clients: {\r\n        label: 'Menu.Clients',\r\n        icon: 'fa fa-solid fa-face-smile'\r\n      },\r\n      equipments: {\r\n        label: 'Menu.Equipments',\r\n        icon: 'fa fa-solid fa-dumbbell',\r\n      },\r\n      manufacturers: {\r\n        label: 'Menu.Manufacturers',\r\n        icon: 'fa fa-solid fa-industry'\r\n      }\r\n    }\r\n  }\r\n};","import { Injectable } from '@angular/core';\r\nimport { DataBaseOperationTypeMessagePartsForConsole, DatabaseOperationTypeMessagePartForConsole } from '../../tools/database-operation-type';\r\n\r\n@Injectable()\r\nexport class ConsoleMessageService {\r\n  constructor() { }\r\n\r\n  public getConsoleMessageWithResultForEntityAfterCreation(entity: string, result: string) {\r\n    return this.getConsoleMessage(entity, result, DataBaseOperationTypeMessagePartsForConsole.create);\r\n  }\r\n\r\n  public getConsoleMessageWithResultForEntityAfterDeletion(entity: string, result: string) {\r\n    return this.getConsoleMessage(entity, result, DataBaseOperationTypeMessagePartsForConsole.delete);\r\n  }\r\n\r\n  public getConsoleMessageWithResultForEntityAfterUpdate(entity: string, result: string) {\r\n    return this.getConsoleMessage(entity, result, DataBaseOperationTypeMessagePartsForConsole.update);\r\n  }\r\n\r\n  private getConsoleMessage(entity: string, result: string, operation: DatabaseOperationTypeMessagePartForConsole) {\r\n    return `The ${entity} has been ${operation.name} with result: ${result}`;\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Message, MessageService } from 'primeng/api';\r\nimport { MessageType, MessageTypes } from '../../tools/message-type';\r\n\r\n@Injectable()\r\nexport class DialogMessageService {\r\n\r\n  constructor(private readonly messageService: MessageService) {\r\n  }\r\n\r\n  public addError(summary: string) {\r\n    this.addMessage(MessageTypes.error, summary);\r\n  }\r\n\r\n  public addInfo(summary: string) {\r\n    this.addMessage(MessageTypes.info, summary);\r\n  }\r\n\r\n  public addSuccess(summary: string) {\r\n    this.addMessage(MessageTypes.success, summary);\r\n  }\r\n\r\n  public addWarning(summary: string) {\r\n    this.addMessage(MessageTypes.warning, summary);\r\n  }\r\n\r\n  private addMessage(type: MessageType, summary: string) {\r\n    this.messageService.add(<Message>{ severity: type.name, summary: summary, life: type.lifeTime });\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { LazyLoadEvent, SelectItem } from \"primeng/api\";\r\nimport { Observable, catchError, map } from \"rxjs\";\r\nimport { SelectOption } from \"../../interfaces/ui-models\";\r\nimport { ApiRoutes } from \"../../api-routes\";\r\nimport { PngTableColumn } from \"../../interfaces/png\";\r\n\r\n@Injectable()\r\nexport class SelectOptionsService {\r\n\r\n  constructor(\r\n    private readonly httpClient: HttpClient,\r\n    public readonly translate: TranslateService) {\r\n  }\r\n\r\n  getClientTypes(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.clientTypes);\r\n  }\r\n\r\n  getCountries(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.countries);\r\n  }\r\n\r\n  getFieldNamesForObjectHistory(event: LazyLoadEvent, columns: PngTableColumn[], entityId: string, entityTableName: string): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.audits(event, columns, entityId, entityTableName), true);\r\n  }\r\n\r\n  getEquipmentTypes(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.equipmentTypes);\r\n  }\r\n\r\n  getLanguages(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.languages);\r\n  }\r\n\r\n  getManufacturers(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.manufacturers);\r\n  }\r\n\r\n  getUserRoles(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.userRoles);\r\n  }\r\n\r\n  getYesNoOptions(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.yesNoOptions, true);\r\n  }\r\n\r\n  private getOptions(url: string, insertAllOption: boolean = false): Observable<SelectItem[]> {\r\n    return this.httpClient\r\n      .get<SelectOption[]>(url)\r\n      .pipe(map(result => {\r\n        const options: SelectItem[] = [];\r\n\r\n        if (insertAllOption) {\r\n          options.push({ label: this.translate.instant('General.All'), value: -1 });\r\n        }\r\n\r\n        for (let item of result) {\r\n          options.push({ label: item.Name, value: item.Value });\r\n        }\r\n\r\n        return options;\r\n      }),\r\n        catchError(error => {\r\n          console.log(error);\r\n\r\n          return new Observable<SelectItem[]>(error);\r\n        }));\r\n  }\r\n}","import { TranslateService } from \"@ngx-translate/core\";\r\nimport { AuthorizationService } from \"../services/authorization/authorization.service\";\r\n\r\nexport class AccessControl {\r\n\r\n  hasAccessToButtons: boolean = true;\r\n\r\n  constructor(\r\n    private readonly authorizationService: AuthorizationService,\r\n    private readonly permissions: number[]) {\r\n    this.determineWhetherUserHasAccessToButtons();\r\n  }\r\n\r\n  private determineWhetherUserHasAccessToButtons(): void {\r\n    this.permissions.forEach(permission => {\r\n      this.hasAccessToButtons = this.hasAccessToButtons && this.authorizationService.isAuthorized([permission]);\r\n    });\r\n  }\r\n}","export const DataBaseOperationTypeMessagePartsForConsole = {\r\n  create: <DatabaseOperationTypeMessagePartForConsole>{\r\n    name: \"created\"\r\n  },\r\n  delete: <DatabaseOperationTypeMessagePartForConsole>{\r\n    name: \"deleted\"\r\n  },\r\n  update: <DatabaseOperationTypeMessagePartForConsole>{\r\n    name: \"updated\"\r\n  },\r\n};\r\n\r\nexport interface DatabaseOperationTypeMessagePartForConsole {\r\n  name: string;\r\n}","import { MessageLifeTimeEnum } from \"../enums/message-lifetime-enum\";\r\nimport { MessageTypeEnum } from \"../enums/message-type-enum\";\r\n\r\nexport const MessageTypes = {\r\n  error: <MessageType>{\r\n    name: MessageTypeEnum.Error,\r\n    lifeTime: MessageLifeTimeEnum.Error\r\n  },\r\n  info: <MessageType>{\r\n    name: MessageTypeEnum.Info,\r\n    lifeTime: MessageLifeTimeEnum.Info\r\n  },\r\n  success: <MessageType>{\r\n    name: MessageTypeEnum.Success,\r\n    lifeTime: MessageLifeTimeEnum.Success\r\n  },\r\n  warning: <MessageType>{\r\n    name: MessageTypeEnum.Warning,\r\n    lifeTime: MessageLifeTimeEnum.Warning\r\n  }\r\n};\r\n\r\nexport interface MessageType {\r\n  name: string,\r\n  lifeTime: number;\r\n}","import { PngTableColumn } from '../interfaces/png';\r\nimport { FilterMatchMode, FilterMetadata, LazyLoadEvent, SelectItem } from 'primeng/api';\r\nimport { StringBuilder } from './stringBuilder';\r\nimport { PrimeNgHelper } from './primeNgHelper';\r\nimport { SearchOperatorEnum } from '../enums/search-operator-enum';\r\nimport { FilterTypeEnum } from '../enums/filter-type-enum';\r\n\r\nexport class PngTableSearchQueryBuilder {\r\n\r\n    private static DATE_MATCH_MODES = [FilterMatchMode.DATE_IS, FilterMatchMode.DATE_AFTER, FilterMatchMode.DATE_BEFORE, FilterMatchMode.DATE_IS_NOT];\r\n\r\n    resultUriBuilder = new StringBuilder();\r\n\r\n    constructor(\r\n        private readonly event: LazyLoadEvent,\r\n        private readonly columns: PngTableColumn[]) {\r\n    }\r\n\r\n    create() {\r\n        this.buildBaseUri();\r\n        this.addFilters();\r\n        return this.resultUriBuilder.toString();\r\n    }\r\n\r\n    public buildBaseUri() {\r\n        this.event.sortField ??= this.columns[0]?.field;\r\n        this.resultUriBuilder.append(`?sf=${this.event.sortField}&so=${this.event.sortOrder}&pc=${this.event.rows}&sr=${this.event.first}`);\r\n    }\r\n\r\n    private addFilters() {\r\n        let whereBuilder = new StringBuilder();\r\n\r\n        this.addGlobalFilters(whereBuilder);\r\n        this.addLocalFilters(whereBuilder);\r\n\r\n        if (whereBuilder.length() > 1) {\r\n            whereBuilder.removeFromEnd(2);\r\n        }\r\n\r\n        this.resultUriBuilder.append(`&f=${whereBuilder.toString()}`);\r\n    }\r\n\r\n    private addGlobalFilters(whereBuilder: StringBuilder) {\r\n        if (this.event.globalFilter) {\r\n            const globalFilterColumns = this.columns.filter(c => c.applyGlobalFiltering === true);\r\n\r\n            for (const column of globalFilterColumns) {\r\n                const replaceWith = column.replaceWith ?? column.field;\r\n\r\n                let value: string = this.event.globalFilter;\r\n                let matchMode = FilterMatchMode.CONTAINS;\r\n\r\n                if (column.options) {\r\n                    value = column.options.filter(o => o.label?.toLowerCase().includes(value.toLowerCase())).map(o => o.value).join(\", \");\r\n                    matchMode = FilterMatchMode.IN;\r\n                }\r\n\r\n                whereBuilder.append(`${replaceWith}|${matchMode}|${value}|${SearchOperatorEnum.MatchAny}|${column.filterType}||`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private addLocalFilters(whereBuilder: StringBuilder) {\r\n        for (const column of this.columns) {\r\n            const filtersGroup = this.event.filters?.[column.field];\r\n\r\n            if (filtersGroup === undefined)\r\n                continue;\r\n\r\n            if (column.filterType === FilterTypeEnum.Special && column.replaceWith === undefined)\r\n                continue;\r\n\r\n            const replaceWith = column.replaceWith ?? column.field;\r\n            const filters = filtersGroup as FilterMetadata[];\r\n\r\n            for (const filter of filters) {\r\n                if (filter.value == null)\r\n                    continue;\r\n\r\n                let value = undefined;\r\n\r\n                if (Array.isArray(filter.value)) {\r\n                    const filterValues = filter.value as SelectItem[];\r\n                    const valueBuilder = new StringBuilder();\r\n\r\n                    filterValues.forEach(fv => valueBuilder.append(`${fv.value},`));\r\n\r\n                    if (valueBuilder.length() > 0)\r\n                        valueBuilder.removeFromEnd(1);\r\n\r\n                    value = valueBuilder.toString();\r\n                }\r\n                else {\r\n                    value = filter.value;\r\n                }\r\n\r\n                if (PngTableSearchQueryBuilder.DATE_MATCH_MODES.find(mode => mode == filter.matchMode))\r\n                    value = PrimeNgHelper.getDateFromCalendarAsString(value);\r\n\r\n                whereBuilder.append(`${replaceWith}|${filter.matchMode}|${value}|${filter.operator}|${column.filterType}||`);\r\n            }\r\n        }\r\n    }\r\n}","import { StringBuilder } from \"./stringBuilder\";\r\n\r\nexport class PrimeNgHelper {\r\n\r\n  static getDateFromCalendar(date: string): Date | null {\r\n    if (!isNaN(Date.parse(date))) {\r\n      const parsedDate = new Date(date);\r\n      return new Date(Date.UTC(parsedDate.getFullYear(), parsedDate.getMonth(), parsedDate.getDate()));\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  static getDateFromCalendarAsString(date: Date): string | undefined {\r\n    date = new Date(date);\r\n\r\n    if (!date)\r\n      return;\r\n\r\n    date = new Date(date.setMinutes(date.getMinutes() - date.getTimezoneOffset()));\r\n\r\n    return new StringBuilder(date.getFullYear().toString())\r\n      .append('-')\r\n      .append((date.getMonth() + 1).toLocaleString('pl-PL', { minimumIntegerDigits: 2, useGrouping: false }))\r\n      .append('-')\r\n      .append(date.getDate().toLocaleString('pl-PL', { minimumIntegerDigits: 2, useGrouping: false }))\r\n      .toString();\r\n  }\r\n\r\n  static galleriaResponsiveOptions: any[] = [\r\n    {\r\n      breakpoint: '1024px',\r\n      numVisible: 5\r\n    },\r\n    {\r\n      breakpoint: '960px',\r\n      numVisible: 4\r\n    },\r\n    {\r\n      breakpoint: '768px',\r\n      numVisible: 3\r\n    },\r\n    {\r\n      breakpoint: '560px',\r\n      numVisible: 1\r\n    }\r\n  ];\r\n}","export class RegexPatterns {\r\n  // static emailPattern = '^(([^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@\"]+(\\.[^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@\"]+)*)|(\".+\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$';\r\n  static emailPattern = \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}$\";\r\n  static phoneNumberPattern = '^[+]*[(]{0,1}[0-9\\\\s]{1,4}[)]{0,1}[-\\s\\.[0-9\\\\s]*$';\r\n  static bankAccountPattern = '^[0-9]{26}$';\r\n  static postalCodePattern = /\\d{2}-\\d{3}/;\r\n  static passwordPattern = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,20}$/;\r\n  static passwordOrEmptyPattern = /^$|[0-9a-zA-Z]{8,20}$/;\r\n  static decimalNumber = /^\\d+[\\d\\s]*[,]?[\\d]{0,2}?$/;\r\n  static regonPattern = /^(?:[^\\d]|^)(\\d{9}|\\d{14})(?:[^\\d]|$)/;\r\n  static vehicleRegistrationNumberPattern = /^[A-Z]|[0-9]/;\r\n}","export class StringBuilder {\r\n  private value: string[];\r\n\r\n  constructor(initialValue?: string) {\r\n    this.value = [];\r\n\r\n    if (initialValue)\r\n      this.append(initialValue);\r\n  }\r\n\r\n  append(text: string): StringBuilder {\r\n    this.value.push(text);\r\n\r\n    return this;\r\n  }\r\n\r\n  appendLine(text?: string): StringBuilder {\r\n    return this.append(text ? text : '').append('\\n');\r\n  }\r\n\r\n  removeFromEnd(numberOfChars: number): StringBuilder {\r\n    if (this.value.length == 0) {\r\n      return this;\r\n    }\r\n\r\n    if (numberOfChars >= this.value[this.value.length - 1].length) {\r\n      this.value = [];\r\n    }\r\n    else {\r\n      this.value[this.value.length - 1] = this.value[this.value.length - 1]?.slice(0, -numberOfChars);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  charAtEquals(index: number, char: string): boolean {\r\n    if (index < 0 || index >= this.value.length) {\r\n      return false;\r\n    }\r\n\r\n    return this.value[index] === char;\r\n  }\r\n\r\n  length(): number {\r\n    return this.value.length > 0 ? this.value[this.value.length - 1].length : 0;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.value.join('');\r\n  }\r\n}","import { FormGroup } from '@angular/forms';\r\n\r\nexport class FormValidator {\r\n  form: FormGroup;\r\n  constructor(currentForm: FormGroup) {\r\n    this.form = currentForm;\r\n  }\r\n  // retrieve a FormControl\r\n  getFormControl(name: string) {\r\n    return this.form.get(name);\r\n  }\r\n  // returns TRUE if the FormControl is valid\r\n  isValid(name: string) {\r\n    var e = this.getFormControl(name);\r\n    return e && e.valid;\r\n  }\r\n  // returns TRUE if the FormControl has been changed\r\n  isChanged(name: string) {\r\n    var e = this.getFormControl(name);\r\n    return e && (e.dirty || e.touched);\r\n  }\r\n  // returns TRUE if the FormControl is invalid after user changes\r\n  hasError(name: string) {\r\n    var e = this.getFormControl(name);\r\n    return e && (e.dirty || e.touched) && !e.valid;\r\n  }\r\n\r\n  updateAllControlsToTouched() {\r\n    if (this.form) {\r\n      Object.keys(this.form.controls).forEach(key => {\r\n        this.form.get(key)!.markAsTouched();\r\n      });\r\n    }\r\n  }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiUrl: 'http://localhost:61869/api/',\r\n  auth_key: \"Equiprent\"\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","/// <reference types=\"@angular/localize\" />\r\n\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"names":["PngTableSearchQueryBuilder","ApiRoutes","audit","getObjectHistory","event","columns","entityId","entityTableName","create","getFieldNames","client","delete","clientId","getAll","getById","post","put","clientRepresentative","clientRepresentativeId","equipment","equipmentId","file","photo","download","photoId","identity","authenticate","refreshToken","manufacturer","manufacturerId","selectOptions","audits","clientTypes","countries","equipmentTypes","languages","manufacturers","userRoles","yesNoOptions","user","changeLanguage","changeRole","changeTheme","userId","getLanguage","getProfileById","getTheme","saveProfile","userRole","userRoleId","getUserRolePermissionsForCreation","RouterModule","NgModule","AppLayoutComponent","UserListComponent","UserRoleListComponent","LoginComponent","AuthGuard","UserPermissionEnum","UserDetailsComponent","UserCreationComponent","LocationStrategy","PathLocationStrategy","Routes","UserRoleCreationComponent","UserRoleDetailsComponent","ClientListComponent","ClientCreationComponent","ClientDetailsComponent","ManufacturerListComponent","ManufacturerCreationComponent","ManufacturerDetailsComponent","EquipmentListComponent","EquipmentCreationComponent","EquipmentDetailsComponent","UserProfileComponent","AppRoutingModule","imports","forRoot","path","home","paths","default","component","data","breadcrumb","breadcrumbs","children","users","profile","canActivate","allowedPermissions","ForAll","clients","list","Clients_CanList","Clients_CanModify","creation","edit","edition","equipments","Equipments_CanList","Equipments_CanModify","Manufacturers_CanList","Manufacturers_CanModify","Users_CanList","Users_CanModify","UserRoles_CanList","UserRoles_CanModify","login","redirectTo","pathMatch","scrollPositionRestoration","anchorScrolling","onSameUrlNavigation","useHash","providers","provide","useClass","exports","Component","HostListener","Title","TranslateService","PrimeNGConfig","AuthenticationService","AuthorizationService","AppComponent","constructor","primengConfig","translate","authenticationService","authorizationService","titleService","setDefaultLang","isUserLoggedIn","isLoggedIn","decodeTokenAndSetData","onKeydownHandler","preventDefault","ngOnInit","ripple","setTitle","args","selector","template","CommonModule","registerLocaleData","localePl","NgxMaskModule","TranslateLoader","TranslateModule","TranslateHttpLoader","HttpClient","HttpClientModule","HTTP_INTERCEPTORS","BrowserModule","JwtModule","AppLayoutModule","environment","AuthInterceptor","ConsoleMessageService","DialogMessageService","ErrorService","FilterService","FormsModule","ReactiveFormsModule","ImageService","MenuService","SelectOptionsService","AddressComponent","AuditListForEntityComponent","ClientRepresentativeCreationComponent","ClientRepresentativeDetailsComponent","ClientRepresentativeListComponent","CompanyClientAddressComponent","DeletionDialogComponent","EquipmentPhotosComponent","LoginResetPasswordComponent","ManufacturerAddressComponent","NameInLanguagesComponent","PrivateClientAddressComponent","PrivateClientComponent","UserRolePermissionsComponent","ApiUrlInterceptor","BreadcrumbModule","ButtonModule","CheckboxModule","ConfirmDialogModule","ConfirmationService","DialogService","DropdownModule","DynamicDialogModule","GalleriaModule","MessageModule","MessagesModule","MessageService","MultiSelectModule","PanelMenuModule","PasswordModule","SplitButtonModule","TableModule","TabViewModule","ToastModule","TreeTableModule","options","AppModule","declarations","config","tokenGetter","jwtTokenGetter","loader","useFactory","HttpLoaderFactory","deps","multi","bootstrap","localStorage","getItem","auth_key","http","AccessControl","ApiResultEnum","AccessControlComponent","confirmationService","consoleMessageService","deletionKey","deletionLinkInitializer","dialogMessageService","entityName","errorService","httpClient","onAfterDeletionSuccessOperationsHandler","router","userPermissions","accessControl","hasAccessToButtons","onEditLabelId","onDelete","entity","confirm","key","message","instant","deletedEntityInstanceIdentificationInitializer","accept","deleteEntity","Id","subscribe","next","result","OK","addSuccess","addError","getErrorMessageForResult","getDefaultErrorMessage","console","log","getConsoleMessageWithResultForEntityAfterDeletion","error","getFirstTranslatedErrorMessage","Object","keys","includes","apiErrorKey","Number","getApiResultKeyByValue","toString","undefined","value","filter","length","FormComponent","AccessControlFormComponent","activatedRoute","formBuilder","mode","submitionLink","afterSubmitionNavigationLink","snapshot","params","deletionLink","isDisabled","isExecuting","updateForm","obj","setAccess","form","disabled","formValidator","updateAllControlsToTouched","onAfterDeletionSuccessNavigateUsingLinkHandler","navigate","enable","disable","AccessControlOpenableAsDialogForm","openedAsDialogConfig","openedAsDialogRef","onAfterDeletionSuccessNavigateUsingLink","onAfterSubmitSuccessNavigateUsingLink","onBackNavigateUsingLink","_dialogConfigData","getOpenedAsDialogData","getEntityId","onBack","close","isOfTypeT","Directive","Input","SimpleFormComponent","FormBuilder","Validators","DynamicRequirementFormComponent","updateFormAfterInit","requiredFields","forEach","fieldName","requiredField","get","setValidators","required","FormModeEnum","PostAction","PutAction","FormSubmitionActionFactory","getFormSubmitionAction","Creation","Edition","getConsoleMessageWithResultForEntityAfterCreation","execute","formComponent","beforeSubmitionCustomOperationsHandler","getConsoleMessageWithResultForEntityAfterUpdate","FormValidator","shouldActionsBeDisabled","invalid","_formValidator","validator","createForm","formFieldGroup","group","onSubmit","onSubmitAction","onAfterSubmitionSuccessNavigateUsingLinkHandler","successMessageTag","getConsoleMessage","afterSubmitionCustomOperationsHandler","firstTranslatedErrorMessage","requestValidationByDatabaseErrorMessage","getFirstErrorMessageKey","patchValue","OpenableAsDialogForm","FormGroup","_form","reloadForm","selectOptionsService","ApartmentNumber","City","CountryId","Email","PhoneNumber","PostalCode","StreetName","StreetNumber","populateDropdowns","entityAddress","Country","getCountries","NationalCompanyId","clientAddress","NationalId","manufacturerAddress","NationalCitizenId","PngTable","concatMap","filterService","fieldNamesForObjectHistory","getFieldNamesForObjectHistory","set","setFieldNamesForObjectHistory","objectHistory","setObjectHistory","table","field","header","width","applyGlobalFiltering","loadAuditsLazy","tempLazyLoadEvent","_dataPopulator","pipe","cols","fieldNameOptions","setOptionsForColumn","totalRecords","TotalRowsCount","List","ViewChild","Router","ClientTypeEnum","addressFormFields","navigations","prepareClientCreationModel","ClientTypeId","Name","addressForm","companyClientAddressForm","privateClientAddressForm","privateClientForm","getClientNationalId","Private","Company","getClientTypes","Addresses","FirstName","LastName","TypeId","ActivatedRoute","prepareClientDetailsModel","getEntityInstanceName","loadClient","ngAfterViewInit","activeTab","switchActiveTab","tabIndex","FilterTypeEnum","selectOptionService","multiSelects","getClientTypeMultiSelectData","setClientTypeMultiSelectData","getClients","setClients","filterType","Text","replaceWith","loadClientsLazy","onCreate","onEdit","sortField","clientTypeOptions","clientTypeColumn","find","c","RegexPatterns","prepareEquipmentCreationModel","Description","ManufacturerId","MarketValue","pattern","decimalNumber","PricePerDay","SerialNumber","getManufacturers","getEquipmentTypes","types","replace","StringBuilder","formatNumber","imageService","prepareEquipmentDetailsModel","loadEquipment","append","Photos","ThumbnailFile","Thumbnail","getImageSourceForFile","getDefaultLang","getManufacturerMultiSelectData","setManufacturerMultiSelectData","getTypeMultiSelectData","setTypeMultiSelectData","getEquipments","setEquipments","loadEquipmentsLazy","manufacturerOptions","manufacturerColumn","typeOptions","typeColumn","PrimeNgHelper","galleriaResponsiveOptions","activeIndex","_activeIndex","newValue","equipmentPhotos","sourcePhotos","addPhoto","getEquipmentPhotoSource","id","equipmentPhoto","p","IsBeingDownloaded","Source","File","push","FileName","IsMainThumbnail","queryParams","token","add","severity","summary","detail","LanguageCodeEnum","app","Login","Password","getLanguages","languageIdFromStorage","languageId","setLanguage","isFirstTimeLoggedIn","NotActive","getLanguageCodeById","Pl","valueOf","En","lang","use","prepareManufacturerCreationModel","IsOperational","manufacturerAddressForm","Address","prepareManufacturerDetailsModel","loadManufacturer","IsDeleted","setManufacturers","loadManufacturersLazy","EventEmitter","Output","FormControl","nameInLanguages","isValid","emit","getNameInLanguages","l","LanguageId","controls","label","onChangeInput","isFormValid","valid","d","DynamicDialogConfig","DynamicDialogRef","clientRepresentatives","prepareClientRepresentativeCreationModel","getClientRepresentativeClientId","ClientId","clientRepresentativeAddress","height","modal","style","margin","padding","ClientRepresentatives_CanModify","prepareClientRepresentativeDetailsModel","loadClientRepresentative","dialogService","getClientRepresentatives","setClientRepresentatives","ngOnDestroy","clientRepresentativeCreationDialog","loadClientRepresentativesLazy","openClientRepresentativeDialog","clientRepresentativeDialogConfigData","open","OPEN_AS_DIALOG_SETTINGS","onClose","UserRolePermissionsOnCreationFiller","UserRolePermissionsOnEditionFiller","UserRolePermissionsFillerFactory","makeFiller","formMode","source","destinations","filler","Error","name","Icons","LIST_ICON_NAME","MODIFY_ICON_NAME","UserRolePermissionsFiller","getIconStyleClassNameForPermission","permission","endsWith","UserPermissionNode","createChildNode","icon","linkedPermissionIds","LinkedPermissionsIds","createParentNode","permissionsGroup","fill","permissionsGroupChildren","Permissions","allItems","isSelected","IsSelected","expanded","partialSelected","every","some","updateUserRolePermissions","updateUserRolePermissionsSelected","permissionNode","hasChildren","childPermissionNode","selectedItems","tryPush","hasLinkedPermissions","SelectedUserPermissionNodeArray","userRolePermissionColumns","groupedUserPermissions","userPermissionNodes","selectedUserPermissionNodes","getPermissionsSubmitted","permissionsSubmitted","onPermissionSelected","linkedPermissionId","isPermissionAlreadySelected","permissionToBeSelected","getPermissionNodeToBeSelected","findPermissionById","idToFind","nodeChild","permissionId","userPermissionGroup","UserRoleCreationModel","prepareUserRoleCreationModel","onIsNameInLanguagesValid","isNameInLanguagesValid","NameInLanguages","userRolePermissions","doesPermissionExistWithinSelected","PermissionsSelected","UserRoleDetailsModel","prepareUserRoleDetailsModel","loadUserRole","getUserRoleMultiSelectData","setUserRoleMultiSelectData","getUserRoles","setUserRoles","Numeric","loadUserRolesLazy","userRoleOptions","userRoleColumn","prepareUserCreationModel","emailPattern","IsActive","passwordPattern","UserRoleId","prepareUserDetailsModel","CreatedOn","loadUser","isPasswordFieldFilled","getDateFromCalendarAsString","Date","getUsers","setUsers","loadUsersLazy","menuService","prepareUserProfileModel","currentUserId","firstMenuItemUserIsAuthorizedFor","getFirstMenuItemUserIsAuthorizedFor","ErrorMessageTypeEnum","MessageLifeTimeEnum","MessageTypeEnum","SearchOperatorEnum","NameInLanguage","NameInLanguagesBase","columnName","column","PngTableColumn","PngTreeColumn","Menu","MenuArray","Array","getItemsForLabel","m","Label","Items","PermissionGroupItemModel","PermissionItemModel","item","LayoutService","AppFooterComponent","layoutService","isDarkModeThemeSelectedFromStorage","isDarkModeThemeSelected","Boolean","changeUserTheme","setItem","model","theme","colorScheme","themeLink","document","getElementById","newHref","getAttribute","replaceThemeLink","onConfigUpdate","href","onComplete","cloneLinkElement","cloneNode","setAttribute","parentNode","insertBefore","nextSibling","addEventListener","remove","Renderer2","NavigationEnd","AppSidebarComponent","AppTopBarComponent","renderer","overlayMenuOpenSubscription","overlayOpen$","menuOutsideClickListener","listen","isOutsideClicked","appSidebar","el","nativeElement","isSameNode","target","contains","appTopbar","menuButton","hideMenu","profileMenuOutsideClickListener","menu","topbarMenuButton","hideProfileMenu","state","staticMenuMobileActive","blockBodyScroll","events","RouterLink","body","classList","className","overlayMenuActive","menuHoverActive","unblockBodyScroll","profileSidebarVisible","RegExp","split","join","containerClass","menuMode","staticMenuDesktopInactive","inputStyle","unsubscribe","BrowserAnimationsModule","InputTextModule","SidebarModule","BadgeModule","RadioButtonModule","InputSwitchModule","RippleModule","AppMenuComponent","AppMenuitemComponent","AppConfigModule","buildMenu","getMenu","appendMenu","menuItemsCurrentUserIsAuthorizedFor","isLoggedUserAuthorizedForMenu","menuItems","Icon","routerLink","items","permissions","isAuthorized","Injectable","Subject","menuSource","asObservable","resetSource","onMenuStateChange","reset","providedIn","ChangeDetectorRef","HostBinding","animate","transition","trigger","cd","menuSourceSubscription","menuSource$","Promise","resolve","then","routeEvent","active","startsWith","menuResetSubscription","resetSource$","updateActiveStateFromRoute","parentKey","index","String","activeRoute","isActive","matrixParams","fragment","itemClick","command","originalEvent","submenuAnimation","root","activeClass","type","animations","ElementRef","Scroll","url","updateWithLanguageOnInit","onProfileButtonClick","setTheme","withDarkMode","createBreadcrumbs","route","urlBuilder","child","routeURL","map","segment","initializeLayout","appMenu","initializeUserMenu","userMenuItems","onLanguageChange","logout","updateWithLanguageOnLanguageChange","updateBreadcrumbItemsWithLanguage","breadcrumbItems","breadcrumbItem","userLanguageId","currentUserLanguageId","language","translation","setTranslation","AppConfigComponent","visible","configSidebarVisible","_val","scale","onConfigButtonClick","showConfigSidebar","decrementScale","applyScale","incrementScale","documentElement","fontSize","configUpdate","overlayOpen","onMenuToggle","isOverlay","isDesktop","showProfileSidebar","window","innerWidth","isMobile","tabs","general","representatives","getCanActivateResult","canActivateChild","checkForChild","resetAllData","Inject","PLATFORM_ID","isPlatformBrowser","Observable","of","catchError","platformId","getAuth","JSON","parse","authData","UserName","GrantType","Scope","res","Token","Code","setAuth","tokenData","RefreshToken","auth","stringify","isLoggedIn$","removeItem","JwtHelperService","jwtHelperService","AuthorizationService_1","_currentUserId","currentUserName","_currentUserName","currentUserRoles","_currentUserRoles","_currentUserLanguageId","currentUserPermissions","_currentUserPermissions","currentUserRoleId","_currentUserRoleId","currentUserRoleName","_currentUserRoleName","decodeToken","decodedToken","currentUserPermissionsTextArray","permissionsTextArray","r","errorMessage","ErrorMessage","errorMessageBuilder","ErrorMessageBuilder","isValidErrorObject","errorObject","errors","firstErrorPropertyName","getFirstErrorName","firstError","splitError","getSplitError","fillErrorMessageBasedOnError","hasRequiredPropertiesAssigned","build","getMessage","splitMessage","ErrorService_1","_messageInnerSeparator","_idMessagePart","_maxLengthMessagePart","maxLength","_minLengthMessagePart","minLength","_typeMessagePart","isArray","_messageSeparator","messagePart","resultMessageBuilder","clean","withId","withTypeSpecificMessagePart","typeSpecificMessage","Empty","Length","MatchAllowedLetters","MatchSmallLetters","FilterMatchMode","getPlaceholder","capitalizedField","toUpperCase","onClearFilters","dataTable","onFilterGlobal","filterValue","filterGlobal","CONTAINS","shouldHideIcon","inputWidth","filterElement","textContentLengthHelper","createElement","visibility","position","textContent","offsetWidth","appendChild","textContentWidth","removeChild","DomSanitizer","sanitizer","bypassSecurityTrustUrl","intercept","req","baseAddress","location","protocol","host","apiUrl","apiRequest","clone","handle","Injector","throwError","tap","injector","request","setHeaders","Authorization","ApiKey","errorResponse","status","isRefreshingToken","reload","Menus","initializeMenu","initializeMenuItems","firstMenuUserIsAuthorizedFor","menuItem","getAdministrationItems","administration","getMainMenuItems","main","mainMenuItems","administrationItems","DataBaseOperationTypeMessagePartsForConsole","update","operation","MessageTypes","messageService","addMessage","addInfo","info","success","addWarning","warning","life","lifeTime","getOptions","getYesNoOptions","insertAllOption","Value","determineWhetherUserHasAccessToButtons","Info","Success","Warning","buildBaseUri","addFilters","resultUriBuilder","sortOrder","rows","first","whereBuilder","addGlobalFilters","addLocalFilters","removeFromEnd","globalFilter","globalFilterColumns","matchMode","o","toLowerCase","IN","MatchAny","filtersGroup","filters","Special","filterValues","valueBuilder","fv","DATE_MATCH_MODES","operator","DATE_IS","DATE_AFTER","DATE_BEFORE","DATE_IS_NOT","getDateFromCalendar","date","isNaN","parsedDate","UTC","getFullYear","getMonth","getDate","setMinutes","getMinutes","getTimezoneOffset","toLocaleString","minimumIntegerDigits","useGrouping","breakpoint","numVisible","initialValue","text","appendLine","numberOfChars","slice","charAtEquals","char","currentForm","getFormControl","e","isChanged","dirty","touched","hasError","markAsTouched","production","enableProdMode","platformBrowserDynamic","bootstrapModule","catch","err"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}
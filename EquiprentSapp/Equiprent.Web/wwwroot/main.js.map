{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/api-routes.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/components/abstract/access-controls/access-control.ts","./src/app/components/abstract/forms/access-control-form.ts","./src/app/components/abstract/forms/access-control-openable-as-dialog-form.ts","./src/app/components/abstract/forms/dynamic-requirement-form.ts","./src/app/components/abstract/forms/form-factories/form-submition-action-factory.ts","./src/app/components/abstract/forms/form-factories/post-action.ts","./src/app/components/abstract/forms/form-factories/put-action.ts","./src/app/components/abstract/forms/form.ts","./src/app/components/abstract/forms/openable-as-dialog-form.ts","./src/app/components/abstract/forms/simple-form.ts","./src/app/components/addresses/address.ts","./src/app/components/addresses/company-client-address.ts","./src/app/components/addresses/private-client-address.ts","./src/app/components/audits/audit-list-for-entity.ts","./src/app/components/clients/client-create.ts","./src/app/components/clients/client-details.ts","./src/app/components/clients/client-list.ts","./src/app/components/clients/private-client.ts","./src/app/components/dialogs/deletion-dialog.ts","./src/app/components/login/login-reset-password.ts","./src/app/components/login/login.ts","./src/app/components/name-in-languages/name-in-languages.ts","./src/app/components/representatives/client-representative-create.ts","./src/app/components/representatives/client-representative-details.ts","./src/app/components/representatives/client-representative-list.ts","./src/app/components/user-roles/fillers/user-role-permissions-filler-factory.ts","./src/app/components/user-roles/fillers/user-role-permissions-filler.ts","./src/app/components/user-roles/fillers/user-role-permissions-on-creation-filler.ts","./src/app/components/user-roles/fillers/user-role-permissions-on-edition-filler.ts","./src/app/components/user-roles/models/user-permission-node.ts","./src/app/components/user-roles/user-role-create.ts","./src/app/components/user-roles/user-role-details.ts","./src/app/components/user-roles/user-role-list.ts","./src/app/components/user-roles/user-role-permissions.ts","./src/app/components/users/user-create.ts","./src/app/components/users/user-details.ts","./src/app/components/users/user-list.ts","./src/app/enums/api-result-enum.ts","./src/app/enums/client-type-enum.ts","./src/app/enums/error-messag-type-enum.ts","./src/app/enums/filter-type-enum.ts","./src/app/enums/form-mode-enum.ts","./src/app/enums/language-code-enum.ts","./src/app/enums/message-lifetime-enum.ts","./src/app/enums/message-type-enum.ts","./src/app/enums/search-operator-enum.ts","./src/app/enums/user-permission-enum.ts","./src/app/icon-mapper.ts","./src/app/interfaces/address.ts","./src/app/interfaces/name-in-language.ts","./src/app/interfaces/png.ts","./src/app/interfaces/ui-models.ts","./src/app/interfaces/user-permission.ts","./src/app/interfaces/user-role.ts","./src/app/layout/app.footer.component.ts","./src/app/layout/app.layout.component.ts","./src/app/layout/app.layout.module.ts","./src/app/layout/app.menu.component.ts","./src/app/layout/app.menu.service.ts","./src/app/layout/app.menuitem.component.ts","./src/app/layout/app.sidebar.component.ts","./src/app/layout/app.topbar.component.ts","./src/app/layout/config/app.config.component.ts","./src/app/layout/config/config.module.ts","./src/app/layout/services/app.layout.service.ts","./src/app/routes.ts","./src/app/services/auth-guard/auth-guard.service.ts","./src/app/services/authentication/authentication.service.ts","./src/app/services/authorization/authorization.service.ts","./src/app/services/errors/error.service.ts","./src/app/services/filters/filter.service.ts","./src/app/services/interceptors/api-url-interceptor.ts","./src/app/services/interceptors/auth-interceptor.ts","./src/app/services/layout/menu.service.ts","./src/app/services/layout/menus.ts","./src/app/services/messages/console-message.service.ts","./src/app/services/messages/dialog-message.service.ts","./src/app/services/select-options/select-options.service.ts","./src/app/tools/access-control.ts","./src/app/tools/database-operation-type.ts","./src/app/tools/message-type.ts","./src/app/tools/png-table-search-query-builder.ts","./src/app/tools/primeNgHelper.ts","./src/app/tools/regexPatterns.ts","./src/app/tools/stringBuilder.ts","./src/app/ui-controls/form-validator.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { LazyLoadEvent } from \"primeng/api\";\r\nimport { PngTableColumn } from \"./interfaces/png\";\r\nimport { PngTableSearchQueryBuilder } from \"./tools/png-table-search-query-builder\";\r\n\r\nexport const ApiRoutes = {\r\n  audit: {\r\n    getObjectHistory: (event: LazyLoadEvent, columns: PngTableColumn[], entityId: string, entityTableName: string) => `audit${new PngTableSearchQueryBuilder(event, columns).create()}&entityId=${entityId}&entityTableName=${entityTableName}`,\r\n    getFieldNames: \"audit/getFieldNames\"\r\n  },\r\n  client: {\r\n    delete: (clientId: string) => `client/${clientId}`,\r\n    getAll: (event: LazyLoadEvent, columns: PngTableColumn[]) => `client${new PngTableSearchQueryBuilder(event, columns).create()}`,\r\n    getById: (clientId: string) => `client/${clientId}`,\r\n    post: \"client\",\r\n    put: \"client\"\r\n  },\r\n  clientRepresentative: {\r\n    delete: (clientRepresentativeId: string) => `client/representative/${clientRepresentativeId}`,\r\n    getAll: (event: LazyLoadEvent, columns: PngTableColumn[], clientId: string) => `client/representative${new PngTableSearchQueryBuilder(event, columns).create()}&clientId=${clientId}`,\r\n    getById: (clientRepresentativeId: string) => `client/representative/${clientRepresentativeId}`,\r\n    post: \"client/representative\",\r\n    put: \"client/representative\"\r\n  },\r\n  identity: {\r\n    authenticate: \"identity/authenticate\",\r\n    refreshToken: \"identity/refreshToken\"\r\n  },\r\n  selectOptions: {\r\n    audits: (event: LazyLoadEvent, columns: PngTableColumn[], entityId: string, entityTableName: string) => `audit/getFieldNames${new PngTableSearchQueryBuilder(event, columns).create()}&entityId=${entityId}&entityTableName=${entityTableName}`,\r\n    clientTypes: \"selectoptions/clientTypes\",\r\n    countries: \"selectoptions/countries\",\r\n    languages: \"selectoptions/languages\",\r\n    userRoles: \"selectoptions/userRoles\",\r\n    yesNoOptions: \"selectoptions/yesNo\"\r\n  },\r\n  user: {\r\n    changeLanguage: \"user/changeLanguage\",\r\n    changeRole: \"user/changeRole\",\r\n    changeTheme: \"user/changeTheme\",\r\n    delete: (userId: string) => `user/${userId}`,\r\n    getAll: (event: LazyLoadEvent, columns: PngTableColumn[]) => `user${new PngTableSearchQueryBuilder(event, columns).create()}`,\r\n    getById: (userId: string) => `user/${userId}`,\r\n    getLanguage: (userId: string) => `user/getLanguage/${userId}`,\r\n    getTheme: (userId: string) => `user/getTheme/${userId}`,\r\n    post: \"user\",\r\n    put: \"user\"\r\n  },\r\n  userRole: {\r\n    delete: (userRoleId: number) => `userRole/${userRoleId}`,\r\n    getAll: (event: LazyLoadEvent, columns: PngTableColumn[]) => `userRole${new PngTableSearchQueryBuilder(event, columns).create()}`,\r\n    getById: (userRoleId: number) => `userRole/${userRoleId}`,\r\n    getUserRolePermissionsForCreation: \"userRole/getUserRolePermissionsForCreation\",\r\n    post: \"userRole\",\r\n    put: \"userRole\"\r\n  }\r\n}","import { Data, RouterModule } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppLayoutComponent } from './layout/app.layout.component';\r\nimport { UserListComponent } from './components/users/user-list';\r\nimport { UserRoleListComponent } from './components/user-roles/user-role-list';\r\nimport { LoginComponent } from './components/login/login';\r\nimport { AuthGuard } from './services/auth-guard/auth-guard.service';\r\nimport { UserPermissionEnum } from './enums/user-permission-enum';\r\nimport { UserDetailsComponent } from './components/users/user-details';\r\nimport { UserCreationComponent } from './components/users/user-create';\r\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\r\nimport { Routes } from './routes';\r\nimport { UserRoleCreationComponent } from './components/user-roles/user-role-create';\r\nimport { UserRoleDetailsComponent } from './components/user-roles/user-role-details';\r\nimport { ClientListComponent } from './components/clients/client-list';\r\nimport { ClientCreationComponent } from './components/clients/client-create';\r\nimport { ClientDetailsComponent } from './components/clients/client-details';\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forRoot([\r\n            {\r\n                path: Routes.home.paths.default, component: AppLayoutComponent,\r\n                data: {\r\n                    breadcrumb: Routes.home.breadcrumbs.default\r\n                },\r\n                children: [\r\n                    {\r\n                        path: Routes.clients.paths.list,\r\n                        canActivate: [AuthGuard],\r\n                        data: <Data>{\r\n                            allowedPermissions: [UserPermissionEnum.Clients_CanList],\r\n                            breadcrumb: Routes.clients.breadcrumbs.list\r\n                        },\r\n                        children: [\r\n                            {\r\n                                path: '',\r\n                                component: ClientListComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Clients_CanList],\r\n                                    breadcrumb: null\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.clients.paths.create,\r\n                                component: ClientCreationComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Clients_CanModify],\r\n                                    breadcrumb: Routes.clients.breadcrumbs.creation\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.clients.paths.edit,\r\n                                component: ClientDetailsComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Clients_CanModify],\r\n                                    breadcrumb: Routes.clients.breadcrumbs.edition\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        path: Routes.users.paths.list,\r\n                        canActivate: [AuthGuard],\r\n                        data: <Data>{\r\n                            allowedPermissions: [UserPermissionEnum.Users_CanList],\r\n                            breadcrumb: Routes.users.breadcrumbs.list\r\n                        },\r\n                        children: [\r\n                            {\r\n                                path: '',\r\n                                component: UserListComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Users_CanList],\r\n                                    breadcrumb: null\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.users.paths.create,\r\n                                component: UserCreationComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Users_CanModify],\r\n                                    breadcrumb: Routes.users.breadcrumbs.creation\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.users.paths.edit,\r\n                                component: UserDetailsComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Users_CanList],\r\n                                    breadcrumb: Routes.users.breadcrumbs.edition\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        path: Routes.userRoles.paths.list,\r\n                        canActivate: [AuthGuard],\r\n                        data: <Data>{\r\n                            allowedPermissions: [UserPermissionEnum.UserRoles_CanList],\r\n                            breadcrumb: Routes.userRoles.breadcrumbs.list\r\n                        },\r\n                        children: [\r\n                            {\r\n                                path: '',\r\n                                component: UserRoleListComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.UserRoles_CanList],\r\n                                    breadcrumb: null\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.userRoles.paths.create,\r\n                                component: UserRoleCreationComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.UserRoles_CanModify],\r\n                                    breadcrumb: Routes.userRoles.breadcrumbs.creation\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.userRoles.paths.edit,\r\n                                component: UserRoleDetailsComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.UserRoles_CanList],\r\n                                    breadcrumb: Routes.userRoles.breadcrumbs.edition\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                path: Routes.login.paths.default,\r\n                component: LoginComponent,\r\n                data: {\r\n                    breadcrumb: null\r\n                }\r\n            },\r\n            {\r\n                path: '**',\r\n                redirectTo: Routes.home.paths.default\r\n            },\r\n            {\r\n                path: '',\r\n                redirectTo: Routes.home.paths.default,\r\n                pathMatch: 'full'\r\n            },\r\n        ], { scrollPositionRestoration: 'enabled', anchorScrolling: 'enabled', onSameUrlNavigation: 'reload', useHash: false })\r\n    ],\r\n    providers: [\r\n        {\r\n            provide: LocationStrategy, useClass: PathLocationStrategy\r\n        }\r\n    ],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit, HostListener } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { PrimeNGConfig } from 'primeng/api';\r\nimport { AuthenticationService } from './services/authentication/authentication.service';\r\nimport { AuthorizationService } from './services/authorization/authorization.service';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n    public isUserLoggedIn: boolean;\r\n\r\n    constructor(private primengConfig: PrimeNGConfig,\r\n        private translate: TranslateService,\r\n        private authenticationService: AuthenticationService,\r\n        private authorizationService: AuthorizationService,\r\n        private titleService: Title) {\r\n        this.translate.setDefaultLang('pl');\r\n        this.isUserLoggedIn = this.authenticationService.isLoggedIn();\r\n        this.authorizationService.decodeTokenAndSetData();\r\n    }\r\n\r\n    @HostListener('document:keydown.enter', ['$event']) onKeydownHandler(event: KeyboardEvent) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.primengConfig.ripple = true;\r\n        this.titleService.setTitle(\"Equiprent\");\r\n    }\r\n}\r\n","//Angular\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule, LocationStrategy, PathLocationStrategy } from '@angular/common';\r\nimport { registerLocaleData } from '@angular/common';\r\nimport localePl from '@angular/common/locales/pl';\r\nimport { NgxMaskModule, IConfig } from 'ngx-mask';\r\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { HttpClient, HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { JwtModule } from '@auth0/angular-jwt';\r\n\r\n//Application\r\nimport { AppComponent } from './app.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppLayoutModule } from './layout/app.layout.module';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n//Services\r\nimport { MenuService } from './services/layout/menu.service';\r\nimport { AuthorizationService } from './services/authorization/authorization.service';\r\nimport { AuthenticationService } from './services/authentication/authentication.service';\r\nimport { AuthInterceptor } from './services/interceptors/auth-interceptor';\r\nimport { AuthGuard } from './services/auth-guard/auth-guard.service';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ConsoleMessageService } from './services/messages/console-message.service';\r\nimport { DialogMessageService } from './services/messages/dialog-message.service';\r\nimport { ErrorService } from './services/errors/error.service';\r\nimport { FilterService } from './services/filters/filter.service';\r\nimport { SelectOptionsService } from './services/select-options/select-options.service';\r\n\r\n//Components\r\nimport { AddressComponent } from './components/addresses/address';\r\nimport { AuditListForEntityComponent } from './components/audits/audit-list-for-entity';\r\nimport { ClientCreationComponent } from './components/clients/client-create';\r\nimport { ClientDetailsComponent } from './components/clients/client-details';\r\nimport { ClientListComponent } from './components/clients/client-list';\r\nimport { ClientRepresentativeCreationComponent } from './components/representatives/client-representative-create';\r\nimport { ClientRepresentativeDetailsComponent } from './components/representatives/client-representative-details';\r\nimport { ClientRepresentativeListComponent } from './components/representatives/client-representative-list';\r\nimport { CompanyClientAddressComponent } from './components/addresses/company-client-address';\r\nimport { DeletionDialogComponent } from './components/dialogs/deletion-dialog';\r\nimport { LoginComponent } from './components/login/login';\r\nimport { LoginResetPasswordComponent } from './components/login/login-reset-password';\r\nimport { NameInLanguagesComponent } from './components/name-in-languages/name-in-languages';\r\nimport { PrivateClientAddressComponent } from './components/addresses/private-client-address';\r\nimport { PrivateClientComponent } from './components/clients/private-client';\r\nimport { UserCreationComponent } from './components/users/user-create';\r\nimport { UserDetailsComponent } from './components/users/user-details';\r\nimport { UserListComponent } from './components/users/user-list';\r\nimport { UserRoleCreationComponent } from './components/user-roles/user-role-create';\r\nimport { UserRoleDetailsComponent } from './components/user-roles/user-role-details';\r\nimport { UserRoleListComponent } from './components/user-roles/user-role-list';\r\nimport { UserRolePermissionsComponent } from './components/user-roles/user-role-permissions';\r\n\r\n//PrimeNG\r\nimport { ApiUrlInterceptor } from './services/interceptors/api-url-interceptor';\r\nimport { BreadcrumbModule } from 'primeng/breadcrumb';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { CheckboxModule } from 'primeng/checkbox';\r\nimport { ConfirmDialogModule } from 'primeng/confirmdialog';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { DialogService } from 'primeng/dynamicdialog';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { DynamicDialogModule } from 'primeng/dynamicdialog';\r\nimport { MessageModule } from 'primeng/message';\r\nimport { MessagesModule } from 'primeng/messages';\r\nimport { MessageService } from 'primeng/api';\r\nimport { MultiSelectModule } from 'primeng/multiselect';\r\nimport { PanelMenuModule } from 'primeng/panelmenu';\r\nimport { PasswordModule } from 'primeng/password';\r\nimport { SplitButtonModule } from 'primeng/splitbutton';\r\nimport { TableModule } from 'primeng/table';\r\nimport { TabViewModule } from 'primeng/tabview';\r\nimport { ToastModule } from 'primeng/toast';\r\nimport { TreeTableModule } from 'primeng/treetable';\r\n\r\nregisterLocaleData(localePl, 'pl');\r\nexport const options: Partial<IConfig> | (() => Partial<IConfig>) = {};\r\n\r\n@NgModule({\r\n    declarations: [\r\n        //[start] app components\r\n        AppComponent,\r\n        //[end] app components\r\n        //[start] custom components\r\n        AddressComponent,\r\n        AuditListForEntityComponent,\r\n        ClientCreationComponent,\r\n        ClientDetailsComponent,\r\n        ClientListComponent,\r\n        ClientRepresentativeCreationComponent,\r\n        ClientRepresentativeDetailsComponent,\r\n        ClientRepresentativeListComponent,\r\n        CompanyClientAddressComponent,\r\n        DeletionDialogComponent,\r\n        LoginComponent,\r\n        LoginResetPasswordComponent,\r\n        NameInLanguagesComponent,\r\n        PrivateClientAddressComponent,\r\n        PrivateClientComponent,\r\n        UserCreationComponent,\r\n        UserDetailsComponent,\r\n        UserListComponent,\r\n        UserRoleCreationComponent,\r\n        UserRoleDetailsComponent,\r\n        UserRoleListComponent,\r\n        UserRolePermissionsComponent,\r\n        //[end] custom components\r\n    ],\r\n    imports: [\r\n        //[start] app modules\r\n        AppLayoutModule,\r\n        AppRoutingModule,\r\n        BrowserModule,\r\n        CommonModule,\r\n        FormsModule,\r\n        HttpClientModule,\r\n        JwtModule.forRoot({\r\n            config: {\r\n                tokenGetter: jwtTokenGetter\r\n            }\r\n        }),\r\n        NgxMaskModule.forRoot(options),\r\n        ReactiveFormsModule,\r\n        TranslateModule.forRoot({\r\n            loader: {\r\n                provide: TranslateLoader,\r\n                useFactory: HttpLoaderFactory,\r\n                deps: [HttpClient]\r\n            }\r\n        }),\r\n        //[end] app modules\r\n        //[start] primeng Modules\r\n        BreadcrumbModule,\r\n        ButtonModule,\r\n        CheckboxModule,\r\n        ConfirmDialogModule,\r\n        DropdownModule,\r\n        DynamicDialogModule,\r\n        MessageModule,\r\n        MessagesModule,\r\n        MultiSelectModule,\r\n        PanelMenuModule,\r\n        PasswordModule,\r\n        SplitButtonModule,\r\n        TableModule,\r\n        TabViewModule,\r\n        ToastModule,\r\n        TreeTableModule,\r\n        //[end] primeng Modules\r\n    ],\r\n    providers: [\r\n        //[start] app services\r\n        { provide: LocationStrategy, useClass: PathLocationStrategy },\r\n        {\r\n            provide: HTTP_INTERCEPTORS,\r\n            useClass: AuthInterceptor,\r\n            multi: true\r\n        },\r\n        {\r\n            provide: HTTP_INTERCEPTORS,\r\n            useClass: ApiUrlInterceptor,\r\n            multi: true\r\n        },\r\n        AuthenticationService,\r\n        AuthGuard,\r\n        AuthorizationService,\r\n        ConfirmationService,\r\n        ConsoleMessageService,\r\n        DialogMessageService,\r\n        DialogService,\r\n        ErrorService,\r\n        FilterService,\r\n        MessageService,\r\n        MenuService,\r\n        SelectOptionsService,\r\n        //[end] app services\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\r\nexport function jwtTokenGetter() {\r\n    return localStorage.getItem(environment.auth_key);\r\n}\r\n\r\nexport function HttpLoaderFactory(http: HttpClient) {\r\n    return new TranslateHttpLoader(http);\r\n}","import { AccessControl } from \"src/app/tools/access-control\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { Confirmation, ConfirmationService } from \"primeng/api\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ApiResultEnum } from \"src/app/enums/api-result-enum\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { Identifiable } from \"src/app/interfaces/identifiable\";\r\n\r\nexport abstract class AccessControlComponent<T extends Identifiable> {\r\n\r\n  protected abstract readonly deletedEntityInstanceIdentificationInitializer: (deletedEntity: T) => string;\r\n\r\n  private accessControl: AccessControl;\r\n\r\n  public get hasAccessToButtons(): boolean {\r\n    return this.accessControl.hasAccessToButtons;\r\n  }\r\n\r\n  public get onEditLabelId(): string {\r\n    return this.accessControl.hasAccessToButtons ? 'General.Edit' : 'General.Details';\r\n  }\r\n\r\n  public readonly onDeleteLabelId = 'General.Delete';\r\n\r\n  constructor(\r\n    protected readonly authorizationService: AuthorizationService,\r\n    protected readonly confirmationService: ConfirmationService,\r\n    protected readonly consoleMessageService: ConsoleMessageService,\r\n    public readonly deletionKey: string,\r\n    protected readonly deletionLinkInitializer: (...args: any[]) => string,\r\n    protected readonly dialogMessageService: DialogMessageService,\r\n    protected readonly entityName: string,\r\n    protected readonly errorService: ErrorService,\r\n    protected readonly httpClient: HttpClient,\r\n    protected readonly onAfterDeletionSuccessOperationsHandler: (...args: any[]) => void,\r\n    protected readonly router: Router,\r\n    public readonly translate: TranslateService,\r\n    public readonly userPermissions: number[]) {\r\n\r\n    this.accessControl = new AccessControl(this.authorizationService, this.userPermissions);\r\n  }\r\n\r\n  public onDelete(entity: T) {\r\n    this.confirmationService.confirm(<Confirmation>{\r\n      key: this.deletionKey,\r\n      message: `${this.translate.instant(this.entityName + '.DeletionConfirmation')} ${this.deletedEntityInstanceIdentificationInitializer(entity)}?`,\r\n      accept: () => {\r\n        this.deleteEntity(entity);\r\n      }\r\n    });\r\n  }\r\n\r\n  private deleteEntity(entity: T) {\r\n    this.httpClient\r\n      .delete<string>(this.deletionLinkInitializer(entity.Id))\r\n      .subscribe({\r\n        next: result => {\r\n          if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n            this.dialogMessageService.addSuccess(this.translate.instant(`${this.entityName}.Deleted`));\r\n          }\r\n          else {\r\n            this.dialogMessageService.addError(this.getErrorMessageForResult(result) ?? this.errorService.getDefaultErrorMessage());\r\n          }\r\n\r\n          this.onAfterDeletionSuccessOperationsHandler();\r\n\r\n          console.log(this.consoleMessageService.getConsoleMessageWithResultForEntityAfterDeletion(this.entityName, result));\r\n        },\r\n        error: error => {\r\n          this.dialogMessageService.addError(this.errorService.getFirstTranslatedErrorMessage(error));\r\n        }\r\n      });\r\n  }\r\n\r\n  protected getErrorMessageForResult(result: string): string | undefined {\r\n    if (Object.keys(ApiResultEnum).includes(result)) {\r\n      const apiErrorKey = ApiResultEnum[Number(this.getApiResultKeyByValue(result))].toString();\r\n      return `${this.entityName}.Messages.${apiErrorKey}`;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private getApiResultKeyByValue(value: string): keyof ApiResultEnum | undefined {\r\n    const keys = Object.keys(ApiResultEnum).filter((key) => (ApiResultEnum as any)[key] === value);\r\n    return keys.length > 0 ? keys[0] as keyof ApiResultEnum : undefined;\r\n  }\r\n}","import { AccessControl } from \"src/app/tools/access-control\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { FormComponent } from \"./form\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { Confirmation, ConfirmationService } from \"primeng/api\";\r\nimport { ApiResultEnum } from \"src/app/enums/api-result-enum\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\n\r\nexport abstract class AccessControlFormComponent<T>\r\n  extends FormComponent<T> {\r\n\r\n  protected abstract override readonly afterSubmitionCustomOperationsHandler?: (...args: any[]) => void;\r\n  protected abstract readonly deletedEntityInstanceIdentificationInitializer: (...args: any[]) => string;\r\n  protected readonly entityId: string | number;\r\n  protected readonly onAfterDeletionSuccessNavigateUsingLinkHandler?: (link?: string) => void;\r\n  protected override readonly onAfterSubmitionSuccessNavigateUsingLinkHandler?: (link?: string) => void;\r\n  protected override readonly onBackNavigateUsingLinkHandler?: (link?: string) => void;\r\n\r\n  private readonly deletionLink: string;\r\n  private readonly accessControl: AccessControl;\r\n\r\n  public get hasAccessToButtons(): boolean {\r\n    return this.accessControl.hasAccessToButtons;\r\n  }\r\n\r\n  constructor(\r\n    protected readonly activatedRoute: ActivatedRoute,\r\n    protected readonly authorizationService: AuthorizationService,\r\n    protected readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    public readonly deletionKey: string,\r\n    protected readonly deletionLinkInitializer: (...args: any[]) => string,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly entityName: string,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly mode: FormModeEnum,\r\n    protected override readonly router: Router,\r\n    public override readonly submitionLink: string,\r\n    public override readonly translate: TranslateService,\r\n    public userPermissions: number[],\r\n    protected override readonly afterSubmitionNavigationLink?: string) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      entityName,\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      mode,\r\n      router,\r\n      submitionLink,\r\n      translate);\r\n\r\n    this.accessControl = new AccessControl(this.authorizationService, this.userPermissions);\r\n    this.entityId = this.activatedRoute.snapshot.params[\"id\"];\r\n    this.deletionLink = deletionLinkInitializer(this.entityId);\r\n    this.isDisabled = true;\r\n  }\r\n\r\n  public onDelete() {\r\n    this.confirmationService.confirm(<Confirmation>{\r\n      key: this.deletionKey,\r\n      message: `${this.translate.instant(this.entityName + '.DeletionConfirmation')} ${this.deletedEntityInstanceIdentificationInitializer()}?`,\r\n      accept: () => {\r\n        this.isExecuting = true;\r\n        this.deleteEntity();\r\n      }\r\n    });\r\n  }\r\n\r\n  protected override updateForm(obj?: { [key: string]: any }) {\r\n    super.updateForm(obj);\r\n    this.setAccess();\r\n\r\n    if (!this.form.disabled) {\r\n      this.formValidator.updateAllControlsToTouched();\r\n    }\r\n  }\r\n\r\n  private deleteEntity() {\r\n    this.httpClient\r\n      .delete<string>(this.deletionLink)\r\n      .subscribe({\r\n        next: result => {\r\n          if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n            this.dialogMessageService.addSuccess(this.translate.instant(`${this.entityName}.Deleted`));\r\n\r\n            if (!this.onAfterDeletionSuccessNavigateUsingLinkHandler) {\r\n              this.router.navigate([this.afterSubmitionNavigationLink]);\r\n            }\r\n            else {\r\n              this.onAfterDeletionSuccessNavigateUsingLinkHandler();\r\n            }\r\n          }\r\n          else {\r\n            this.dialogMessageService.addError(this.getErrorMessageForResult(result) ?? this.errorService.getDefaultErrorMessage());\r\n          }\r\n\r\n          console.log(this.consoleMessageService.getConsoleMessageWithResultForEntityAfterDeletion(this.entityName, result));\r\n          this.isExecuting = false;\r\n        },\r\n        error: error => {\r\n          this.dialogMessageService.addError(this.errorService.getFirstTranslatedErrorMessage(error));\r\n          this.isExecuting = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  private setAccess() {\r\n    if (this.hasAccessToButtons) {\r\n      this.form.enable();\r\n    }\r\n    else {\r\n      this.form.disable();\r\n    }\r\n\r\n    this.isDisabled = !this.hasAccessToButtons;\r\n  }\r\n}","import { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { DynamicDialogConfig, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { AccessControlFormComponent } from \"./access-control-form\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { DialogConfigData } from \"../dialogs/dialog-config-data\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\n\r\nexport abstract class AccessControlOpenableAsDialogForm<T extends DialogConfigData, U>\r\n  extends AccessControlFormComponent<U> {\r\n\r\n  protected readonly _dialogConfigData: T | undefined;\r\n  protected override readonly entityId: string | number;\r\n  protected override readonly onAfterDeletionSuccessNavigateUsingLinkHandler = this.onAfterDeletionSuccessNavigateUsingLink;\r\n  protected override readonly onAfterSubmitionSuccessNavigateUsingLinkHandler = this.onAfterSubmitSuccessNavigateUsingLink;\r\n  protected override readonly onBackNavigateUsingLinkHandler = this.onBackNavigateUsingLink;\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    public override readonly deletionKey: string,\r\n    protected override readonly deletionLinkInitializer: (...args: any[]) => string,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly entityName: string,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly mode: FormModeEnum,\r\n    public readonly openedAsDialogConfig: DynamicDialogConfig,\r\n    public readonly openedAsDialogRef: DynamicDialogRef,\r\n    protected override readonly router: Router,\r\n    public override readonly submitionLink: string,\r\n    public override readonly translate: TranslateService,\r\n    public override readonly userPermissions: number[],\r\n    protected override readonly afterSubmitionNavigationLink?: string\r\n  ) {\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      deletionKey,\r\n      deletionLinkInitializer,\r\n      dialogMessageService,\r\n      entityName,\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      mode,\r\n      router,\r\n      submitionLink,\r\n      translate,\r\n      userPermissions,\r\n      afterSubmitionNavigationLink\r\n    );\r\n\r\n    this._dialogConfigData = this.getOpenedAsDialogData(openedAsDialogConfig?.data);\r\n    this.entityId = this.getEntityId();\r\n  }\r\n\r\n  public onBack() {\r\n    this.onBackNavigateUsingLink();\r\n  }\r\n\r\n  private onAfterDeletionSuccessNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private onAfterSubmitSuccessNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private onBackNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private getEntityId() {\r\n    if (this.openedAsDialogRef) {\r\n      return this._dialogConfigData?.Id;\r\n    }\r\n    else {\r\n      return this.activatedRoute.snapshot.params[\"id\"];\r\n    }\r\n  }\r\n\r\n  private getOpenedAsDialogData(data: any) {\r\n    return this.isOfTypeT(data) ? data : undefined;\r\n  }\r\n\r\n  private isOfTypeT(value: any): value is T {\r\n    return typeof value === 'object' && value !== null;\r\n  }\r\n}","import { Directive, Input, OnInit } from \"@angular/core\";\r\nimport { SimpleFormComponent } from \"./simple-form\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\n\r\n@Directive({\r\n  selector: \"dynamic-requirement-form\"\r\n})\r\nexport abstract class DynamicRequirementFormComponent\r\n  extends SimpleFormComponent {\r\n\r\n  @Input('requiredFields') requiredFields: string[] = [];\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder\r\n  ) {\r\n    super(formBuilder);\r\n  }\r\n\r\n  protected updateFormAfterInit(): void {\r\n    this.requiredFields.forEach(fieldName => {\r\n      const requiredField = this.form.get(fieldName);\r\n      if (requiredField) {\r\n        requiredField.setValidators([Validators.required]);\r\n      }\r\n    });\r\n  }\r\n}","import { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { PostAction } from \"./post-action\";\r\nimport { PutAction } from \"./put-action\";\r\nimport { FormSubmitionAction } from \"./form-submition-action\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nexport class FormSubmitionActionFactory<T> {\r\n\r\n  constructor(\r\n    private readonly consoleMessageService: ConsoleMessageService,\r\n    private readonly httpClient: HttpClient) { }\r\n\r\n  public getFormSubmitionAction<T>(mode: FormModeEnum): FormSubmitionAction<T> | undefined {\r\n    switch (mode) {\r\n      case FormModeEnum.Creation:\r\n        return new PostAction<T>(this.consoleMessageService, this.httpClient);\r\n\r\n      case FormModeEnum.Edition:\r\n        return new PutAction<T>(this.consoleMessageService, this.httpClient);\r\n\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n}","import { Observable } from \"rxjs\";\r\nimport { FormSubmitionAction } from \"./form-submition-action\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { FormComponent } from \"../form\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nexport class PostAction<T>\r\n  implements FormSubmitionAction<T> {\r\n\r\n  constructor(\r\n    private readonly consoleMessageService: ConsoleMessageService,\r\n    private readonly httpClient: HttpClient) {\r\n  }\r\n\r\n  getConsoleMessage: (entity: string, result: string) => string = (entity: string, result: string) => {\r\n    return this.consoleMessageService.getConsoleMessageWithResultForEntityAfterCreation(entity, result);\r\n  }\r\n\r\n  execute(formComponent: FormComponent<T>): Observable<string> {\r\n    const entity = formComponent.beforeSubmitionCustomOperationsHandler();\r\n    return this.httpClient.post<string>(formComponent.submitionLink, entity);\r\n  }\r\n\r\n  successMessageTag: string = 'Created';\r\n}","import { Observable } from \"rxjs\";\r\nimport { FormSubmitionAction } from \"./form-submition-action\";\r\nimport { FormComponent } from \"../form\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nexport class PutAction<T>\r\n  implements FormSubmitionAction<T> {\r\n\r\n  constructor(\r\n    private readonly consoleMessageService: ConsoleMessageService,\r\n    private readonly httpClient: HttpClient) { }\r\n\r\n  getConsoleMessage: (entity: string, result: string) => string = (entity: string, result: string) => {\r\n    return this.consoleMessageService.getConsoleMessageWithResultForEntityAfterUpdate(entity, result);\r\n  }\r\n\r\n  execute(formComponent: FormComponent<T>): Observable<string> {\r\n    const entity = formComponent.beforeSubmitionCustomOperationsHandler();\r\n    return this.httpClient.put<string>(formComponent.submitionLink, entity);\r\n  }\r\n\r\n  successMessageTag: string = 'Updated';\r\n}","import { FormBuilder, FormGroup } from \"@angular/forms\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { FormValidator } from \"src/app/ui-controls/form-validator\";\r\nimport { FormSubmitionActionFactory as FormSubmitionActionFactory } from \"./form-factories/form-submition-action-factory\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ApiResultEnum } from \"src/app/enums/api-result-enum\";\r\nimport { Router } from \"@angular/router\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\n\r\nexport abstract class FormComponent<T> {\r\n\r\n  public readonly beforeSubmitionCustomOperationsHandler: (...args: any[]) => T;\r\n  public readonly formMode: typeof FormModeEnum = FormModeEnum;\r\n\r\n  protected readonly afterSubmitionCustomOperationsHandler?: (...args: any[]) => void;\r\n  protected readonly onAfterSubmitionSuccessNavigateUsingLinkHandler?: (link?: string) => void;\r\n  protected readonly onBackNavigateUsingLinkHandler?: (link?: string) => void;\r\n\r\n  private _formValidator: FormValidator;\r\n\r\n  form: FormGroup;\r\n  isDisabled: boolean = false;\r\n  isExecuting: boolean = false;\r\n\r\n  public get shouldActionsBeDisabled(): boolean {\r\n    return this.form.invalid ||\r\n      this.isDisabled ||\r\n      this.isExecuting;\r\n  }\r\n\r\n  protected get formValidator(): FormValidator {\r\n    return this._formValidator;\r\n  }\r\n  private set formValidator(validator: FormValidator) {\r\n    this._formValidator = validator;\r\n  }\r\n\r\n  constructor(\r\n    protected readonly consoleMessageService: ConsoleMessageService,\r\n    protected readonly dialogMessageService: DialogMessageService,\r\n    protected readonly entityName: string,\r\n    protected readonly errorService: ErrorService,\r\n    protected readonly formBuilder: FormBuilder,\r\n    protected readonly httpClient: HttpClient,\r\n    protected readonly mode: FormModeEnum,\r\n    protected readonly router: Router,\r\n    public readonly submitionLink: string,\r\n    public readonly translate: TranslateService,\r\n    protected readonly afterSubmitionNavigationLink?: string) {\r\n  }\r\n\r\n  protected createForm(formFieldGroup?: object) {\r\n    this.form = this.formBuilder.group(formFieldGroup ?? {});\r\n    this.formValidator = new FormValidator(this.form);\r\n  }\r\n\r\n  public onSubmit() {\r\n    this.isExecuting = true;\r\n    const onSubmitAction = new FormSubmitionActionFactory(this.consoleMessageService, this.httpClient)\r\n      .getFormSubmitionAction<T>(this.mode);\r\n\r\n    if (!onSubmitAction)\r\n      return;\r\n\r\n    onSubmitAction\r\n      .execute(this)\r\n      .subscribe({\r\n        next: result => {\r\n          if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n            if (!this.onAfterSubmitionSuccessNavigateUsingLinkHandler) {\r\n              this.router.navigate([this.afterSubmitionNavigationLink]);\r\n            }\r\n            else {\r\n              this.onAfterSubmitionSuccessNavigateUsingLinkHandler(this.afterSubmitionNavigationLink);\r\n            }\r\n\r\n            this.dialogMessageService.addSuccess(this.translate.instant(`${this.entityName}.${onSubmitAction.successMessageTag}`));\r\n          }\r\n          else {\r\n            this.dialogMessageService.addError(this.getErrorMessageForResult(result) ?? this.errorService.getDefaultErrorMessage());\r\n          }\r\n\r\n          console.log(onSubmitAction.getConsoleMessage(this.entityName, result));\r\n\r\n          if (this.afterSubmitionCustomOperationsHandler) {\r\n            this.afterSubmitionCustomOperationsHandler();\r\n          }\r\n\r\n          this.isExecuting = false;\r\n        },\r\n        error: error => {\r\n          const firstTranslatedErrorMessage = this.errorService.getFirstTranslatedErrorMessage(error);\r\n          if (firstTranslatedErrorMessage !== this.errorService.getDefaultErrorMessage()) {\r\n            this.dialogMessageService.addError(this.errorService.getFirstTranslatedErrorMessage(error));\r\n          }\r\n          else {\r\n            const requestValidationByDatabaseErrorMessage = this.getErrorMessageForResult(this.errorService.getFirstErrorMessageKey(error));\r\n            this.dialogMessageService.addError(requestValidationByDatabaseErrorMessage ? this.translate.instant(requestValidationByDatabaseErrorMessage) : firstTranslatedErrorMessage);\r\n          }\r\n          this.isExecuting = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  protected updateForm(obj?: { [key: string]: any }) {\r\n    if (obj) {\r\n      this.form.patchValue(obj);\r\n    }\r\n  }\r\n\r\n  protected getErrorMessageForResult(result: string): string | undefined {\r\n    if (Object.keys(ApiResultEnum).includes(result)) {\r\n      const apiErrorKey = ApiResultEnum[Number(this.getApiResultKeyByValue(result))].toString();\r\n      return `${this.entityName}.Messages.${apiErrorKey}`;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private getApiResultKeyByValue(value: string): keyof ApiResultEnum | undefined {\r\n    const keys = Object.keys(ApiResultEnum).filter((key) => (ApiResultEnum as any)[key] === value);\r\n    return keys.length > 0 ? keys[0] as keyof ApiResultEnum : undefined;\r\n  }\r\n}","import { Router } from \"@angular/router\";\r\nimport { DynamicDialogConfig, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { FormComponent } from \"./form\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\n\r\nexport abstract class OpenableAsDialogForm<T, U>\r\n  extends FormComponent<U> {\r\n\r\n  protected readonly _dialogConfigData: T | undefined;\r\n  protected readonly onAfterDeletionSuccessNavigateUsingLinkHandler: (...args: any[]) => void = this.onAfterDeletionSuccessNavigateUsingLink;\r\n  protected override readonly onAfterSubmitionSuccessNavigateUsingLinkHandler = this.onAfterSubmitSuccessNavigateUsingLink;\r\n  protected override readonly onBackNavigateUsingLinkHandler = this.onBackNavigateUsingLink;\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly entityName: string,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly mode: FormModeEnum,\r\n    public openedAsDialogConfig: DynamicDialogConfig,\r\n    public openedAsDialogRef: DynamicDialogRef,\r\n    protected override readonly router: Router,\r\n    public override submitionLink: string,\r\n    public override readonly translate: TranslateService,\r\n    protected override afterSubmitionNavigationLink?: string) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      entityName,\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      mode,\r\n      router,\r\n      submitionLink,\r\n      translate,\r\n      afterSubmitionNavigationLink\r\n    );\r\n\r\n    this._dialogConfigData = this.getOpenedAsDialogData(openedAsDialogConfig?.data);\r\n  }\r\n\r\n  public onBack() {\r\n    this.onBackNavigateUsingLink();\r\n  }\r\n\r\n  private onAfterDeletionSuccessNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private onAfterSubmitSuccessNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private onBackNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private getOpenedAsDialogData(data: any) {\r\n    return this.isOfTypeT(data) ? data : undefined;\r\n  }\r\n\r\n  private isOfTypeT(value: any): value is T {\r\n    return typeof value === 'object' && value !== null;\r\n  }\r\n}","import { FormBuilder, FormGroup } from \"@angular/forms\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { FormValidator } from \"src/app/ui-controls/form-validator\";\r\n\r\nexport abstract class SimpleFormComponent {\r\n\r\n  public readonly formMode: typeof FormModeEnum = FormModeEnum;\r\n\r\n  public get form(): FormGroup {\r\n    return this._form;\r\n  };\r\n  private set form(value: FormGroup) {\r\n    this._form = value;\r\n  }\r\n\r\n  protected get formValidator(): FormValidator {\r\n    return this._formValidator;\r\n  }\r\n  private set formValidator(value: FormValidator) {\r\n    this._formValidator = value;\r\n  }\r\n\r\n  private _form: FormGroup;\r\n  private _formValidator: FormValidator;\r\n\r\n  isDisabled: boolean = false;\r\n  isExecuting: boolean = false;\r\n\r\n  constructor(protected readonly formBuilder: FormBuilder) { }\r\n\r\n  public get shouldActionsBeDisabled(): boolean {\r\n    return this.form.invalid ||\r\n      this.isDisabled ||\r\n      this.isExecuting;\r\n  }\r\n\r\n  protected createForm(formFieldGroup?: object, reloadForm = false) {\r\n    this.form = reloadForm ? new FormGroup(formFieldGroup) : this.formBuilder.group(formFieldGroup ?? {});\r\n    this.formValidator = new FormValidator(this.form);\r\n  }\r\n\r\n  protected updateForm(obj?: { [key: string]: any }) {\r\n    if (obj)\r\n      this.form.patchValue(obj);\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { SelectItem } from \"primeng/api\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { Address } from \"src/app/interfaces/address\";\r\nimport { DynamicRequirementFormComponent } from \"../abstract/forms/dynamic-requirement-form\";\r\n\r\n@Component({\r\n  selector: 'address',\r\n  templateUrl: './address.html'\r\n})\r\nexport class AddressComponent\r\n  extends DynamicRequirementFormComponent\r\n  implements OnInit {\r\n\r\n  @Input('entityAddress') entityAddress?: Address;\r\n  @Input('showTitle') showTitle?: boolean;\r\n\r\n  countries: SelectItem[];\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public readonly translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n    this.createForm({\r\n      ApartmentNumber: [''],\r\n      City: [''],\r\n      CountryId: [''],\r\n      Email: [''],\r\n      Id: null,\r\n      PhoneNumber: [''],\r\n      PostalCode: [''],\r\n      StreetName: [''],\r\n      StreetNumber: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n    this.updateFormAfterInit();\r\n\r\n    if (this.entityAddress) {\r\n      this.updateForm({\r\n        ApartmentNumber: this.entityAddress.ApartmentNumber,\r\n        City: this.entityAddress.City,\r\n        CountryId: this.entityAddress.Country.Id,\r\n        Email: this.entityAddress.Email,\r\n        Id: this.entityAddress.Id,\r\n        PhoneNumber: this.entityAddress.PhoneNumber,\r\n        PostalCode: this.entityAddress.PostalCode,\r\n        StreetName: this.entityAddress.StreetName,\r\n        StreetNumber: this.entityAddress.StreetNumber\r\n      });\r\n    }\r\n  }\r\n\r\n  private populateDropdowns() {\r\n    this.selectOptionsService\r\n      .getCountries()\r\n      .subscribe(options => {\r\n        this.countries = options;\r\n      });\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { SimpleFormComponent } from \"../abstract/forms/simple-form\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ClientAddress } from \"src/app/interfaces/address\";\r\n\r\n@Component({\r\n  selector: 'company-client-address',\r\n  templateUrl: './company-client-address.html'\r\n})\r\nexport class CompanyClientAddressComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  @Input('clientAddress') clientAddress?: ClientAddress;\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder,\r\n    public readonly translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n    this.createForm({\r\n      NationalCompanyId: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.clientAddress) {\r\n      this.updateForm({\r\n        NationalCompanyId: this.clientAddress.NationalId\r\n      });\r\n    }\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { SimpleFormComponent } from \"../abstract/forms/simple-form\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ClientAddress } from \"src/app/interfaces/address\";\r\n\r\n@Component({\r\n  selector: 'private-client-address',\r\n  templateUrl: './private-client-address.html'\r\n})\r\nexport class PrivateClientAddressComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  @Input('clientAddress') clientAddress?: ClientAddress;\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder,\r\n    public readonly translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n    this.createForm({\r\n      NationalCitizenId: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.clientAddress) {\r\n      this.updateForm({\r\n        NationalCitizenId: this.clientAddress.NationalId\r\n      });\r\n    }\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { LazyLoadEvent, SelectItem } from \"primeng/api\";\r\nimport { PngTable, PngTableColumn } from \"src/app/interfaces/png\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { FilterService } from \"src/app/services/filters/filter.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { AuditListItemModel, AuditListModel } from \"src/app/interfaces/audit\";\r\nimport { concatMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: \"audit-list-for-entity\",\r\n  templateUrl: \"./audit-list-for-entity.html\"\r\n})\r\nexport class AuditListForEntityComponent implements OnInit {\r\n\r\n  private readonly _dataPopulator = {\r\n    fieldNamesForObjectHistory: {\r\n      get: () => this.getFieldNamesForObjectHistory(),\r\n      set: (options: SelectItem[]) => this.setFieldNamesForObjectHistory(options)\r\n    },\r\n    objectHistory: {\r\n      get: (event: LazyLoadEvent) => this.getObjectHistory(event),\r\n      set: (audits: AuditListModel) => this.setObjectHistory(audits)\r\n    }\r\n  };\r\n\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  public audits: AuditListItemModel[];\r\n  public table: PngTable;\r\n  public fieldNameOptions: SelectItem[] = [];\r\n  public totalRecords: number;\r\n\r\n  @Input() entityId: string;\r\n  @Input() entityTableName: string;\r\n\r\n  constructor(\r\n    public readonly filterService: FilterService,\r\n    private readonly httpClient: HttpClient,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public readonly translate: TranslateService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.table = new PngTable([\r\n      <PngTableColumn>{\r\n        field: 'UserName',\r\n        header: 'Audit.UserName',\r\n        width: '20%',\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'CreatedOn',\r\n        header: 'Audit.CreatedOn',\r\n        width: '20%'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'FieldName',\r\n        header: 'Audit.FieldName',\r\n        width: '20%',\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'OldValue',\r\n        header: 'Audit.OldValue',\r\n        width: '20%',\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'NewValue',\r\n        header: 'Audit.NewValue',\r\n        width: '20%',\r\n        applyGlobalFiltering: true\r\n      }\r\n    ]);\r\n  }\r\n\r\n  public loadAuditsLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n\r\n    this._dataPopulator.objectHistory\r\n      .get(event)\r\n      .pipe(\r\n        concatMap(result => {\r\n          this._dataPopulator.objectHistory.set(result);\r\n\r\n          return this._dataPopulator.fieldNamesForObjectHistory.get();\r\n        })\r\n      )\r\n      .subscribe(result => {\r\n        this._dataPopulator.fieldNamesForObjectHistory.set(result);\r\n      });\r\n  }\r\n\r\n  private getFieldNamesForObjectHistory() {\r\n    return this.selectOptionsService\r\n      .getFieldNamesForObjectHistory(this.tempLazyLoadEvent, this.table.cols, this.entityId, this.entityTableName);\r\n  }\r\n\r\n  private getObjectHistory(event: LazyLoadEvent) {\r\n    return this.httpClient\r\n      .get<AuditListModel>(ApiRoutes.audit.getObjectHistory(event, this.table.cols, this.entityId, this.entityTableName));\r\n  }\r\n\r\n  private setFieldNamesForObjectHistory(options: SelectItem[]) {\r\n    this.fieldNameOptions = options;\r\n    this.table.setOptionsForColumn(\"FieldName\", this.fieldNameOptions);\r\n  }\r\n\r\n  private setObjectHistory(audits: AuditListModel) {\r\n    this.totalRecords = audits.TotalRowsCount;\r\n    this.audits = audits.List;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { SelectItem } from \"primeng/api\";\r\nimport { ClientTypeEnum } from \"src/app/enums/client-type-enum\";\r\nimport { PrivateClientComponent } from \"./private-client\";\r\nimport { AddressComponent } from \"../addresses/address\";\r\nimport { PrivateClientAddressComponent } from \"../addresses/private-client-address\";\r\nimport { CompanyClientAddressComponent } from \"../addresses/company-client-address\";\r\nimport { ClientCreationModel } from \"src/app/interfaces/client\";\r\nimport { ClientAddress, Country, addressFormFields } from \"src/app/interfaces/address\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { FormComponent } from \"../abstract/forms/form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\n\r\n@Component({\r\n  selector: \"client-create\",\r\n  templateUrl: \"./client-create.html\"\r\n})\r\nexport class ClientCreationComponent\r\n  extends FormComponent<ClientCreationModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareClientCreationModel;\r\n\r\n  @ViewChild('addressForm') addressForm: AddressComponent;\r\n  @ViewChild('companyClientAddressForm') companyClientAddressForm?: CompanyClientAddressComponent;\r\n  @ViewChild('privateClientAddressForm') privateClientAddressForm?: PrivateClientAddressComponent;\r\n  @ViewChild('privateClientForm') privateClientForm?: PrivateClientComponent;\r\n\r\n  readonly clientAddressRequiredFields: string[] = [\r\n    addressFormFields.City,\r\n    addressFormFields.Country,\r\n    addressFormFields.PostalCode,\r\n    addressFormFields.StreetName,\r\n    addressFormFields.StreetNumber\r\n  ];\r\n  readonly clientType: typeof ClientTypeEnum = ClientTypeEnum;\r\n\r\n  public override get shouldActionsBeDisabled(): boolean {\r\n    return super.shouldActionsBeDisabled ||\r\n      (this.addressForm?.form.invalid ?? false) ||\r\n      (this.companyClientAddressForm?.form.invalid ?? false) ||\r\n      (this.privateClientAddressForm?.form.invalid ?? false) ||\r\n      (this.privateClientForm?.form.invalid ?? false);\r\n  }\r\n\r\n  clientTypes: SelectItem[];\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'Client',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Creation,\r\n      router,\r\n      ApiRoutes.client.post,\r\n      translate,\r\n      Routes.clients.navigations.list\r\n    );\r\n\r\n    this.createForm({\r\n      ClientTypeId: null,\r\n      Name: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.clients.navigations.list]);\r\n  }\r\n\r\n  private getClientNationalId(): string {\r\n    switch (Number(this.form.value.ClientTypeId)) {\r\n      case ClientTypeEnum.Private:\r\n        return this.privateClientAddressForm?.form.value.NationalCitizenId;\r\n      case ClientTypeEnum.Company:\r\n        return this.companyClientAddressForm?.form.value.NationalCompanyId;\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  private populateDropdowns() {\r\n    this.selectOptionsService\r\n      .getClientTypes()\r\n      .subscribe(options => {\r\n        this.clientTypes = options;\r\n      });\r\n  }\r\n\r\n  private prepareClientCreationModel(): ClientCreationModel {\r\n    const clientAddress = <ClientAddress>{\r\n      ApartmentNumber: this.addressForm.form.value.ApartmentNumber,\r\n      City: this.addressForm.form.value.City,\r\n      Country: <Country>{\r\n        Id: this.addressForm.form.value.CountryId\r\n      },\r\n      Email: this.addressForm.form.value.Email,\r\n      NationalId: this.getClientNationalId(),\r\n      PhoneNumber: this.addressForm.form.value.PhoneNumber,\r\n      PostalCode: this.addressForm.form.value.PostalCode,\r\n      StreetName: this.addressForm.form.value.StreetName,\r\n      StreetNumber: this.addressForm.form.value.StreetNumber\r\n    };\r\n    const client = <ClientCreationModel>{\r\n      Addresses: [clientAddress],\r\n      FirstName: this.privateClientForm?.form.value.FirstName,\r\n      LastName: this.privateClientForm?.form.value.LastName,\r\n      Name: this.form.value.Name,\r\n      TypeId: this.form.value.ClientTypeId\r\n    };\r\n\r\n    return client;\r\n  }\r\n}","import { AfterViewInit, Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { ConfirmationService, SelectItem } from \"primeng/api\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission-enum\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { ClientTypeEnum } from \"src/app/enums/client-type-enum\";\r\nimport { ClientDetailsModel } from \"src/app/interfaces/client\";\r\nimport { AddressComponent } from \"../addresses/address\";\r\nimport { CompanyClientAddressComponent } from \"../addresses/company-client-address\";\r\nimport { PrivateClientAddressComponent } from \"../addresses/private-client-address\";\r\nimport { PrivateClientComponent } from \"./private-client\";\r\nimport { ClientAddress, Country, addressFormFields } from \"src/app/interfaces/address\";\r\nimport { AccessControlFormComponent } from \"../abstract/forms/access-control-form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { Routes } from \"src/app/routes\";\r\n\r\n@Component({\r\n  selector: \"client-details\",\r\n  templateUrl: \"./client-details.html\"\r\n})\r\nexport class ClientDetailsComponent\r\n  extends AccessControlFormComponent<ClientDetailsModel>\r\n  implements OnInit, AfterViewInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareClientDetailsModel;\r\n\r\n  protected override afterSubmitionCustomOperationsHandler = undefined;\r\n  protected override readonly deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n  protected override readonly entityId: string;\r\n\r\n  activeTab: number = 0;\r\n  client: ClientDetailsModel;\r\n  clientTypes: SelectItem[];\r\n  routes = Routes;\r\n\r\n  readonly clientAddressRequiredFields: string[] = [\r\n    addressFormFields.City,\r\n    addressFormFields.Country,\r\n    addressFormFields.PostalCode,\r\n    addressFormFields.StreetName,\r\n    addressFormFields.StreetNumber\r\n  ];\r\n  readonly clientType: typeof ClientTypeEnum = ClientTypeEnum;\r\n\r\n  public override get shouldActionsBeDisabled(): boolean {\r\n    return super.shouldActionsBeDisabled ||\r\n      (this.addressForm?.form.invalid ?? false) ||\r\n      (this.companyClientAddressForm?.form.invalid ?? false) ||\r\n      (this.privateClientAddressForm?.form.invalid ?? false) ||\r\n      (this.privateClientForm?.form.invalid ?? false);\r\n  }\r\n\r\n  @ViewChild('addressForm') addressForm: AddressComponent;\r\n  @ViewChild('companyClientAddressForm') companyClientAddressForm?: CompanyClientAddressComponent;\r\n  @ViewChild('privateClientAddressForm') privateClientAddressForm?: PrivateClientAddressComponent;\r\n  @ViewChild('privateClientForm') privateClientForm?: PrivateClientComponent;\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteClient',\r\n      ApiRoutes.client.delete,\r\n      dialogMessageService,\r\n      'Client',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      router,\r\n      ApiRoutes.client.put,\r\n      translate,\r\n      [UserPermissionEnum.Clients_CanModify],\r\n      Routes.clients.navigations.list);\r\n\r\n    this.createForm({\r\n      ClientTypeId: null,\r\n      Name: ['', Validators.required]\r\n    });\r\n\r\n    this.loadClient();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const activeTab = this.activatedRoute.snapshot.params['activeTab'];\r\n    if (activeTab) {\r\n      this.switchActiveTab(Number(activeTab));\r\n    }\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.clients.navigations.list]);\r\n  }\r\n\r\n  public switchActiveTab(tabIndex: number) {\r\n    this.activeTab = tabIndex;\r\n  }\r\n\r\n  private getClientNationalId(): string {\r\n    switch (Number(this.form.value.ClientTypeId)) {\r\n      case ClientTypeEnum.Private:\r\n        return this.privateClientAddressForm?.form.value.NationalCitizenId;\r\n      case ClientTypeEnum.Company:\r\n        return this.companyClientAddressForm?.form.value.NationalCompanyId;\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  private getEntityInstanceName(): string {\r\n    return this.client.Name;\r\n  }\r\n\r\n  private loadClient() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<ClientDetailsModel>(ApiRoutes.client.getById(this.entityId))\r\n      .subscribe(result => {\r\n        this.client = result;\r\n\r\n        this.updateForm({\r\n          ClientTypeId: this.client.TypeId.toString(),\r\n          Name: this.client.Name,\r\n        });\r\n      });\r\n  }\r\n\r\n  private populateDropdowns() {\r\n    this.selectOptionsService\r\n      .getClientTypes()\r\n      .subscribe(options => {\r\n        this.clientTypes = options;\r\n      });\r\n  }\r\n\r\n  private prepareClientDetailsModel(): ClientDetailsModel {\r\n    const clientAddress = <ClientAddress>{\r\n      ApartmentNumber: this.addressForm.form.value.ApartmentNumber,\r\n      City: this.addressForm.form.value.City,\r\n      Country: <Country>{\r\n        Id: this.addressForm.form.value.CountryId\r\n      },\r\n      Email: this.addressForm.form.value.Email,\r\n      Id: this.addressForm.form.value.Id,\r\n      NationalId: this.getClientNationalId(),\r\n      PhoneNumber: this.addressForm.form.value.PhoneNumber,\r\n      PostalCode: this.addressForm.form.value.PostalCode,\r\n      StreetName: this.addressForm.form.value.StreetName,\r\n      StreetNumber: this.addressForm.form.value.StreetNumber\r\n    };\r\n    const client = <ClientDetailsModel>{\r\n      Addresses: [clientAddress],\r\n      FirstName: this.privateClientForm?.form.value.FirstName,\r\n      Id: this.client.Id,\r\n      LastName: this.privateClientForm?.form.value.LastName,\r\n      Name: this.form.value.Name,\r\n      TypeId: this.form.value.ClientTypeId\r\n    };\r\n\r\n    return client;\r\n  }\r\n}","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { AccessControlComponent } from '../abstract/access-controls/access-control';\r\nimport { ConfirmationService, LazyLoadEvent, SelectItem } from 'primeng/api';\r\nimport { PngTableColumn } from 'src/app/interfaces/png';\r\nimport { Table } from 'primeng/table';\r\nimport { AuthorizationService } from 'src/app/services/authorization/authorization.service';\r\nimport { UserPermissionEnum } from 'src/app/enums/user-permission-enum';\r\nimport { ClientListItemModel, ClientListModel } from 'src/app/interfaces/client';\r\nimport { Router } from '@angular/router';\r\nimport { Routes } from 'src/app/routes';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ApiRoutes } from 'src/app/api-routes';\r\nimport { DialogMessageService } from 'src/app/services/messages/dialog-message.service';\r\nimport { ErrorService } from 'src/app/services/errors/error.service';\r\nimport { ConsoleMessageService } from 'src/app/services/messages/console-message.service';\r\nimport { SelectOptionsService } from 'src/app/services/select-options/select-options.service';\r\nimport { FilterService } from 'src/app/services/filters/filter.service';\r\nimport { FilterTypeEnum } from 'src/app/enums/filter-type-enum';\r\n\r\n@Component({\r\n  selector: \"client-list\",\r\n  templateUrl: \"./client-list.html\"\r\n})\r\nexport class ClientListComponent\r\n  extends AccessControlComponent<ClientListItemModel>\r\n  implements OnInit {\r\n\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n\r\n  private readonly _dataPopulator = {\r\n    multiSelects: {\r\n      clientTypes: {\r\n        get: () => this.getClientTypeMultiSelectData(),\r\n        set: (clientTypes: SelectItem[]) => this.setClientTypeMultiSelectData(clientTypes)\r\n      }\r\n    },\r\n    clients: {\r\n      get: (event: LazyLoadEvent) => this.getClients(event),\r\n      set: (clients: ClientListModel) => this.setClients(clients)\r\n    }\r\n  };\r\n\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  clients: ClientListItemModel[];\r\n  clientTypeOptions: SelectItem[];\r\n  cols: PngTableColumn[];\r\n  totalRecords: number;\r\n\r\n  @ViewChild('dataTable') dataTable: Table;\r\n\r\n  constructor(\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    public readonly filterService: FilterService,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionService: SelectOptionsService,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteClient',\r\n      ApiRoutes.client.delete,\r\n      dialogMessageService,\r\n      'Client',\r\n      errorService,\r\n      httpClient,\r\n      () => {\r\n        this._dataPopulator.clients\r\n          .get(this.tempLazyLoadEvent)\r\n          .subscribe(result => this._dataPopulator.clients.set(result));\r\n      },\r\n      router,\r\n      translate,\r\n      [UserPermissionEnum.Clients_CanModify]);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cols = [\r\n      <PngTableColumn>{\r\n        field: 'Name',\r\n        header: 'Client.Name',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true,\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'FirstName',\r\n        header: 'Client.FirstName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'LastName',\r\n        header: 'Client.LastName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'TypeName',\r\n        header: 'Client.TypeName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true,\r\n        replaceWith: 'ClientTypeId'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Actions',\r\n        header: '',\r\n        width: '20%'\r\n      }\r\n    ];\r\n\r\n    this._dataPopulator.multiSelects.clientTypes\r\n      .get()\r\n      .subscribe(clientTypes => this._dataPopulator.multiSelects.clientTypes.set(clientTypes));\r\n  }\r\n\r\n  public loadClientsLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n\r\n    this._dataPopulator.clients\r\n      .get(event)\r\n      .subscribe(result => this._dataPopulator.clients.set(result));\r\n  }\r\n\r\n  public onCreate() {\r\n    this.router.navigate([Routes.clients.navigations.creation]);\r\n  }\r\n\r\n  public onEdit(client: ClientListItemModel) {\r\n    this.router.navigate([Routes.clients.navigations.edition(client.Id)]);\r\n  }\r\n\r\n  private getClients(event: LazyLoadEvent) {\r\n    event.sortField ??= this.cols[0].field;\r\n\r\n    return this.httpClient\r\n      .get<ClientListModel>(ApiRoutes.client.getAll(event, this.cols));\r\n  }\r\n\r\n  private getClientTypeMultiSelectData() {\r\n    return this.selectOptionService.getClientTypes();\r\n  }\r\n\r\n  private getEntityInstanceName(client: ClientListItemModel): string {\r\n    return client.Name;\r\n  }\r\n\r\n  private setClientTypeMultiSelectData(clientTypes: SelectItem[]) {\r\n    this.clientTypeOptions = clientTypes;\r\n\r\n    const clientTypeColumn = this.cols.find(c => c.field === \"TypeName\");\r\n    if (clientTypeColumn) {\r\n      clientTypeColumn.options = this.clientTypeOptions;\r\n    }\r\n  }\r\n\r\n  private setClients(clients: ClientListModel) {\r\n    this.totalRecords = clients.TotalRowsCount;\r\n    this.clients = clients.List;\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { SimpleFormComponent } from \"../abstract/forms/simple-form\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ClientDetailsModel } from \"src/app/interfaces/client\";\r\n\r\n@Component({\r\n  selector: \"private-client\",\r\n  templateUrl: \"./private-client.html\"\r\n})\r\nexport class PrivateClientComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  @Input('client') client?: ClientDetailsModel;\r\n\r\n  constructor(\r\n    protected override formBuilder: FormBuilder,\r\n    public translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n    this.createForm({\r\n      FirstName: ['', Validators.required],\r\n      LastName: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.client) {\r\n      this.updateForm({\r\n        FirstName: this.client.FirstName,\r\n        LastName: this.client.LastName\r\n      });\r\n    }\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\n\r\n@Component({\r\n  selector: \"deletion-dialog\",\r\n  templateUrl: \"./deletion-dialog.html\"\r\n})\r\nexport class DeletionDialogComponent\r\n  implements OnInit {\r\n\r\n  @Input('deletionKey') deletionKey?: string;\r\n\r\n  constructor(\r\n    public translate: TranslateService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { MessageService } from 'primeng/api';\r\nimport { ErrorService } from 'src/app/services/errors/error.service';\r\nimport { SimpleFormComponent } from '../abstract/forms/simple-form';\r\n\r\n@Component({\r\n  selector: \"login-reset-password\",\r\n  templateUrl: \"./login-reset-password.html\"\r\n})\r\nexport class LoginResetPasswordComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  token: string;\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private errorService: ErrorService,\r\n    protected override formBuilder: FormBuilder,\r\n    public dialogMessageService: MessageService,\r\n    public translate: TranslateService) {\r\n\r\n    super(formBuilder);\r\n\r\n    this.activatedRoute.queryParams.subscribe(params => {\r\n      this.token = params['token'];\r\n\r\n      this.createForm({\r\n        Email: ['', Validators.required]\r\n      });\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public onSubmit() {\r\n    if (!this.form.value.Email) {\r\n      this.dialogMessageService.add({ severity: 'error', summary: this.errorService.getDefaultErrorMessage(), detail: this.translate.instant('Messages.EnterEmailFirst') });\r\n      return;\r\n    }\r\n\r\n    // const model = <ResetPasswordModel>{\r\n    //   Email: this.form.value.Email,\r\n    //   Language: this.translate.currentLang\r\n    // };\r\n\r\n    //[TODO]\r\n    // this.http.put<string>(ApiRoutes.identity.resetPassword, model).subscribe(result => {\r\n    //   if (result == \"OK\") {\r\n    //     this.messageService.add({ key: 'tst', severity: 'success', summary: this.translate.instant('Messages.EmailWithPasswordResetInstructionsSent') });\r\n    //   }\r\n    //   else if (result == \"WrongToken\") {\r\n    //     this.messageService.add({ key: 'tst', severity: 'error', summary: this.translate.instant('Messages.CantChangeUserPassword') });\r\n    //   }\r\n    //   else if (result == \"EmailDoesntExist\") {\r\n    //     this.messageService.add({ severity: 'error', summary: this.translate.instant('Messages.ProvidedEmailDoesNotExist') });\r\n    //   }\r\n\r\n    //   console.log(`Reset password has been ended with result: ${result}`);\r\n    // }, error => console.log(error));\r\n  }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { Router } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { SelectItem } from 'primeng/api';\r\nimport { AppComponent } from 'src/app/app.component';\r\nimport { LanguageCodeEnum } from 'src/app/enums/language-code-enum';\r\nimport { SignInModel } from 'src/app/interfaces/authentication';\r\nimport { AuthenticationService } from 'src/app/services/authentication/authentication.service';\r\nimport { ErrorService } from 'src/app/services/errors/error.service';\r\nimport { DialogMessageService } from 'src/app/services/messages/dialog-message.service';\r\nimport { SelectOptionsService } from 'src/app/services/select-options/select-options.service';\r\nimport { ApiResultEnum } from 'src/app/enums/api-result-enum';\r\nimport { Routes } from 'src/app/routes';\r\nimport { SimpleFormComponent } from '../abstract/forms/simple-form';\r\n\r\n@Component({\r\n  selector: \"login\",\r\n  templateUrl: \"./login.html\"\r\n})\r\nexport class LoginComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  languageId: number;\r\n  languages: SelectItem[];\r\n\r\n  constructor(\r\n    private readonly app: AppComponent,\r\n    private readonly authenticationService: AuthenticationService,\r\n    private readonly dialogMessageService: DialogMessageService,\r\n    private readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    private readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    private readonly titleService: Title,\r\n    public readonly translate: TranslateService) {\r\n\r\n    super(formBuilder);\r\n\r\n    this.translate.setDefaultLang('pl');\r\n    this.titleService.setTitle(translate.instant('AppName'));\r\n\r\n    this.createForm({\r\n      Login: ['', Validators.required],\r\n      Password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.selectOptionsService\r\n      .getLanguages()\r\n      .subscribe(options => {\r\n        this.languages = options;\r\n\r\n        const languageIdFromStorage = localStorage.getItem('languageId');\r\n\r\n        if (languageIdFromStorage) {\r\n          this.languageId = Number(languageIdFromStorage);\r\n          this.setLanguage(this.languageId);\r\n        }\r\n      });\r\n  }\r\n\r\n  public onSubmit() {\r\n    if (!this.form.value.Login) {\r\n      this.dialogMessageService.addError(this.errorService.getDefaultErrorMessage());\r\n      return;\r\n    }\r\n\r\n    const data = <SignInModel>{\r\n      Login: this.form.value.Login,\r\n      Password: this.form.value.Password\r\n    };\r\n\r\n    this.authenticationService\r\n      .login(data)\r\n      .subscribe(result => {\r\n        switch (result) {\r\n          case ApiResultEnum[ApiResultEnum.OK]:\r\n            this.app.isUserLoggedIn = true;\r\n            this.router.navigate([Routes.home.navigations.default]);\r\n            break;\r\n\r\n          case ApiResultEnum[ApiResultEnum.NotActive]:\r\n            this.dialogMessageService.addError(this.translate.instant('Messages.AccountNotActive'));\r\n            this.dialogMessageService.addError(this.translate.instant('Messages.PleaseContactAdmin'));\r\n            break;\r\n\r\n          default:\r\n            this.dialogMessageService.addError(this.translate.instant('Messages.InvalidLoginData'));\r\n            break;\r\n        }\r\n      });\r\n  }\r\n\r\n  private getLanguageCodeById(id: number) {\r\n    switch (id) {\r\n      case LanguageCodeEnum.Pl.valueOf():\r\n        return \"pl\";\r\n      case LanguageCodeEnum.En.valueOf():\r\n        return \"en\";\r\n      default:\r\n        return \"---\";\r\n    }\r\n  }\r\n\r\n  private setLanguage(languageId: number) {\r\n    const lang = this.getLanguageCodeById(languageId);\r\n\r\n    this.translate.use(lang).subscribe(() => {\r\n      this.titleService.setTitle(this.translate.instant('AppName'));\r\n    });\r\n  }\r\n}","import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\r\nimport { FormBuilder, FormControl, Validators } from \"@angular/forms\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { SelectItem } from \"primeng/api\";\r\nimport { NameInLanguage } from \"src/app/interfaces/name-in-language\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { SimpleFormComponent } from \"../abstract/forms/simple-form\";\r\n\r\n@Component({\r\n  selector: 'name-in-languages',\r\n  templateUrl: './name-in-languages.html'\r\n})\r\nexport class NameInLanguagesComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  languages: SelectItem[];\r\n\r\n  @Input('disabled') disabled: boolean;\r\n  @Input('nameInLanguages') nameInLanguages: NameInLanguage[];\r\n\r\n  @Output('isValid') isValid = new EventEmitter<boolean>();\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public readonly translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.selectOptionsService\r\n      .getLanguages()\r\n      .subscribe(languages => {\r\n        this.languages = languages;\r\n\r\n        this.createForm();\r\n\r\n        if (this.nameInLanguages) {\r\n          this.updateForm();\r\n          this.isValid.emit(true);\r\n        }\r\n\r\n        if (this.disabled) {\r\n          this.form.disable();\r\n        }\r\n        else {\r\n          this.form.enable();\r\n        }\r\n      });\r\n  }\r\n\r\n  public getNameInLanguages(): NameInLanguage[] {\r\n    const data: NameInLanguage[] = [];\r\n\r\n    this.languages.forEach(l => {\r\n      data.push(<NameInLanguage>{\r\n        LanguageId: Number(l.value),\r\n        Name: this.form.controls[l.label!].value\r\n      });\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  public onChangeInput() {\r\n    let isFormValid = true;\r\n\r\n    Object.keys(this.form.controls)\r\n      .forEach(key => {\r\n        isFormValid = isFormValid && (this.form.get(key)?.valid ?? true);\r\n      });\r\n\r\n    this.isValid.emit(isFormValid);\r\n  }\r\n\r\n  protected override createForm() {\r\n    const group: { [key: string]: FormControl } = {};\r\n\r\n    this.languages.forEach(l => {\r\n      group[l.label!] = new FormControl('');\r\n      group[l.label!].setValidators(Validators.required);\r\n    });\r\n\r\n    super.createForm(group, true);\r\n  }\r\n\r\n  protected override updateForm() {\r\n    this.languages.forEach(l => {\r\n      const data = this.nameInLanguages.find(d => d.LanguageId == l.value);\r\n\r\n      this.form.controls[l.label!].patchValue(data?.Name);\r\n    });\r\n  }\r\n}","import { Component, Input, OnInit, ViewChild } from \"@angular/core\";\r\nimport { AddressComponent } from \"../addresses/address\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Address, Country, addressFormFields } from \"src/app/interfaces/address\";\r\nimport { ClientRepresentativeDialogConfigData, ClientRepresentativeCreationModel } from \"src/app/interfaces/client\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DynamicDialogConfig, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { OpenableAsDialogForm } from \"../abstract/forms/openable-as-dialog-form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\n\r\n@Component({\r\n  selector: \"client-representative-create\",\r\n  templateUrl: \"./client-representative-create.html\"\r\n})\r\nexport class ClientRepresentativeCreationComponent\r\n  extends OpenableAsDialogForm<ClientRepresentativeDialogConfigData, ClientRepresentativeCreationModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareClientRepresentativeCreationModel;\r\n\r\n  @Input('clientId') clientId?: string;\r\n\r\n  @ViewChild('addressForm') addressForm: AddressComponent;\r\n\r\n  public static OPEN_AS_DIALOG_SETTINGS = <DynamicDialogConfig>{\r\n    header: 'ClientRepresentative.Create',\r\n    height: 'auto',\r\n    modal: true,\r\n    style: { margin: 0, padding: 0 },\r\n    width: '50vw'\r\n  };\r\n\r\n  readonly clientRepresentativeAddressRequiredFields: string[] = [\r\n    addressFormFields.City,\r\n    addressFormFields.Country,\r\n    addressFormFields.Email,\r\n    addressFormFields.PhoneNumber,\r\n    addressFormFields.PostalCode,\r\n    addressFormFields.StreetName,\r\n    addressFormFields.StreetNumber\r\n  ];\r\n\r\n  public override get shouldActionsBeDisabled() {\r\n    return super.shouldActionsBeDisabled ||\r\n      (this.addressForm?.form.invalid ?? false);\r\n  }\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    public override readonly openedAsDialogConfig: DynamicDialogConfig,\r\n    public override readonly openedAsDialogRef: DynamicDialogRef,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'ClientRepresentative',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Creation,\r\n      openedAsDialogConfig,\r\n      openedAsDialogRef,\r\n      router,\r\n      ApiRoutes.clientRepresentative.post,\r\n      translate,\r\n      Routes.clientRepresentatives.navigations.list);\r\n\r\n    this.createForm({\r\n      FirstName: ['', Validators.required],\r\n      LastName: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  private getClientRepresentativeClientId() {\r\n    return this._dialogConfigData ? this._dialogConfigData.ClientId : this.clientId;\r\n  }\r\n\r\n  private prepareClientRepresentativeCreationModel(): ClientRepresentativeCreationModel {\r\n    const clientRepresentativeAddress = <Address>{\r\n      ApartmentNumber: this.addressForm.form.value.ApartmentNumber,\r\n      City: this.addressForm.form.value.City,\r\n      Country: <Country>{\r\n        Id: this.addressForm.form.value.CountryId\r\n      },\r\n      Email: this.addressForm.form.value.Email,\r\n      PhoneNumber: this.addressForm.form.value.PhoneNumber,\r\n      PostalCode: this.addressForm.form.value.PostalCode,\r\n      StreetName: this.addressForm.form.value.StreetName,\r\n      StreetNumber: this.addressForm.form.value.StreetNumber\r\n    };\r\n    const clientRepresentative = <ClientRepresentativeCreationModel>{\r\n      Address: clientRepresentativeAddress,\r\n      ClientId: this.getClientRepresentativeClientId(),\r\n      FirstName: this.form.value.FirstName,\r\n      LastName: this.form.value.LastName\r\n    };\r\n\r\n    return clientRepresentative;\r\n  }\r\n}","import { Component, Input, OnInit, ViewChild } from \"@angular/core\";\r\nimport { ClientRepresentativeDetailsModel, ClientRepresentativeDialogConfigData } from \"src/app/interfaces/client\";\r\nimport { AddressComponent } from \"../addresses/address\";\r\nimport { DynamicDialogConfig, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { Address, Country, addressFormFields } from \"src/app/interfaces/address\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { AccessControlOpenableAsDialogForm } from \"../abstract/forms/access-control-openable-as-dialog-form\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission-enum\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { StringBuilder } from \"src/app/tools/stringBuilder\";\r\n\r\n@Component({\r\n  selector: \"client-representative-details\",\r\n  templateUrl: \"./client-representative-details.html\"\r\n})\r\nexport class ClientRepresentativeDetailsComponent\r\n  extends AccessControlOpenableAsDialogForm<ClientRepresentativeDialogConfigData, ClientRepresentativeDetailsModel>\r\n  implements OnInit {\r\n\r\n  public static readonly OPEN_AS_DIALOG_SETTINGS = <DynamicDialogConfig>{\r\n    header: 'ClientRepresentative.Details',\r\n    height: 'auto',\r\n    modal: true,\r\n    style: { margin: 0, padding: 0 },\r\n    width: '50vw'\r\n  };\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareClientRepresentativeDetailsModel;\r\n\r\n  protected override readonly afterSubmitionCustomOperationsHandler = undefined;\r\n  protected override readonly deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n  protected override readonly entityId: string;\r\n\r\n  @Input('clientId') clientId?: string;\r\n\r\n  @ViewChild('addressForm') addressForm: AddressComponent;\r\n\r\n  readonly clientRepresentativeAddressRequiredFields: string[] = [\r\n    addressFormFields.City,\r\n    addressFormFields.Country,\r\n    addressFormFields.Email,\r\n    addressFormFields.PhoneNumber,\r\n    addressFormFields.PostalCode,\r\n    addressFormFields.StreetName,\r\n    addressFormFields.StreetNumber\r\n  ];\r\n\r\n  clientRepresentative: ClientRepresentativeDetailsModel;\r\n\r\n  public override get shouldActionsBeDisabled() {\r\n    return super.shouldActionsBeDisabled ||\r\n      (this.addressForm?.form.invalid ?? false);\r\n  }\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    public override readonly openedAsDialogConfig: DynamicDialogConfig,\r\n    public override readonly openedAsDialogRef: DynamicDialogRef,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteClientRepresentative',\r\n      ApiRoutes.clientRepresentative.delete,\r\n      dialogMessageService,\r\n      'ClientRepresentative',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      openedAsDialogConfig,\r\n      openedAsDialogRef,\r\n      router,\r\n      ApiRoutes.clientRepresentative.put,\r\n      translate,\r\n      [UserPermissionEnum.ClientRepresentatives_CanModify],\r\n      Routes.clientRepresentatives.navigations.list\r\n    );\r\n\r\n    this.createForm({\r\n      FirstName: ['', Validators.required],\r\n      LastName: ['', Validators.required]\r\n    });\r\n\r\n    this.loadClientRepresentative();\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  private getEntityInstanceName(): string {\r\n    return new StringBuilder(this.clientRepresentative.LastName)\r\n      .append(' ')\r\n      .append(this.clientRepresentative.FirstName)\r\n      .toString();\r\n  }\r\n\r\n  private loadClientRepresentative() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<ClientRepresentativeDetailsModel>(ApiRoutes.clientRepresentative.getById(this.entityId))\r\n      .subscribe(result => {\r\n        this.clientRepresentative = result;\r\n\r\n        this.updateForm({\r\n          FirstName: this.clientRepresentative.FirstName,\r\n          LastName: this.clientRepresentative.LastName\r\n        });\r\n      });\r\n  }\r\n\r\n  private prepareClientRepresentativeDetailsModel(): ClientRepresentativeDetailsModel {\r\n    const clientRepresentativeAddress = <Address>{\r\n      ApartmentNumber: this.addressForm.form.value.ApartmentNumber,\r\n      City: this.addressForm.form.value.City,\r\n      Country: <Country>{\r\n        Id: this.addressForm.form.value.CountryId\r\n      },\r\n      Email: this.addressForm.form.value.Email,\r\n      Id: this.addressForm.form.value.Id,\r\n      PhoneNumber: this.addressForm.form.value.PhoneNumber,\r\n      PostalCode: this.addressForm.form.value.PostalCode,\r\n      StreetName: this.addressForm.form.value.StreetName,\r\n      StreetNumber: this.addressForm.form.value.StreetNumber\r\n    };\r\n    const clientRepresentative = <ClientRepresentativeDetailsModel>{\r\n      Address: clientRepresentativeAddress,\r\n      ClientId: this.clientRepresentative.ClientId,\r\n      FirstName: this.form.value.FirstName,\r\n      Id: this.entityId,\r\n      LastName: this.form.value.LastName\r\n    }\r\n\r\n    return clientRepresentative;\r\n  }\r\n}","import { Component, Input, OnDestroy, OnInit, ViewChild } from \"@angular/core\";\r\nimport { AccessControlComponent } from \"../abstract/access-controls/access-control\";\r\nimport { Confirmation, ConfirmationService, LazyLoadEvent } from 'primeng/api';\r\nimport { PngTableColumn } from \"src/app/interfaces/png\";\r\nimport { Table } from \"primeng/table\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission-enum\";\r\nimport { FilterTypeEnum } from \"src/app/enums/filter-type-enum\";\r\nimport { ClientRepresentativeDialogConfigData, ClientRepresentativeListItemModel, ClientRepresentativeListModel } from \"src/app/interfaces/client\";\r\nimport { Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { FilterService } from \"src/app/services/filters/filter.service\";\r\nimport { DialogService, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { ClientRepresentativeCreationComponent } from \"./client-representative-create\";\r\nimport { ClientRepresentativeDetailsComponent } from \"./client-representative-details\";\r\n\r\n@Component({\r\n  selector: \"client-representative-list\",\r\n  templateUrl: \"./client-representative-list.html\"\r\n})\r\nexport class ClientRepresentativeListComponent\r\n  extends AccessControlComponent<ClientRepresentativeListItemModel>\r\n  implements OnInit, OnDestroy {\r\n\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n\r\n  @Input('clientId') clientId: string;\r\n\r\n  @ViewChild('dataTable') dataTable: Table;\r\n\r\n  private readonly _dataPopulator = {\r\n    clientRepresentatives: {\r\n      get: (event: LazyLoadEvent) => this.getClientRepresentatives(event),\r\n      set: (clientRepresentatives: ClientRepresentativeListModel) => this.setClientRepresentatives(clientRepresentatives)\r\n    }\r\n  };\r\n\r\n  private clientRepresentativeCreationDialog: DynamicDialogRef | undefined;\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  clientRepresentatives: ClientRepresentativeListItemModel[];\r\n  cols: PngTableColumn[];\r\n  totalRecords: number;\r\n\r\n  constructor(\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    private readonly dialogService: DialogService,\r\n    protected override readonly errorService: ErrorService,\r\n    public readonly filterService: FilterService,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteClientRepresentative',\r\n      ApiRoutes.clientRepresentative.delete,\r\n      dialogMessageService,\r\n      'ClientRepresentative',\r\n      errorService,\r\n      httpClient,\r\n      () => {\r\n        this._dataPopulator.clientRepresentatives\r\n          .get(this.tempLazyLoadEvent)\r\n          .subscribe(result => this._dataPopulator.clientRepresentatives.set(result));\r\n      },\r\n      router,\r\n      translate,\r\n      [UserPermissionEnum.ClientRepresentatives_CanModify]);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cols = [\r\n      <PngTableColumn>{\r\n        field: 'LastName',\r\n        header: 'ClientRepresentative.LastName',\r\n        width: '30%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'FirstName',\r\n        header: 'ClientRepresentative.FirstName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Email',\r\n        header: 'ClientRepresentative.Email',\r\n        width: '30%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'PhoneNumber',\r\n        header: 'ClientRepresentative.PhoneNumber',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Actions',\r\n        header: '',\r\n        width: '20%'\r\n      }\r\n    ];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.clientRepresentativeCreationDialog) {\r\n      this.clientRepresentativeCreationDialog.close();\r\n    }\r\n  }\r\n\r\n  public loadClientRepresentativesLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n\r\n    this._dataPopulator.clientRepresentatives\r\n      .get(event)\r\n      .subscribe(result => this._dataPopulator.clientRepresentatives.set(result));\r\n  }\r\n\r\n  public onCreate() {\r\n    if (!this.clientId)\r\n      return;\r\n\r\n    this.openClientRepresentativeDialog();\r\n  }\r\n\r\n  public onEdit(clientRepresentative: ClientRepresentativeListItemModel) {\r\n    this.openClientRepresentativeDialog(clientRepresentative);\r\n  }\r\n\r\n  private getClientRepresentatives(event: LazyLoadEvent) {\r\n    event.sortField ??= this.cols[0].field;\r\n\r\n    return this.httpClient\r\n      .get<ClientRepresentativeListModel>(ApiRoutes.clientRepresentative.getAll(event, this.cols, this.clientId));\r\n  }\r\n\r\n  private getEntityInstanceName(clientRepresentative: ClientRepresentativeListItemModel): string {\r\n    return `${clientRepresentative.LastName} ${clientRepresentative.FirstName}`;\r\n  }\r\n\r\n  private openClientRepresentativeDialog(clientRepresentative?: ClientRepresentativeListItemModel) {\r\n\r\n    const clientRepresentativeDialogConfigData = <ClientRepresentativeDialogConfigData>{\r\n      ClientId: this.clientId,\r\n      Id: clientRepresentative ? clientRepresentative.Id : undefined\r\n    };\r\n\r\n    this.clientRepresentativeCreationDialog = this.dialogService.open(\r\n      clientRepresentative ? ClientRepresentativeDetailsComponent : ClientRepresentativeCreationComponent,\r\n      clientRepresentative\r\n        ? {\r\n          ...ClientRepresentativeDetailsComponent.OPEN_AS_DIALOG_SETTINGS,\r\n          data: clientRepresentativeDialogConfigData\r\n        }\r\n        : {\r\n          ...ClientRepresentativeCreationComponent.OPEN_AS_DIALOG_SETTINGS,\r\n          data: clientRepresentativeDialogConfigData\r\n        });\r\n\r\n    this.clientRepresentativeCreationDialog.onClose.subscribe(() => {\r\n      this._dataPopulator.clientRepresentatives\r\n        .get(this.tempLazyLoadEvent)\r\n        .subscribe(result => this._dataPopulator.clientRepresentatives.set(result));\r\n    });\r\n  }\r\n\r\n  private setClientRepresentatives(clientRepresentatives: ClientRepresentativeListModel) {\r\n    this.totalRecords = clientRepresentatives.TotalRowsCount;\r\n    this.clientRepresentatives = clientRepresentatives.List;\r\n  }\r\n}","import { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { PermissionGroupItemModel } from \"src/app/interfaces/user-permission\";\r\nimport { UserRolePermissionsDestinations } from \"src/app/interfaces/user-role\";\r\nimport { UserRolePermissionsOnCreationFiller } from \"./user-role-permissions-on-creation-filler\";\r\nimport { UserRolePermissionsOnEditionFiller } from \"./user-role-permissions-on-edition-filler\";\r\nimport { UserRolePermissionsFiller } from \"./user-role-permissions-filler\";\r\n\r\nexport class UserRolePermissionsFillerFactory {\r\n  static makeFiller(formMode: FormModeEnum, source: PermissionGroupItemModel[], destinations: UserRolePermissionsDestinations) {\r\n\r\n    let filler: UserRolePermissionsFiller;\r\n\r\n    switch (formMode) {\r\n      case FormModeEnum.Creation:\r\n        filler = new UserRolePermissionsOnCreationFiller(source, destinations);\r\n        break;\r\n\r\n      case FormModeEnum.Edition:\r\n        filler = new UserRolePermissionsOnEditionFiller(source, destinations);\r\n        break;\r\n\r\n      default:\r\n        throw new Error(`[${this.constructor.name}] Unsupported form mode.`);\r\n    }\r\n\r\n    return filler;\r\n  }\r\n}","import { Icons, LIST_ICON_NAME, MODIFY_ICON_NAME } from \"src/app/icon-mapper\";\r\nimport { PermissionGroupItemModel, PermissionItemModel } from \"src/app/interfaces/user-permission\";\r\nimport { UserPermissionNode } from \"../models/user-permission-node\";\r\n\r\nexport abstract class UserRolePermissionsFiller {\r\n\r\n  public abstract createChildNode(permission: PermissionItemModel): UserPermissionNode;\r\n  public abstract createParentNode(permissionsGroup: PermissionGroupItemModel, children: UserPermissionNode[]): UserPermissionNode;\r\n  public abstract fill(): void;\r\n\r\n  protected getIconStyleClassNameForPermission(permission: PermissionItemModel) {\r\n    return permission.Name.endsWith('.CanList')\r\n      ? LIST_ICON_NAME\r\n      : permission.Name.endsWith('.CanModify')\r\n        ? MODIFY_ICON_NAME\r\n        : Icons[permission.Name]\r\n  }\r\n}","import { PermissionGroupItemModel, PermissionItemModel, UserPermissionNodeData } from \"src/app/interfaces/user-permission\";\r\nimport { UserRolePermissionsDestinations } from \"src/app/interfaces/user-role\";\r\nimport { UserRolePermissionsFiller } from \"./user-role-permissions-filler\";\r\nimport { Icons } from \"src/app/icon-mapper\";\r\nimport { UserPermissionNode } from \"../models/user-permission-node\";\r\n\r\nexport class UserRolePermissionsOnCreationFiller extends UserRolePermissionsFiller {\r\n\r\n  constructor(private source: PermissionGroupItemModel[], private destinations: UserRolePermissionsDestinations) {\r\n    super();\r\n  }\r\n\r\n  public override createChildNode(permission: PermissionItemModel): UserPermissionNode<any> {\r\n\r\n    const result = new UserPermissionNode();\r\n\r\n    result.data = <UserPermissionNodeData>{\r\n      icon: this.getIconStyleClassNameForPermission(permission),\r\n      id: permission.Id,\r\n      name: permission.Name,\r\n      linkedPermissionIds: permission.LinkedPermissionsIds\r\n    };\r\n\r\n    return result;\r\n  }\r\n\r\n  public override createParentNode(permissionsGroup: PermissionGroupItemModel, children: UserPermissionNode[]): UserPermissionNode<any> {\r\n\r\n    const result = new UserPermissionNode();\r\n\r\n    result.children = children;\r\n    result.data = <UserPermissionNodeData>{\r\n      icon: Icons[permissionsGroup.Name],\r\n      id: null,\r\n      name: permissionsGroup.Name,\r\n      linkedPermissionIds: [],\r\n    };\r\n\r\n    return result;\r\n  }\r\n\r\n  public override fill() {\r\n    for (const permissionsGroup of this.source) {\r\n      const permissionsGroupChildren: UserPermissionNode[] = [];\r\n\r\n      for (const permission of permissionsGroup.Permissions) {\r\n        permissionsGroupChildren.push(this.createChildNode(permission));\r\n      }\r\n\r\n      this.destinations.allItems.push(this.createParentNode(permissionsGroup, permissionsGroupChildren));\r\n    }\r\n  }\r\n}","import { Icons } from \"src/app/icon-mapper\";\r\nimport { PermissionGroupItemModel, PermissionItemModel, UserPermissionNodeData } from \"src/app/interfaces/user-permission\";\r\nimport { UserRolePermissionsDestinations } from \"src/app/interfaces/user-role\";\r\nimport { UserRolePermissionsFiller } from \"./user-role-permissions-filler\";\r\nimport { UserPermissionNode } from \"../models/user-permission-node\";\r\n\r\nexport class UserRolePermissionsOnEditionFiller extends UserRolePermissionsFiller {\r\n\r\n  constructor(private source: PermissionGroupItemModel[], private destinations: UserRolePermissionsDestinations) {\r\n    super();\r\n  }\r\n\r\n  public override createChildNode(permission: PermissionItemModel): UserPermissionNode<any> {\r\n\r\n    const result = new UserPermissionNode();\r\n\r\n    result.data = <UserPermissionNodeData>{\r\n      icon: this.getIconStyleClassNameForPermission(permission),\r\n      id: permission.Id,\r\n      isSelected: permission.IsSelected,\r\n      linkedPermissionIds: permission.LinkedPermissionsIds,\r\n      name: permission.Name\r\n    };\r\n    result.expanded = true;\r\n    result.partialSelected = permission.IsSelected ? false : undefined;\r\n\r\n    return result;\r\n  }\r\n\r\n  public override createParentNode(permissionsGroup: PermissionGroupItemModel, children: UserPermissionNode<any>[]): UserPermissionNode<any> {\r\n\r\n    const result = new UserPermissionNode();\r\n\r\n    result.children = children;\r\n    result.data = <UserPermissionNodeData>{\r\n      icon: Icons[permissionsGroup.Name],\r\n      id: null,\r\n      isSelected: children.every(c => c.isSelected()),\r\n      linkedPermissionIds: [],\r\n      name: permissionsGroup.Name\r\n    };\r\n    result.expanded = true;\r\n    result.partialSelected = !children.every(c => c.isSelected()) && children.some(c => c.isSelected());\r\n\r\n    return result;\r\n  }\r\n\r\n  public override fill() {\r\n    this.updateUserRolePermissions();\r\n    this.updateUserRolePermissionsSelected();\r\n  }\r\n\r\n  private updateUserRolePermissions() {\r\n    for (const permissionsGroup of this.source) {\r\n      const permissionsGroupChildren: UserPermissionNode[] = [];\r\n\r\n      for (const permission of permissionsGroup.Permissions) {\r\n        permissionsGroupChildren.push(this.createChildNode(permission));\r\n      }\r\n\r\n      this.destinations.allItems.push(this.createParentNode(permissionsGroup, permissionsGroupChildren));\r\n    }\r\n  }\r\n\r\n  private updateUserRolePermissionsSelected() {\r\n    for (const permissionNode of this.destinations.allItems) {\r\n      if (permissionNode.hasChildren()) {\r\n        for (const childPermissionNode of permissionNode.children!) {\r\n          this.destinations.selectedItems.tryPush(childPermissionNode);\r\n        }\r\n      }\r\n\r\n      this.destinations.selectedItems.tryPush(permissionNode);\r\n    }\r\n  }\r\n}","import { TreeNode } from \"primeng/api\";\r\nimport { UserPermissionNodeData } from \"src/app/interfaces/user-permission\";\r\n\r\nexport class UserPermissionNode<T = any> implements TreeNode {\r\n  children?: UserPermissionNode<T>[] = [];\r\n  data: UserPermissionNodeData;\r\n  expanded?: boolean | undefined;\r\n  partialSelected?: boolean | undefined;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  public hasChildren(): boolean {\r\n    return this.children !== undefined && this.children.length > 0\r\n  }\r\n\r\n  public hasLinkedPermissions() {\r\n    return this.data.linkedPermissionIds.length > 0;\r\n  }\r\n\r\n  public isSelected(): boolean {\r\n    return this.data.isSelected ?? false;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { UserRoleCreationModel, UserRolePermissionsForCreation } from \"src/app/interfaces/user-role\";\r\nimport { PermissionGroupItemModel } from \"src/app/interfaces/user-permission\";\r\nimport { NameInLanguagesComponent } from \"../name-in-languages/name-in-languages\";\r\nimport { ApiResultEnum } from \"src/app/enums/api-result-enum\";\r\nimport { UserRolePermissionsComponent } from \"./user-role-permissions\";\r\nimport { FormComponent } from \"../abstract/forms/form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\n\r\n@Component({\r\n  selector: \"user-role-create\",\r\n  templateUrl: \"./user-role-create.html\"\r\n})\r\nexport class UserRoleCreationComponent\r\n  extends FormComponent<UserRoleCreationModel>\r\n  implements OnInit {\r\n\r\n  public override beforeSubmitionCustomOperationsHandler = this.prepareUserRoleCreationModel;\r\n\r\n  private readonly _dataPopulator = {\r\n    userPermissions: {\r\n      get: () => this.httpClient.get<UserRolePermissionsForCreation>(ApiRoutes.userRole.getUserRolePermissionsForCreation),\r\n      set: (userPermissions: UserRolePermissionsForCreation) => this.groupedUserPermissions = userPermissions.List\r\n    }\r\n  }\r\n\r\n  groupedUserPermissions: PermissionGroupItemModel[];\r\n  isNameInLanguagesValid: boolean = false;\r\n\r\n  @ViewChild('nameInLanguages') nameInLanguages: NameInLanguagesComponent;\r\n  @ViewChild('userRolePermissions') userRolePermissions: UserRolePermissionsComponent;\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'UserRole',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Creation,\r\n      router,\r\n      ApiRoutes.userRole.post,\r\n      translate,\r\n      Routes.userRoles.navigations.list);\r\n\r\n    this.createForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._dataPopulator.userPermissions\r\n      .get()\r\n      .subscribe(result => this._dataPopulator.userPermissions.set(result));\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.userRoles.navigations.list]);\r\n  }\r\n\r\n  public onIsNameInLanguagesValid(value: boolean) {\r\n    this.isNameInLanguagesValid = value;\r\n  }\r\n\r\n  private prepareUserRoleCreationModel(): UserRoleCreationModel {\r\n    const userRole = new UserRoleCreationModel();\r\n    userRole.NameInLanguages = this.nameInLanguages.getNameInLanguages();\r\n\r\n    const permissionsSubmitted = this.userRolePermissions.getPermissionsSubmitted();\r\n    for (const permission of permissionsSubmitted) {\r\n      if (!userRole.doesPermissionExistWithinSelected(permission.Id)) {\r\n        userRole.PermissionsSelected.push(permission);\r\n      }\r\n    }\r\n\r\n    return userRole;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission-enum\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { SelectedUserPermissionNodeArray } from \"src/app/interfaces/user-permission\";\r\nimport { PngTreeColumn } from \"src/app/interfaces/png\";\r\nimport { NameInLanguagesComponent } from \"../name-in-languages/name-in-languages\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { UserRoleDetailsModel } from \"src/app/interfaces/user-role\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { UserRolePermissionsComponent } from \"./user-role-permissions\";\r\nimport { UserPermissionNode } from \"./models/user-permission-node\";\r\nimport { AccessControlFormComponent } from \"../abstract/forms/access-control-form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\n\r\n@Component({\r\n  selector: 'user-role-details',\r\n  templateUrl: './user-role-details.html'\r\n})\r\nexport class UserRoleDetailsComponent\r\n  extends AccessControlFormComponent<UserRoleDetailsModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareUserRoleDetailsModel;\r\n\r\n  protected override afterSubmitionCustomOperationsHandler = undefined;\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n  protected override readonly entityId: number;\r\n\r\n  isNameInLanguagesValid: boolean = false;\r\n  selectedUserPermissions = new SelectedUserPermissionNodeArray();\r\n  userPermissionColumns: PngTreeColumn[] = [];\r\n  userPermissionGroups: UserPermissionNode[] = [];\r\n  userRole: UserRoleDetailsModel;\r\n\r\n  @ViewChild('nameInLanguages') nameInLanguages: NameInLanguagesComponent;\r\n  @ViewChild('userRolePermissions') userRolePermissions: UserRolePermissionsComponent;\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteUserRole',\r\n      ApiRoutes.userRole.delete,\r\n      dialogMessageService,\r\n      'UserRole',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      router,\r\n      ApiRoutes.userRole.put,\r\n      translate,\r\n      [UserPermissionEnum.UserRoles_CanModify],\r\n      Routes.userRoles.navigations.list);\r\n\r\n    this.createForm();\r\n    this.loadUserRole();\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.userRoles.navigations.list]);\r\n  }\r\n\r\n  public onIsNameInLanguagesValid(value: boolean) {\r\n    this.isNameInLanguagesValid = value;\r\n  }\r\n\r\n  private getEntityInstanceName(): string {\r\n    return this.userRole.Name!;\r\n  }\r\n\r\n  private loadUserRole() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<UserRoleDetailsModel>(ApiRoutes.userRole.getById(this.entityId))\r\n      .subscribe(result => {\r\n        this.userRole = result;\r\n        this.updateForm();\r\n      });\r\n  }\r\n\r\n  protected override updateForm() {\r\n    if (!this.userRole)\r\n      return;\r\n\r\n    super.updateForm();\r\n  }\r\n\r\n  private prepareUserRoleDetailsModel() {\r\n    const userRole = new UserRoleDetailsModel();\r\n\r\n    userRole.Id = this.userRole.Id;\r\n    userRole.NameInLanguages = this.nameInLanguages.getNameInLanguages();\r\n\r\n    const permissionsSubmitted = this.userRolePermissions.getPermissionsSubmitted();\r\n    for (const permission of permissionsSubmitted) {\r\n      if (!userRole.doesPermissionExistWithinSelected(permission.Id)) {\r\n        userRole.PermissionsSelected.push(permission);\r\n      }\r\n    }\r\n\r\n    return userRole;\r\n  }\r\n}","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Table } from 'primeng/table';\r\nimport { PngTableColumn } from 'src/app/interfaces/png';\r\nimport { UserRoleListItemModel, UserRoleListModel } from 'src/app/interfaces/user-role';\r\nimport { FilterService } from 'src/app/services/filters/filter.service';\r\nimport { ConfirmationService, LazyLoadEvent, SelectItem } from 'primeng/api';\r\nimport { SelectOptionsService } from 'src/app/services/select-options/select-options.service';\r\nimport { FilterTypeEnum } from 'src/app/enums/filter-type-enum';\r\nimport { ApiRoutes } from 'src/app/api-routes';\r\nimport { ConsoleMessageService } from 'src/app/services/messages/console-message.service';\r\nimport { ErrorService } from 'src/app/services/errors/error.service';\r\nimport { DialogMessageService } from 'src/app/services/messages/dialog-message.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserPermissionEnum } from 'src/app/enums/user-permission-enum';\r\nimport { Routes } from 'src/app/routes';\r\nimport { ApiResultEnum } from 'src/app/enums/api-result-enum';\r\nimport { AccessControlComponent } from '../abstract/access-controls/access-control';\r\nimport { AuthorizationService } from 'src/app/services/authorization/authorization.service';\r\n\r\n@Component({\r\n  selector: \"user-role-list\",\r\n  templateUrl: \"./user-role-list.html\"\r\n})\r\nexport class UserRoleListComponent\r\n  extends AccessControlComponent<UserRoleListItemModel>\r\n  implements OnInit {\r\n\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n\r\n  private readonly _dataPopulator = {\r\n    multiSelects: {\r\n      userRoles: {\r\n        get: () => this.getUserRoleMultiSelectData(),\r\n        set: (userRoles: SelectItem[]) => this.setUserRoleMultiSelectData(userRoles)\r\n      }\r\n    },\r\n    userRoles: {\r\n      get: (event: LazyLoadEvent) => this.getUserRoles(event),\r\n      set: (userRoles: UserRoleListModel) => this.setUserRoles(userRoles)\r\n    }\r\n  };\r\n\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  cols: PngTableColumn[];\r\n  totalRecords: number;\r\n  userRoleOptions: SelectItem[];\r\n  userRoles: UserRoleListItemModel[];\r\n\r\n  @ViewChild('dataTable') dataTable: Table;\r\n\r\n  constructor(\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    public readonly filterService: FilterService,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteUserRole',\r\n      ApiRoutes.userRole.delete,\r\n      dialogMessageService,\r\n      'UserRole',\r\n      errorService,\r\n      httpClient,\r\n      () => {\r\n        this._dataPopulator.userRoles\r\n          .get(this.tempLazyLoadEvent)\r\n          .subscribe(result => this._dataPopulator.userRoles.set(result));\r\n      },\r\n      router,\r\n      translate,\r\n      [UserPermissionEnum.UserRoles_CanModify]);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.cols = [\r\n      <PngTableColumn>{\r\n        field: 'Id',\r\n        header: 'UserRole.Id',\r\n        width: '10%',\r\n        filterType: FilterTypeEnum.Numeric\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Name',\r\n        header: 'UserRole.Name',\r\n        width: '70%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true,\r\n        replaceWith: 'Id'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Actions',\r\n        header: '',\r\n        width: '20%'\r\n      }\r\n    ];\r\n\r\n    this._dataPopulator.multiSelects.userRoles\r\n      .get()\r\n      .subscribe(userRoles => this._dataPopulator.multiSelects.userRoles.set(userRoles));\r\n  }\r\n\r\n  public loadUserRolesLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n\r\n    this._dataPopulator.userRoles\r\n      .get(event)\r\n      .subscribe(result => this._dataPopulator.userRoles.set(result));\r\n  }\r\n\r\n  public onCreate() {\r\n    this.router.navigate([Routes.userRoles.navigations.creation]);\r\n  }\r\n\r\n  public onEdit(userRole: UserRoleListItemModel) {\r\n    this.router.navigate([Routes.userRoles.navigations.edition(userRole.Id)]);\r\n  }\r\n\r\n  private getEntityInstanceName(userRole: UserRoleListItemModel): string {\r\n    return userRole.Name;\r\n  }\r\n\r\n  private getUserRoleMultiSelectData() {\r\n    return this.selectOptionsService.getUserRoles();\r\n  }\r\n\r\n  private getUserRoles(event: LazyLoadEvent) {\r\n    event.sortField ??= this.cols[0]?.field;\r\n\r\n    return this.httpClient\r\n      .get<UserRoleListModel>(ApiRoutes.userRole.getAll(event, this.cols));\r\n  }\r\n\r\n  private setUserRoleMultiSelectData(userRoles: SelectItem[]) {\r\n    this.userRoleOptions = userRoles;\r\n\r\n    const userRoleColumn = this.cols.find(c => c.field === \"Name\");\r\n\r\n    if (userRoleColumn) {\r\n      userRoleColumn.options = this.userRoleOptions;\r\n    }\r\n  }\r\n\r\n  private setUserRoles(userRoles: UserRoleListModel) {\r\n    this.totalRecords = userRoles.TotalRowsCount;\r\n    this.userRoles = userRoles.List;\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { PngTreeColumn } from \"src/app/interfaces/png\";\r\nimport { PermissionGroupItemModel, PermissionItemModel, SelectedUserPermissionNodeArray } from \"src/app/interfaces/user-permission\";\r\nimport { UserRolePermissionsFillerFactory } from \"./fillers/user-role-permissions-filler-factory\";\r\nimport { UserRolePermissionsDestinations } from \"src/app/interfaces/user-role\";\r\nimport { UserPermissionNode } from \"./models/user-permission-node\";\r\n\r\n@Component({\r\n  selector: 'user-role-permissions',\r\n  templateUrl: './user-role-permissions.html'\r\n})\r\nexport class UserRolePermissionsComponent implements OnInit {\r\n\r\n  selectedUserPermissionNodes = new SelectedUserPermissionNodeArray();\r\n  userPermissionNodes: UserPermissionNode[] = [];\r\n  userRolePermissionColumns: PngTreeColumn[] = [];\r\n\r\n  @Input() formMode: FormModeEnum = FormModeEnum.Creation;\r\n  @Input() groupedUserPermissions: PermissionGroupItemModel[];\r\n\r\n  constructor(\r\n    public translate: TranslateService\r\n  ) {\r\n    this.userRolePermissionColumns = [\r\n      {\r\n        icon: 'icon',\r\n        field: 'name',\r\n        header: 'UserPermission.Name'\r\n      }\r\n    ];\r\n  }\r\n\r\n  ngOnInit() {\r\n    UserRolePermissionsFillerFactory\r\n      .makeFiller(\r\n        this.formMode,\r\n        this.groupedUserPermissions,\r\n        <UserRolePermissionsDestinations>{ allItems: this.userPermissionNodes, selectedItems: this.selectedUserPermissionNodes })\r\n      .fill();\r\n  }\r\n\r\n  public getPermissionsSubmitted() {\r\n    const permissionsSubmitted: PermissionItemModel[] = [];\r\n    for (const permissionNode of this.selectedUserPermissionNodes) {\r\n      if (!permissionNode.hasChildren()) {\r\n        permissionsSubmitted.push(<PermissionItemModel>{\r\n          Id: permissionNode.data.id\r\n        });\r\n      }\r\n      else {\r\n        for (const childPermissionNode of permissionNode.children!) {\r\n          permissionsSubmitted.push(<PermissionItemModel>{\r\n            Id: childPermissionNode.data.id\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return permissionsSubmitted;\r\n  }\r\n\r\n  public onPermissionSelected(permissionNode: UserPermissionNode) {\r\n    if (!permissionNode.hasLinkedPermissions())\r\n      return;\r\n\r\n    for (const linkedPermissionId of permissionNode.data.linkedPermissionIds) {\r\n      const isPermissionAlreadySelected = this.selectedUserPermissionNodes.find(p => p.data.id === linkedPermissionId);\r\n\r\n      if (!isPermissionAlreadySelected) {\r\n        const permissionToBeSelected = this.getPermissionNodeToBeSelected(linkedPermissionId);\r\n\r\n        if (permissionToBeSelected) {\r\n          this.selectedUserPermissionNodes.push(permissionToBeSelected);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private findPermissionById(permissionNode: UserPermissionNode, idToFind: number): UserPermissionNode | undefined {\r\n    if (permissionNode.data && permissionNode.data.id === idToFind)\r\n      return permissionNode;\r\n\r\n    if (permissionNode.hasChildren()) {\r\n      for (const nodeChild of permissionNode.children!) {\r\n        const result = this.findPermissionById(nodeChild, idToFind);\r\n\r\n        if (result)\r\n          return result;\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private getPermissionNodeToBeSelected(permissionId: number): UserPermissionNode | undefined {\r\n    let permission: UserPermissionNode | undefined;\r\n\r\n    for (const userPermissionGroup of this.userPermissionNodes) {\r\n      permission = this.findPermissionById(userPermissionGroup, permissionId);\r\n\r\n      if (permission)\r\n        return permission;\r\n    }\r\n\r\n    return permission;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { SelectItem } from \"primeng/api\";\r\nimport { Router } from \"@angular/router\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { RegexPatterns } from \"src/app/tools/regexPatterns\";\r\nimport { UserCreationModel } from \"src/app/interfaces/user\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { FormComponent } from \"../abstract/forms/form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\n\r\n@Component({\r\n  selector: \"user-create\",\r\n  templateUrl: \"./user-create.html\"\r\n})\r\nexport class UserCreationComponent\r\n  extends FormComponent<UserCreationModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareUserCreationModel;\r\n\r\n  languages: SelectItem<number>[];\r\n  userRoles: SelectItem<number>[];\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'User',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Creation,\r\n      router,\r\n      ApiRoutes.user.post,\r\n      translate,\r\n      Routes.users.navigations.list);\r\n\r\n    this.createForm({\r\n      Email: ['', Validators.pattern(RegexPatterns.emailPattern)],\r\n      FirstName: ['', Validators.required],\r\n      IsActive: false,\r\n      LanguageId: null,\r\n      LastName: ['', Validators.required],\r\n      Login: ['', Validators.required],\r\n      Password: ['', Validators.pattern(RegexPatterns.passwordPattern)],\r\n      UserRoleId: null\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.users.navigations.list]);\r\n  }\r\n\r\n  private populateDropdowns() {\r\n\r\n    this.selectOptionsService\r\n      .getLanguages()\r\n      .subscribe(options => {\r\n        this.languages = options;\r\n      });\r\n\r\n    this.selectOptionsService\r\n      .getUserRoles()\r\n      .subscribe(options => {\r\n        this.userRoles = options;\r\n      });\r\n  }\r\n\r\n  private prepareUserCreationModel(): UserCreationModel {\r\n    const user = <UserCreationModel>{\r\n      Email: this.form.value.Email,\r\n      FirstName: this.form.value.FirstName,\r\n      IsActive: this.form.value.IsActive,\r\n      LanguageId: this.form.value.LanguageId,\r\n      LastName: this.form.value.LastName,\r\n      Login: this.form.value.Login,\r\n      Password: this.form.value.Password,\r\n      UserRoleId: this.form.value.UserRoleId\r\n    };\r\n\r\n    return user;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ConfirmationService, SelectItem } from \"primeng/api\";\r\nimport { ApiRoutes } from \"src/app/api-routes\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission-enum\";\r\nimport { UserDetailsModel } from \"src/app/interfaces/user\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { PrimeNgHelper } from \"src/app/tools/primeNgHelper\";\r\nimport { RegexPatterns } from \"src/app/tools/regexPatterns\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { Routes } from \"src/app/routes\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { AccessControlFormComponent } from \"../abstract/forms/access-control-form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode-enum\";\r\nimport { StringBuilder } from \"src/app/tools/stringBuilder\";\r\n\r\n@Component({\r\n  selector: \"user-details\",\r\n  templateUrl: \"./user-details.html\"\r\n})\r\nexport class UserDetailsComponent\r\n  extends AccessControlFormComponent<UserDetailsModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareUserDetailsModel;\r\n\r\n  protected override afterSubmitionCustomOperationsHandler = undefined;\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n  protected override readonly entityId: string;\r\n\r\n  user: UserDetailsModel;\r\n  userRoles: SelectItem<number>[];\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteUser',\r\n      ApiRoutes.user.delete,\r\n      dialogMessageService,\r\n      'User',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      router,\r\n      ApiRoutes.user.put,\r\n      translate,\r\n      [UserPermissionEnum.Users_CanModify],\r\n      Routes.users.navigations.list);\r\n\r\n    this.createForm({\r\n      CreatedOn: [{ value: '', disabled: true }],\r\n      Email: ['', Validators.pattern(RegexPatterns.emailPattern)],\r\n      FirstName: ['', Validators.required],\r\n      IsActive: false,\r\n      LastName: ['', Validators.required],\r\n      Login: [{ value: '', disabled: true }],\r\n      UserRoleId: null,\r\n      Password: ['', Validators.pattern(RegexPatterns.passwordPattern)]\r\n    });\r\n\r\n    this.loadUser();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.users.navigations.list]);\r\n  }\r\n\r\n  private getEntityInstanceName(): string {\r\n    return new StringBuilder(this.user.LastName)\r\n      .append(' ')\r\n      .append(this.user.FirstName)\r\n      .toString();\r\n  }\r\n\r\n  private isPasswordFieldFilled() {\r\n    return this.form.value.Password.length > 0;\r\n  }\r\n\r\n  private loadUser() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<UserDetailsModel>(ApiRoutes.user.getById(this.entityId))\r\n      .subscribe(result => {\r\n        this.user = result;\r\n\r\n        this.updateForm({\r\n          CreatedOn: PrimeNgHelper.getDateFromCalendarAsString(new Date(this.user.CreatedOn ?? \"\")),\r\n          Email: this.user.Email,\r\n          FirstName: this.user.FirstName,\r\n          IsActive: this.user.IsActive,\r\n          LastName: this.user.LastName,\r\n          Login: this.user.Login,\r\n          UserRoleId: this.user.UserRoleId.toString(),\r\n        });\r\n      });\r\n  }\r\n\r\n  private populateDropdowns() {\r\n    this.selectOptionsService\r\n      .getUserRoles()\r\n      .subscribe(options => {\r\n        this.userRoles = options;\r\n      });\r\n  }\r\n\r\n  private prepareUserDetailsModel(): UserDetailsModel {\r\n    const user = <UserDetailsModel>{\r\n      Email: this.form.value.Email,\r\n      FirstName: this.form.value.FirstName,\r\n      Id: this.user.Id,\r\n      IsActive: this.form.value.IsActive,\r\n      LastName: this.form.value.LastName,\r\n      UserRoleId: this.form.value.UserRoleId\r\n    };\r\n\r\n    if (this.isPasswordFieldFilled()) {\r\n      user.Password = this.form.value.Password;\r\n    }\r\n\r\n    return user;\r\n  }\r\n}","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { PngTableColumn } from '../../interfaces/png';\r\nimport { UserListItemModel, UserListModel } from 'src/app/interfaces/user';\r\nimport { Table } from 'primeng/table';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ConfirmationService, LazyLoadEvent, SelectItem } from 'primeng/api';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { FilterService } from '../../services/filters/filter.service';\r\nimport { SelectOptionsService } from 'src/app/services/select-options/select-options.service';\r\nimport { ApiRoutes } from 'src/app/api-routes';\r\nimport { Router } from '@angular/router';\r\nimport { StringBuilder } from 'src/app/tools/stringBuilder';\r\nimport { UserPermissionEnum } from 'src/app/enums/user-permission-enum';\r\nimport { ErrorService } from 'src/app/services/errors/error.service';\r\nimport { DialogMessageService } from 'src/app/services/messages/dialog-message.service';\r\nimport { ConsoleMessageService } from 'src/app/services/messages/console-message.service';\r\nimport { Routes } from 'src/app/routes';\r\nimport { AccessControlComponent } from '../abstract/access-controls/access-control';\r\nimport { AuthorizationService } from 'src/app/services/authorization/authorization.service';\r\nimport { FilterTypeEnum } from 'src/app/enums/filter-type-enum';\r\n\r\n@Component({\r\n  selector: \"user-list\",\r\n  templateUrl: \"./user-list.html\"\r\n})\r\nexport class UserListComponent\r\n  extends AccessControlComponent<UserListItemModel>\r\n  implements OnInit {\r\n\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n\r\n  private readonly _dataPopulator = {\r\n    multiSelects: {\r\n      userRoles: {\r\n        get: () => this.getUserRoleMultiSelectData(),\r\n        set: (userRoles: SelectItem[]) => this.setUserRoleMultiSelectData(userRoles)\r\n      }\r\n    },\r\n    users: {\r\n      get: (event: LazyLoadEvent) => this.getUsers(event),\r\n      set: (users: UserListModel) => this.setUsers(users)\r\n    }\r\n  };\r\n\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  cols: PngTableColumn[];\r\n  totalRecords: number;\r\n  userRoleOptions: SelectItem[];\r\n  users: UserListItemModel[];\r\n\r\n  @ViewChild('dataTable') dataTable: Table;\r\n\r\n  constructor(\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    public readonly filterService: FilterService,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteUser',\r\n      ApiRoutes.user.delete,\r\n      dialogMessageService,\r\n      'User',\r\n      errorService,\r\n      httpClient,\r\n      () => {\r\n        this._dataPopulator.users\r\n          .get(this.tempLazyLoadEvent)\r\n          .subscribe(result => this._dataPopulator.users.set(result));\r\n      },\r\n      router,\r\n      translate,\r\n      [UserPermissionEnum.Users_CanModify]);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cols = [\r\n      <PngTableColumn>{\r\n        field: 'Login',\r\n        header: 'User.Login',\r\n        width: '10%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'FirstName',\r\n        header: 'User.FirstName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'LastName',\r\n        header: 'User.LastName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'UserRoleName',\r\n        header: 'User.UserRoleName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true,\r\n        replaceWith: 'UserRoleId'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'IsActive',\r\n        header: 'User.IsActive',\r\n        width: '10%'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Actions',\r\n        header: '',\r\n        width: '20%'\r\n      }\r\n    ];\r\n\r\n    this._dataPopulator.multiSelects.userRoles\r\n      .get()\r\n      .subscribe(userRoles => this._dataPopulator.multiSelects.userRoles.set(userRoles));\r\n  }\r\n\r\n  public loadUsersLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n\r\n    this._dataPopulator.users\r\n      .get(event)\r\n      .subscribe(result => this._dataPopulator.users.set(result));\r\n  }\r\n\r\n  public onCreate() {\r\n    this.router.navigate([Routes.users.navigations.creation]);\r\n  }\r\n\r\n  public onEdit(user: UserListItemModel) {\r\n    this.router.navigate([Routes.users.navigations.edition(user.Id)]);\r\n  }\r\n\r\n  private getEntityInstanceName(user: UserListItemModel): string {\r\n    return new StringBuilder(user.LastName)\r\n      .append(' ')\r\n      .append(user.FirstName)\r\n      .toString();\r\n  }\r\n\r\n  private getUserRoleMultiSelectData() {\r\n    return this.selectOptionsService.getUserRoles();\r\n  }\r\n\r\n  private getUsers(event: LazyLoadEvent) {\r\n    event.sortField ??= this.cols[0]?.field;\r\n\r\n    return this.httpClient\r\n      .get<UserListModel>(ApiRoutes.user.getAll(event, this.cols));\r\n  }\r\n\r\n  private setUserRoleMultiSelectData(userRoles: SelectItem[]) {\r\n    this.userRoleOptions = userRoles;\r\n\r\n    const userRoleColumn = this.cols.find(c => c.field === \"UserRoleName\");\r\n    if (userRoleColumn) {\r\n      userRoleColumn.options = this.userRoleOptions;\r\n    }\r\n  }\r\n\r\n  private setUsers(users: UserListModel) {\r\n    this.totalRecords = users.TotalRowsCount;\r\n    this.users = users.List;\r\n  }\r\n}","export enum ApiResultEnum {\r\n  AssignedRoleDeletionAttempt,\r\n  BadRequest,\r\n  DoesNotExist,\r\n  DoesNotMatchJWT,\r\n  Error,\r\n  ExistsInDatabase,\r\n  Invalid,\r\n  LoginExists,\r\n  NameExists,\r\n  NationalIdExists,\r\n  None,\r\n  NotActive,\r\n  NotFound,\r\n  NoUserPermissionAssigned,\r\n  OK,\r\n  RepresentativeExists,\r\n  TheOnlyAssignedRoleDeletionAttempt,\r\n  Used,\r\n  UserHasBeenAlreadyAssignedToRole,\r\n  WrongOldPassword,\r\n}","export enum ClientTypeEnum {\r\n  Private = 1,\r\n  Company = 2,\r\n}","export enum ErrorMessageTypeEnum {\r\n  Email = \"Email\",\r\n  Empty = \"Empty\",\r\n  Length = \"Length\",\r\n  MatchAllowedLetters = \"MatchAllowedLetters\",\r\n  MatchSmallLetters = \"MatchSmallLetters\"\r\n}","export enum FilterTypeEnum {\r\n  Date = \"date\",\r\n  Numeric = \"numeric\",\r\n  Text = \"text\"\r\n}","export enum FormModeEnum {\r\n  Creation,\r\n  Edition\r\n}","export enum LanguageCodeEnum {\r\n  En = 1,\r\n  Pl = 2\r\n}","export enum MessageLifeTimeEnum {\r\n  Error = 2000,\r\n  Info = 2000,\r\n  Success = 3000,\r\n  Warning = 2000\r\n}","export enum MessageTypeEnum {\r\n  Error = \"error\",\r\n  Info = \"info\",\r\n  Success = \"success\",\r\n  Warning = \"warn\"\r\n}","export enum SearchOperatorEnum {\r\n  MatchAll = \"and\",\r\n  MatchAny = \"or\"\r\n}","export enum UserPermissionEnum {\r\n  ForAll = 0,\r\n  Users_CanList = 1,\r\n  Users_CanModify = 2,\r\n  UserRoles_CanList = 3,\r\n  UserRoles_CanModify = 4,\r\n  Clients_CanList = 5,\r\n  Clients_CanModify = 6,\r\n  ClientRepresentatives_CanList = 7,\r\n  ClientRepresentatives_CanModify = 8,\r\n}","export const LIST_ICON_NAME = 'pi pi-list'\r\nexport const MODIFY_ICON_NAME = 'pi pi-pencil';\r\n\r\nexport const Icons: { [key: string]: string } = {\r\n  'Permissions.Clients': 'fa fa-solid fa-face-smile',\r\n  'Permissions.ClientRepresentatives': 'fa fa-solid fa-circle-user',\r\n  'Permissions.UserRoles': 'pi pi-users',\r\n  'Permissions.Users': 'pi pi-user'\r\n}","export interface Address {\r\n  ApartmentNumber?: string,\r\n  City: string,\r\n  Country: Country,\r\n  Email?: string,\r\n  Id: number,\r\n  PhoneNumber?: string,\r\n  PostalCode: string,\r\n  StreetName: string,\r\n  StreetNumber: string\r\n}\r\n\r\nexport const addressFormFields = {\r\n  ApartmentNumber: 'ApartmentNumber',\r\n  City: 'City',\r\n  Country: 'CountryId',\r\n  Email: 'Email',\r\n  PhoneNumber: 'PhoneNumber',\r\n  PostalCode: 'PostalCode',\r\n  StreetName: 'StreetName',\r\n  StreetNumber: 'StreetNumber'\r\n}\r\n\r\nexport interface ClientAddress extends Address {\r\n  NationalId: string\r\n}\r\n\r\nexport interface Country {\r\n  Id: string,\r\n  Code: string\r\n}","export class NameInLanguage {\r\n  Name: string;\r\n  LanguageId: number;\r\n  LanguageName: string;\r\n}\r\n\r\nexport abstract class NameInLanguagesBase {\r\n  NameInLanguages: NameInLanguage[];\r\n}","import { SelectItem } from \"primeng/api\";\r\nimport { FilterTypeEnum } from \"../enums/filter-type-enum\";\r\n\r\nexport class PngTable {\r\n  cols: PngTableColumn[] = [];\r\n\r\n  constructor(cols: PngTableColumn[]) {\r\n    this.cols = cols;\r\n  }\r\n\r\n  public setOptionsForColumn(columnName: string, options: SelectItem[]) {\r\n    const column = this.cols.find(c => c.field === columnName);\r\n\r\n    if (column) {\r\n      column.options = options;\r\n    }\r\n  }\r\n}\r\n\r\nexport class PngTableColumn {\r\n  applyGlobalFiltering: boolean;\r\n  field: string;\r\n  filterMatchMode?: string;\r\n  header: string;\r\n  options?: SelectItem[];\r\n  replaceWith?: string;\r\n  filterType: FilterTypeEnum = FilterTypeEnum.Text;\r\n  width?: string;\r\n\r\n  constructor(field: string, header: string, width: string, applyGlobalFiltering?: boolean) {\r\n    this.field = field;\r\n    this.header = header;\r\n    this.width = width;\r\n    this.applyGlobalFiltering = applyGlobalFiltering ? applyGlobalFiltering : false;\r\n    this.filterType = FilterTypeEnum.Text;\r\n  }\r\n}\r\n\r\nexport class PngTreeColumn {\r\n  field: string;\r\n  header: string;\r\n  icon: string;\r\n}","export class Menu {\r\n    Icon?: string;\r\n    Items?: MenuArray;\r\n    Label: string;\r\n    Permissions?: number[];\r\n    RouterLink?: string[];\r\n}\r\n\r\nexport class MenuArray extends Array<Menu> {\r\n    public getItemsForLabel(label: string): MenuArray | undefined {\r\n        return this.find(m => m.Label == label)?.Items;\r\n    }\r\n}\r\n\r\nexport interface SelectOption {\r\n    IsSelected: boolean;\r\n    Name: string;\r\n    Value: string | number;\r\n}","import { UserPermissionNode } from \"../components/user-roles/models/user-permission-node\";\r\n\r\nexport class PermissionGroupItemModel {\r\n  Name: string;\r\n  Permissions: PermissionItemModel[];\r\n}\r\n\r\nexport class PermissionItemModel {\r\n  Id: number;\r\n  Name: string;\r\n  IsSelected: boolean;\r\n  LinkedPermissionsIds: number[];\r\n}\r\n\r\nexport class SelectedUserPermissionNodeArray extends Array<UserPermissionNode<any>> {\r\n  public tryPush(item: UserPermissionNode<any>) {\r\n    if (item.data.isSelected)\r\n      this.push(item);\r\n  }\r\n}\r\n\r\nexport interface UserPermissionNodeData {\r\n  icon?: string;\r\n  id: number | null,\r\n  isSelected?: boolean,\r\n  linkedPermissionIds: number[],\r\n  name: string\r\n}","import { UserPermissionNode } from \"../components/user-roles/models/user-permission-node\";\r\nimport { NameInLanguagesBase } from \"./name-in-language\";\r\nimport { PermissionGroupItemModel, PermissionItemModel, SelectedUserPermissionNodeArray } from \"./user-permission\";\r\n\r\nexport class UserRoleCreationModel extends NameInLanguagesBase {\r\n  PermissionsSelected: PermissionItemModel[] = [];\r\n\r\n  public doesPermissionExistWithinSelected(permissionId: number) {\r\n    return this.PermissionsSelected.find(p => p.Id === permissionId);\r\n  }\r\n}\r\n\r\nexport class UserRoleDetailsModel extends NameInLanguagesBase {\r\n  Id: number;\r\n  Name?: string;\r\n  GroupedPermissions: PermissionGroupItemModel[] = [];\r\n  PermissionsSelected: PermissionItemModel[] = [];\r\n\r\n  public doesPermissionExistWithinSelected(permissionId: number) {\r\n    return this.PermissionsSelected.find(p => p.Id === permissionId);\r\n  }\r\n}\r\n\r\nexport interface UserRoleListModel {\r\n  List: UserRoleListItemModel[];\r\n  TotalRowsCount: number;\r\n}\r\n\r\nexport interface UserRoleListItemModel {\r\n  Id: number;\r\n  Name: string;\r\n}\r\n\r\nexport interface UserRolePermissionsDestinations {\r\n  allItems: UserPermissionNode<any>[];\r\n  selectedItems: SelectedUserPermissionNodeArray;\r\n}\r\n\r\nexport interface UserRolePermissionsForCreation {\r\n  List: PermissionGroupItemModel[];\r\n}","import { Component } from '@angular/core';\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { LayoutService } from \"./services/app.layout.service\";\r\nimport { ApiRoutes } from '../api-routes';\r\nimport { AuthorizationService } from '../services/authorization/authorization.service';\r\nimport { UserChangeThemeModel } from '../interfaces/user';\r\nimport { ApiResultEnum } from '../enums/api-result-enum';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n    selector: 'app-footer',\r\n    templateUrl: './app.footer.component.html'\r\n})\r\nexport class AppFooterComponent {\r\n\r\n    isDarkModeThemeSelected: boolean = false;\r\n\r\n    constructor(\r\n        private readonly httpClient: HttpClient,\r\n        public readonly layoutService: LayoutService,\r\n        public readonly translate: TranslateService) {\r\n\r\n        const isDarkModeThemeSelectedFromStorage = localStorage.getItem('isDarkModeThemeSelected');\r\n\r\n        if (isDarkModeThemeSelectedFromStorage) {\r\n            this.isDarkModeThemeSelected = Boolean(isDarkModeThemeSelectedFromStorage);\r\n        }\r\n\r\n        this.httpClient\r\n            .get<boolean>(ApiRoutes.user.getTheme(AuthorizationService.currentUserId!))\r\n            .subscribe({\r\n                next: result => {\r\n                    this.isDarkModeThemeSelected = result;\r\n                    this.changeTheme();\r\n                }\r\n            });\r\n    }\r\n\r\n    changeUserTheme() {\r\n        localStorage.setItem('isDarkModeThemeSelected', this.isDarkModeThemeSelected.toString());\r\n\r\n        const model = <UserChangeThemeModel>{\r\n            Id: AuthorizationService.currentUserId\r\n        };\r\n\r\n        this.httpClient\r\n            .post<string>(ApiRoutes.user.changeTheme, model)\r\n            .subscribe({\r\n                next: result => {\r\n                    if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n                        this.changeTheme();\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    private changeTheme() {\r\n        const theme = this.isDarkModeThemeSelected ? 'arya-blue' : 'saga-orange';\r\n        const colorScheme = this.isDarkModeThemeSelected ? 'dark' : 'light';\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const newHref = themeLink.getAttribute('href')!.replace(this.layoutService.config.theme, theme);\r\n\r\n        this.layoutService.config.colorScheme\r\n        this.replaceThemeLink(newHref, () => {\r\n            this.layoutService.config.theme = theme;\r\n            this.layoutService.config.colorScheme = colorScheme;\r\n            this.layoutService.onConfigUpdate();\r\n        });\r\n    }\r\n\r\n    private replaceThemeLink(href: string, onComplete: Function) {\r\n        const id = 'theme-css';\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const cloneLinkElement = <HTMLLinkElement>themeLink.cloneNode(true);\r\n\r\n        cloneLinkElement.setAttribute('href', href);\r\n        cloneLinkElement.setAttribute('id', id + '-clone');\r\n\r\n        themeLink.parentNode!.insertBefore(cloneLinkElement, themeLink.nextSibling);\r\n\r\n        cloneLinkElement.addEventListener('load', () => {\r\n            themeLink.remove();\r\n            cloneLinkElement.setAttribute('id', id);\r\n            onComplete();\r\n        });\r\n    }\r\n}\r\n","import { Component, OnDestroy, Renderer2, ViewChild } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { filter, Subscription } from 'rxjs';\r\nimport { LayoutService } from \"./services/app.layout.service\";\r\nimport { AppSidebarComponent } from \"./app.sidebar.component\";\r\nimport { AppTopBarComponent } from './app.topbar.component';\r\nimport { AuthenticationService } from '../services/authentication/authentication.service';\r\nimport { Routes } from '../routes';\r\n\r\n@Component({\r\n    selector: 'app-layout',\r\n    templateUrl: './app.layout.component.html',\r\n})\r\nexport class AppLayoutComponent implements OnDestroy {\r\n\r\n    overlayMenuOpenSubscription: Subscription;\r\n    menuOutsideClickListener: any;\r\n    profileMenuOutsideClickListener: any;\r\n    isUserLoggedIn: boolean;\r\n\r\n    @ViewChild(AppSidebarComponent) appSidebar!: AppSidebarComponent;\r\n    @ViewChild(AppTopBarComponent) appTopbar!: AppTopBarComponent;\r\n\r\n    constructor(\r\n        private authenticationService: AuthenticationService,\r\n        public layoutService: LayoutService,\r\n        public renderer: Renderer2,\r\n        public router: Router) {\r\n\r\n        this.isUserLoggedIn = this.authenticationService.isLoggedIn();\r\n\r\n        if (!this.isUserLoggedIn) {\r\n            this.router.navigate([Routes.login.navigations.default]);\r\n        }\r\n        else {\r\n            this.overlayMenuOpenSubscription = this.layoutService.overlayOpen$.subscribe(() => {\r\n                if (!this.menuOutsideClickListener) {\r\n                    this.menuOutsideClickListener = this.renderer.listen('document', 'click', event => {\r\n                        const isOutsideClicked = !(this.appSidebar.el.nativeElement.isSameNode(event.target) || this.appSidebar.el.nativeElement.contains(event.target)\r\n                            || this.appTopbar.menuButton.nativeElement.isSameNode(event.target) || this.appTopbar.menuButton.nativeElement.contains(event.target));\r\n\r\n                        if (isOutsideClicked) {\r\n                            this.hideMenu();\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (!this.profileMenuOutsideClickListener) {\r\n                    this.profileMenuOutsideClickListener = this.renderer.listen('document', 'click', event => {\r\n                        const isOutsideClicked = !(this.appTopbar.menu.nativeElement.isSameNode(event.target) || this.appTopbar.menu.nativeElement.contains(event.target)\r\n                            || this.appTopbar.topbarMenuButton.nativeElement.isSameNode(event.target) || this.appTopbar.topbarMenuButton.nativeElement.contains(event.target));\r\n\r\n                        if (isOutsideClicked) {\r\n                            this.hideProfileMenu();\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (this.layoutService.state.staticMenuMobileActive) {\r\n                    this.blockBodyScroll();\r\n                }\r\n            });\r\n\r\n            this.router.events.pipe(filter(event => event instanceof NavigationEnd))\r\n                .subscribe(() => {\r\n                    this.hideMenu();\r\n                    this.hideProfileMenu();\r\n                });\r\n        }\r\n    }\r\n\r\n    blockBodyScroll(): void {\r\n        if (document.body.classList) {\r\n            document.body.classList.add('blocked-scroll');\r\n        }\r\n        else {\r\n            document.body.className += ' blocked-scroll';\r\n        }\r\n    }\r\n\r\n    hideMenu() {\r\n        this.layoutService.state.overlayMenuActive = false;\r\n        this.layoutService.state.staticMenuMobileActive = false;\r\n        this.layoutService.state.menuHoverActive = false;\r\n        if (this.menuOutsideClickListener) {\r\n            this.menuOutsideClickListener();\r\n            this.menuOutsideClickListener = null;\r\n        }\r\n        this.unblockBodyScroll();\r\n    }\r\n\r\n    hideProfileMenu() {\r\n        this.layoutService.state.profileSidebarVisible = false;\r\n        if (this.profileMenuOutsideClickListener) {\r\n            this.profileMenuOutsideClickListener();\r\n            this.profileMenuOutsideClickListener = null;\r\n        }\r\n    }\r\n\r\n    unblockBodyScroll(): void {\r\n        if (document.body.classList) {\r\n            document.body.classList.remove('blocked-scroll');\r\n        }\r\n        else {\r\n            document.body.className = document.body.className.replace(new RegExp('(^|\\\\b)' +\r\n                'blocked-scroll'.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\r\n        }\r\n    }\r\n\r\n    get containerClass() {\r\n        return {\r\n            'layout-theme-light': this.layoutService.config.colorScheme === 'light',\r\n            'layout-theme-dark': this.layoutService.config.colorScheme === 'dark',\r\n            'layout-overlay': this.layoutService.config.menuMode === 'overlay',\r\n            'layout-static': this.layoutService.config.menuMode === 'static',\r\n            'layout-static-inactive': this.layoutService.state.staticMenuDesktopInactive && this.layoutService.config.menuMode === 'static',\r\n            'layout-overlay-active': this.layoutService.state.overlayMenuActive,\r\n            'layout-mobile-active': this.layoutService.state.staticMenuMobileActive,\r\n            'p-input-filled': this.layoutService.config.inputStyle === 'filled',\r\n            'p-ripple-disabled': !this.layoutService.config.ripple\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.overlayMenuOpenSubscription) {\r\n            this.overlayMenuOpenSubscription.unsubscribe();\r\n        }\r\n\r\n        if (this.menuOutsideClickListener) {\r\n            this.menuOutsideClickListener();\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { SidebarModule } from 'primeng/sidebar';\r\nimport { BadgeModule } from 'primeng/badge';\r\nimport { RadioButtonModule } from 'primeng/radiobutton';\r\nimport { InputSwitchModule } from 'primeng/inputswitch';\r\nimport { RippleModule } from 'primeng/ripple';\r\nimport { AppMenuComponent } from './app.menu.component';\r\nimport { AppMenuitemComponent } from './app.menuitem.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AppTopBarComponent } from './app.topbar.component';\r\nimport { AppFooterComponent } from './app.footer.component';\r\nimport { AppConfigModule } from './config/config.module';\r\nimport { AppSidebarComponent } from \"./app.sidebar.component\";\r\nimport { AppLayoutComponent } from \"./app.layout.component\";\r\nimport { MessagesModule } from 'primeng/messages';\r\n\r\n\r\n//primeng\r\nimport { BreadcrumbModule } from 'primeng/breadcrumb';\r\nimport { PanelMenuModule } from 'primeng/panelmenu';\r\nimport { SplitButtonModule } from 'primeng/splitbutton';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppFooterComponent,\r\n        AppLayoutComponent,\r\n        AppMenuComponent,\r\n        AppMenuitemComponent,\r\n        AppSidebarComponent,\r\n        AppTopBarComponent,\r\n    ],\r\n    imports: [\r\n        AppConfigModule,\r\n        BadgeModule,\r\n        BrowserAnimationsModule,\r\n        BrowserModule,\r\n        FormsModule,\r\n        HttpClientModule,\r\n        InputSwitchModule,\r\n        InputTextModule,\r\n        RadioButtonModule,\r\n        RippleModule,\r\n        RouterModule,\r\n        SidebarModule,\r\n        //primeng\r\n        BreadcrumbModule,\r\n        MessagesModule,\r\n        PanelMenuModule,\r\n        SplitButtonModule,\r\n    ],\r\n    exports: [AppLayoutComponent]\r\n})\r\nexport class AppLayoutModule { }\r\n","import { OnInit } from '@angular/core';\r\nimport { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Menu } from '../interfaces/ui-models';\r\nimport { LayoutService } from './services/app.layout.service';\r\nimport { AuthorizationService } from '../services/authorization/authorization.service';\r\nimport { MenuService } from '../services/layout/menu.service';\r\n\r\n@Component({\r\n    selector: 'app-menu',\r\n    templateUrl: './app.menu.component.html'\r\n})\r\nexport class AppMenuComponent implements OnInit {\r\n\r\n    model: any[] = [];\r\n\r\n    constructor(public layoutService: LayoutService,\r\n        private router: Router,\r\n        private menuService: MenuService,\r\n        private authorizationService: AuthorizationService,\r\n        public translate: TranslateService) {\r\n\r\n        this.buildMenu();\r\n        this.router.events.forEach(() => {\r\n            this.buildMenu();\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    public buildMenu() {\r\n        this.authorizationService.decodeTokenAndSetData();\r\n        this.model = [];\r\n\r\n        var menu = this.menuService.getMenu();\r\n\r\n        menu.forEach(menu => this.appendMenu(menu));\r\n\r\n        this.model = [...this.model];\r\n    }\r\n\r\n    private appendMenu(menu: Menu) {\r\n        if (!this.model)\r\n            return;\r\n\r\n        const allMenuPermissions: number[] = [];\r\n\r\n        menu.Items?.forEach(menuItem => menuItem.Permissions?.forEach(permission => allMenuPermissions.push(permission)));\r\n\r\n        //TODO\r\n        const isAuthorized = this.isAuthorized(allMenuPermissions);\r\n\r\n        if (isAuthorized) {\r\n\r\n            const menuItems: { label: string; icon: string | undefined; routerLink: string[] | undefined; }[] = [];\r\n\r\n            menu.Items?.forEach(m => menuItems.push({\r\n                label: this.translate.instant(m.Label),\r\n                icon: m.Icon,\r\n                routerLink: m.RouterLink\r\n            }));\r\n\r\n            this.model.push({\r\n                label: this.translate.instant(menu.Label),\r\n                items: menuItems\r\n            });\r\n        }\r\n    }\r\n\r\n    private appendMenuItem(menuItemLabel: string, permissions: number[], label: string, icon: string, routerLink?: string[]) {\r\n        if (!this.model)\r\n            return;\r\n\r\n        const isAuthorized = this.isAuthorized(permissions);\r\n\r\n        if (isAuthorized) {\r\n            var menuItem = this.model.find(x => x.label == this.translate.instant(menuItemLabel));\r\n\r\n            if (menuItem) {\r\n                if (!menuItem.items) {\r\n                    menuItem.items = [];\r\n                }\r\n\r\n                menuItem.items = menuItem.items.concat([\r\n                    { label: this.translate.instant(label), icon: icon, routerLink: routerLink }\r\n                ]);\r\n            }\r\n        }\r\n    }\r\n\r\n    private isAuthorized(permissions: number[]): boolean {\r\n        let isAuthorized = false;\r\n\r\n        for (const permission of permissions) {\r\n            if (this.authorizationService.isAuthorized([permission])) {\r\n                isAuthorized = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return isAuthorized;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { MenuChangeEvent } from './api/menuchangeevent';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MenuService {\r\n\r\n    private menuSource = new Subject<MenuChangeEvent>();\r\n    private resetSource = new Subject();\r\n\r\n    menuSource$ = this.menuSource.asObservable();\r\n    resetSource$ = this.resetSource.asObservable();\r\n\r\n    onMenuStateChange(event: MenuChangeEvent) {\r\n        this.menuSource.next(event);\r\n    }\r\n\r\n    reset() {\r\n        this.resetSource.next(true);\r\n    }\r\n}\r\n","import { ChangeDetectorRef, Component, Host, HostBinding, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { Subscription } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { MenuService } from './app.menu.service';\r\nimport { LayoutService } from './services/app.layout.service';\r\n\r\n@Component({\r\n    // eslint-disable-next-line @angular-eslint/component-selector\r\n    selector: '[app-menuitem]',\r\n    template: `\r\n\t\t<ng-container>\r\n            <div *ngIf=\"root && item.visible !== false\" class=\"layout-menuitem-root-text\">{{item.label}}</div>\r\n\t\t\t<a *ngIf=\"(!item.routerLink || item.items) && item.visible !== false\" [attr.href]=\"item.url\" (click)=\"itemClick($event)\"\r\n\t\t\t   [ngClass]=\"item.class\" [attr.target]=\"item.target\" tabindex=\"0\" pRipple>\r\n\t\t\t\t<i [ngClass]=\"item.icon\" class=\"layout-menuitem-icon\"></i>\r\n\t\t\t\t<span class=\"layout-menuitem-text\">{{item.label}}</span>\r\n\t\t\t\t<i class=\"pi pi-fw pi-angle-down layout-submenu-toggler\" *ngIf=\"item.items\"></i>\r\n\t\t\t</a>\r\n\t\t\t<a *ngIf=\"(item.routerLink && !item.items) && item.visible !== false\" (click)=\"itemClick($event)\" [ngClass]=\"item.class\" \r\n\t\t\t   [routerLink]=\"item.routerLink\" routerLinkActive=\"active-route\" [routerLinkActiveOptions]=\"item.routerLinkActiveOptions||{ paths: 'exact', queryParams: 'ignored', matrixParams: 'ignored', fragment: 'ignored' }\"\r\n               [fragment]=\"item.fragment\" [queryParamsHandling]=\"item.queryParamsHandling\" [preserveFragment]=\"item.preserveFragment\" \r\n               [skipLocationChange]=\"item.skipLocationChange\" [replaceUrl]=\"item.replaceUrl\" [state]=\"item.state\" [queryParams]=\"item.queryParams\"\r\n               [attr.target]=\"item.target\" tabindex=\"0\" pRipple>\r\n\t\t\t\t<i [ngClass]=\"item.icon\" class=\"layout-menuitem-icon\"></i>\r\n\t\t\t\t<span class=\"layout-menuitem-text\">{{item.label}}</span>\r\n\t\t\t\t<i class=\"pi pi-fw pi-angle-down layout-submenu-toggler\" *ngIf=\"item.items\"></i>\r\n\t\t\t</a>\r\n\r\n\t\t\t<ul *ngIf=\"item.items && item.visible !== false\" [@children]=\"submenuAnimation\">\r\n\t\t\t\t<ng-template ngFor let-child let-i=\"index\" [ngForOf]=\"item.items\">\r\n\t\t\t\t\t<li app-menuitem [item]=\"child\" [index]=\"i\" [parentKey]=\"key\" [class]=\"child.badgeClass\"></li>\r\n\t\t\t\t</ng-template>\r\n\t\t\t</ul>\r\n\t\t</ng-container>\r\n    `,\r\n    animations: [\r\n        trigger('children', [\r\n            state('collapsed', style({\r\n                height: '0'\r\n            })),\r\n            state('expanded', style({\r\n                height: '*'\r\n            })),\r\n            transition('collapsed <=> expanded', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))\r\n        ])\r\n    ]\r\n})\r\nexport class AppMenuitemComponent implements OnInit, OnDestroy {\r\n\r\n    @Input() item: any;\r\n\r\n    @Input() index!: number;\r\n\r\n    @Input() @HostBinding('class.layout-root-menuitem') root!: boolean;\r\n\r\n    @Input() parentKey!: string;\r\n\r\n    active = false;\r\n\r\n    menuSourceSubscription: Subscription;\r\n\r\n    menuResetSubscription: Subscription;\r\n\r\n    key: string = \"\";\r\n\r\n    constructor(public layoutService: LayoutService, private cd: ChangeDetectorRef, public router: Router, private menuService: MenuService) {\r\n        this.menuSourceSubscription = this.menuService.menuSource$.subscribe(value => {\r\n            Promise.resolve(null).then(() => {\r\n                if (value.routeEvent) {\r\n                    this.active = (value.key === this.key || value.key.startsWith(this.key + '-')) ? true : false;\r\n                }\r\n                else {\r\n                    if (value.key !== this.key && !value.key.startsWith(this.key + '-')) {\r\n                        this.active = false;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        this.menuResetSubscription = this.menuService.resetSource$.subscribe(() => {\r\n            this.active = false;\r\n        });\r\n\r\n        this.router.events.pipe(filter(event => event instanceof NavigationEnd))\r\n            .subscribe(params => {\r\n                if (this.item.routerLink) {\r\n                    this.updateActiveStateFromRoute();\r\n                }\r\n            });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.key = this.parentKey ? this.parentKey + '-' + this.index : String(this.index);\r\n\r\n        if (this.item.routerLink) {\r\n            this.updateActiveStateFromRoute();\r\n        }\r\n    }\r\n\r\n    updateActiveStateFromRoute() {\r\n        let activeRoute = this.router.isActive(this.item.routerLink[0], { paths: 'exact', queryParams: 'ignored', matrixParams: 'ignored', fragment: 'ignored' });\r\n\r\n        if (activeRoute) {\r\n            this.menuService.onMenuStateChange({ key: this.key, routeEvent: true });\r\n        }\r\n    }\r\n\r\n    itemClick(event: Event) {\r\n        // avoid processing disabled items\r\n        if (this.item.disabled) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // execute command\r\n        if (this.item.command) {\r\n            this.item.command({ originalEvent: event, item: this.item });\r\n        }\r\n\r\n        // toggle active state\r\n        if (this.item.items) {\r\n            this.active = !this.active;\r\n        }\r\n\r\n        this.menuService.onMenuStateChange({ key: this.key });\r\n    }\r\n\r\n    get submenuAnimation() {\r\n        return this.root ? 'expanded' : (this.active ? 'expanded' : 'collapsed');\r\n    }\r\n\r\n    @HostBinding('class.active-menuitem') \r\n    get activeClass() {\r\n        return this.active && !this.root;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.menuSourceSubscription) {\r\n            this.menuSourceSubscription.unsubscribe();\r\n        }\r\n\r\n        if (this.menuResetSubscription) {\r\n            this.menuResetSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n","import { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { LayoutService } from \"./services/app.layout.service\";\r\nimport { AppMenuComponent } from './app.menu.component';\r\n\r\n@Component({\r\n    selector: 'app-sidebar',\r\n    templateUrl: './app.sidebar.component.html'\r\n})\r\nexport class AppSidebarComponent {\r\n\r\n    @ViewChild('appMenu') appMenu: AppMenuComponent;\r\n\r\n    constructor(public layoutService: LayoutService, public el: ElementRef) { }\r\n}\r\n\r\n","import { Component, ElementRef, Input, ViewChild } from '@angular/core';\r\nimport { MenuItem, PrimeNGConfig, SelectItem } from 'primeng/api';\r\nimport { AppComponent } from '../app.component';\r\nimport { LayoutService } from \"./services/app.layout.service\";\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AuthenticationService } from '../services/authentication/authentication.service';\r\nimport { ActivatedRoute, NavigationEnd, Router, RouterEvent, Scroll } from '@angular/router';\r\nimport { SelectOptionsService } from '../services/select-options/select-options.service';\r\nimport { LanguageCodeEnum } from '../enums/language-code-enum';\r\nimport { Title } from \"@angular/platform-browser\";\r\nimport { AppSidebarComponent } from './app.sidebar.component';\r\nimport { AuthorizationService } from '../services/authorization/authorization.service';\r\nimport { UserChangeLanguageModel } from '../interfaces/user';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ApiRoutes } from '../api-routes';\r\nimport { ApiResultEnum } from '../enums/api-result-enum';\r\nimport { concatMap, filter } from 'rxjs';\r\nimport { StringBuilder } from '../tools/stringBuilder';\r\nimport { Routes } from '../routes';\r\n\r\n@Component({\r\n    selector: 'app-topbar',\r\n    templateUrl: './app.topbar.component.html'\r\n})\r\nexport class AppTopBarComponent {\r\n\r\n    public readonly home = { icon: 'pi pi-home', url: 'home' };\r\n\r\n    private languageId: number;\r\n\r\n    breadcrumbItems: MenuItem[] = [];\r\n    userMenuItems: MenuItem[] = [];\r\n\r\n    @Input('appSidebar') appSidebar!: AppSidebarComponent;\r\n\r\n    @ViewChild('menubutton') menuButton!: ElementRef;\r\n    @ViewChild('topbarmenubutton') topbarMenuButton!: ElementRef;\r\n    @ViewChild('topbarmenu') menu!: ElementRef;\r\n\r\n    constructor(\r\n        private activatedRoute: ActivatedRoute,\r\n        public app: AppComponent,\r\n        public authenticationService: AuthenticationService,\r\n        private config: PrimeNGConfig,\r\n        private httpClient: HttpClient,\r\n        public layoutService: LayoutService,\r\n        private router: Router,\r\n        private selectOptionsService: SelectOptionsService,\r\n        private titleService: Title,\r\n        public translate: TranslateService) {\r\n\r\n        this.updateWithLanguageOnInit();\r\n    }\r\n\r\n    public setTheme(withDarkMode: boolean) {\r\n        const theme = withDarkMode ? 'arya-blue' : 'saga-orange';\r\n        const colorScheme = withDarkMode ? 'dark' : 'light';\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const newHref = themeLink.getAttribute('href')!.replace(this.layoutService.config.theme, theme);\r\n\r\n        this.layoutService.config.colorScheme\r\n        this.replaceThemeLink(newHref, () => {\r\n            this.layoutService.config.theme = theme;\r\n            this.layoutService.config.colorScheme = colorScheme;\r\n            this.layoutService.onConfigUpdate();\r\n        });\r\n    }\r\n\r\n    private createBreadcrumbs(route: ActivatedRoute, urlBuilder = new StringBuilder(), breadcrumbs: MenuItem[] = []): MenuItem[] {\r\n        const children: ActivatedRoute[] = route.children;\r\n\r\n        if (children.length === 0)\r\n            return breadcrumbs;\r\n\r\n        for (const child of children) {\r\n            const routeURL: string = child.snapshot.url.map(segment => segment.path).join('/');\r\n\r\n            if (routeURL !== '') {\r\n                urlBuilder.append(`/${routeURL}`);\r\n            }\r\n\r\n            const label = child.snapshot.data['breadcrumb'];\r\n\r\n            if (label) {\r\n                breadcrumbs.push(<MenuItem>{ label: label, url: urlBuilder.toString(), target: \"_self\" });\r\n            }\r\n\r\n            return this.createBreadcrumbs(child, urlBuilder, breadcrumbs);\r\n        }\r\n\r\n        return breadcrumbs;\r\n    }\r\n\r\n    private getLanguageCodeById(id: number): string {\r\n        switch (id) {\r\n            case LanguageCodeEnum.Pl.valueOf():\r\n                return \"pl\";\r\n            case LanguageCodeEnum.En.valueOf():\r\n                return \"en\";\r\n            default:\r\n                return \"---\";\r\n        }\r\n    }\r\n\r\n    private initializeLayout() {\r\n        this.titleService.setTitle(this.translate.instant('AppName'));\r\n        this.appSidebar?.appMenu?.buildMenu();\r\n    }\r\n\r\n    private initializeUserMenu(languages: SelectItem[]) {\r\n        this.userMenuItems = [\r\n            {\r\n                label: this.translate.instant('Language.Plural'),\r\n                icon: 'fa fa-solid fa-language',\r\n                items: languages.map(l => <MenuItem>{ label: l.label, command: () => this.onLanguageChange(l.value) })\r\n            },\r\n            { label: this.translate.instant('General.LogOut'), icon: 'fa fa-power-off', command: () => this.logout() }\r\n        ];\r\n    }\r\n\r\n    private logout(): void {\r\n        if (this.authenticationService.logout()) {\r\n            this.router.navigate([Routes.login.navigations.default]);\r\n        }\r\n    }\r\n\r\n    private onLanguageChange(id: number) {\r\n        const currentUserId = AuthorizationService.currentUserId;\r\n\r\n        if (!currentUserId)\r\n            return;\r\n\r\n        this.languageId = Number(id);\r\n\r\n        localStorage.setItem('languageId', this.languageId.toString());\r\n\r\n        const model = <UserChangeLanguageModel>{\r\n            Id: currentUserId,\r\n            LanguageId: this.languageId\r\n        };\r\n\r\n        this.httpClient\r\n            .put<string>(ApiRoutes.user.changeLanguage, model)\r\n            .subscribe(\r\n                result => {\r\n                    if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n                        this.updateWithLanguageOnLanguageChange();\r\n                    }\r\n                }\r\n            );\r\n    }\r\n\r\n    private updateBreadcrumbItemsWithLanguage() {\r\n        this.breadcrumbItems = this.breadcrumbItems.map(breadcrumbItem => ({ ...breadcrumbItem, label: this.translate.instant(breadcrumbItem.label!) }));\r\n    }\r\n\r\n    private updateWithLanguageOnInit() {\r\n        const userLanguageId = AuthorizationService.currentUserLanguageId;\r\n\r\n        if (userLanguageId) {\r\n            this.languageId = Number(userLanguageId);\r\n        }\r\n        else {\r\n            const languageIdFromStorage = localStorage.getItem('languageId');\r\n\r\n            if (languageIdFromStorage) {\r\n                this.languageId = Number(languageIdFromStorage);\r\n            }\r\n        }\r\n\r\n        if (this.languageId) {\r\n            const language = this.getLanguageCodeById(this.languageId);\r\n\r\n            this.router.events\r\n                .pipe(filter(event => event instanceof Scroll || event instanceof NavigationEnd))\r\n                .pipe(\r\n                    concatMap(() => {\r\n                        this.breadcrumbItems = this.createBreadcrumbs(this.activatedRoute.root);\r\n\r\n                        return this.translate.use(language);\r\n                    }),\r\n                    concatMap(() => {\r\n                        this.initializeLayout();\r\n\r\n                        return this.translate.get('primeng');\r\n                    }),\r\n                    concatMap(translation => {\r\n                        this.config.setTranslation(translation);\r\n\r\n                        return this.selectOptionsService.getLanguages();\r\n                    }))\r\n                .subscribe(languages => {\r\n                    this.initializeUserMenu(languages);\r\n                    this.updateBreadcrumbItemsWithLanguage();\r\n                });\r\n        }\r\n    }\r\n\r\n    private updateWithLanguageOnLanguageChange() {\r\n        const language = this.getLanguageCodeById(this.languageId);\r\n\r\n        this.translate\r\n            .use(language)\r\n            .pipe(\r\n                concatMap(() => {\r\n                    this.initializeLayout();\r\n\r\n                    return this.translate.get('primeng');\r\n                }),\r\n                concatMap(translation => {\r\n                    this.config.setTranslation(translation);\r\n\r\n                    return this.selectOptionsService.getLanguages();\r\n                }))\r\n            .subscribe(languages => {\r\n                this.initializeUserMenu(languages);\r\n                this.updateBreadcrumbItemsWithLanguage();\r\n            });\r\n    }\r\n\r\n    private replaceThemeLink(href: string, onComplete: Function) {\r\n        const id = 'theme-css';\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const cloneLinkElement = <HTMLLinkElement>themeLink.cloneNode(true);\r\n\r\n        cloneLinkElement.setAttribute('href', href);\r\n        cloneLinkElement.setAttribute('id', id + '-clone');\r\n\r\n        themeLink.parentNode!.insertBefore(cloneLinkElement, themeLink.nextSibling);\r\n\r\n        cloneLinkElement.addEventListener('load', () => {\r\n            themeLink.remove();\r\n            cloneLinkElement.setAttribute('id', id);\r\n            onComplete();\r\n        });\r\n    }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { LayoutService } from \"../services/app.layout.service\";\r\nimport { MenuService } from \"../app.menu.service\";\r\n\r\n@Component({\r\n    selector: 'app-config',\r\n    templateUrl: './app.config.component.html'\r\n})\r\nexport class AppConfigComponent {\r\n\r\n    @Input() minimal: boolean = false;\r\n\r\n    scales: number[] = [12, 13, 14, 15, 16];\r\n\r\n    constructor(public layoutService: LayoutService, public menuService: MenuService) { }\r\n\r\n    get visible(): boolean {\r\n        return this.layoutService.state.configSidebarVisible;\r\n    }\r\n\r\n    set visible(_val: boolean) {\r\n        this.layoutService.state.configSidebarVisible = _val;\r\n    }\r\n\r\n    get scale(): number {\r\n        return this.layoutService.config.scale;\r\n    }\r\n\r\n    set scale(_val: number) {\r\n        this.layoutService.config.scale = _val;\r\n    }\r\n\r\n    get menuMode(): string {\r\n        return this.layoutService.config.menuMode;\r\n    }\r\n\r\n    set menuMode(_val: string) {\r\n        this.layoutService.config.menuMode = _val;\r\n    }\r\n\r\n    get inputStyle(): string {\r\n        return this.layoutService.config.inputStyle;\r\n    }\r\n\r\n    set inputStyle(_val: string) {\r\n        this.layoutService.config.inputStyle = _val;\r\n    }\r\n\r\n    get ripple(): boolean {\r\n        return this.layoutService.config.ripple;\r\n    }\r\n\r\n    set ripple(_val: boolean) {\r\n        this.layoutService.config.ripple = _val;\r\n    }\r\n\r\n    onConfigButtonClick() {\r\n        this.layoutService.showConfigSidebar();\r\n    }\r\n\r\n    changeTheme(theme: string, colorScheme: string) {\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const newHref = themeLink.getAttribute('href')!.replace(this.layoutService.config.theme, theme);\r\n        this.layoutService.config.colorScheme\r\n        this.replaceThemeLink(newHref, () => {\r\n            this.layoutService.config.theme = theme;\r\n            this.layoutService.config.colorScheme = colorScheme;\r\n            this.layoutService.onConfigUpdate();\r\n        });\r\n    }\r\n\r\n    replaceThemeLink(href: string, onComplete: Function) {\r\n        const id = 'theme-css';\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const cloneLinkElement = <HTMLLinkElement>themeLink.cloneNode(true);\r\n\r\n        cloneLinkElement.setAttribute('href', href);\r\n        cloneLinkElement.setAttribute('id', id + '-clone');\r\n\r\n        themeLink.parentNode!.insertBefore(cloneLinkElement, themeLink.nextSibling);\r\n\r\n        cloneLinkElement.addEventListener('load', () => {\r\n            themeLink.remove();\r\n            cloneLinkElement.setAttribute('id', id);\r\n            onComplete();\r\n        });\r\n    }\r\n\r\n    decrementScale() {\r\n        this.scale--;\r\n        this.applyScale();\r\n    }\r\n\r\n    incrementScale() {\r\n        this.scale++;\r\n        this.applyScale();\r\n    }\r\n\r\n    applyScale() {\r\n        document.documentElement.style.fontSize = this.scale + 'px';\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SidebarModule } from 'primeng/sidebar';\r\nimport { RadioButtonModule } from 'primeng/radiobutton';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { InputSwitchModule } from 'primeng/inputswitch';\r\nimport { AppConfigComponent } from './app.config.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        ButtonModule,\r\n        CommonModule,\r\n        FormsModule,\r\n        InputSwitchModule,\r\n        RadioButtonModule,\r\n        SidebarModule,\r\n    ],\r\n    declarations: [\r\n        AppConfigComponent\r\n    ],\r\n    exports: [\r\n        AppConfigComponent\r\n    ]\r\n})\r\nexport class AppConfigModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nexport interface AppConfig {\r\n    inputStyle: string;\r\n    colorScheme: string;\r\n    theme: string;\r\n    ripple: boolean;\r\n    menuMode: string;\r\n    scale: number;\r\n}\r\n\r\ninterface LayoutState {\r\n    staticMenuDesktopInactive: boolean;\r\n    overlayMenuActive: boolean;\r\n    profileSidebarVisible: boolean;\r\n    configSidebarVisible: boolean;\r\n    staticMenuMobileActive: boolean;\r\n    menuHoverActive: boolean;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LayoutService {\r\n\r\n    config: AppConfig = {\r\n        ripple: false,\r\n        inputStyle: 'outlined',\r\n        menuMode: 'static',\r\n        colorScheme: 'light',\r\n        theme: 'arya-blue',\r\n        scale: 14,\r\n    };\r\n\r\n    state: LayoutState = {\r\n        staticMenuDesktopInactive: false,\r\n        overlayMenuActive: false,\r\n        profileSidebarVisible: false,\r\n        configSidebarVisible: false,\r\n        staticMenuMobileActive: false,\r\n        menuHoverActive: false\r\n    };\r\n\r\n    private configUpdate = new Subject<AppConfig>();\r\n\r\n    private overlayOpen = new Subject<any>();\r\n\r\n    configUpdate$ = this.configUpdate.asObservable();\r\n\r\n    overlayOpen$ = this.overlayOpen.asObservable();\r\n\r\n    onMenuToggle() {\r\n        if (this.isOverlay()) {\r\n            this.state.overlayMenuActive = !this.state.overlayMenuActive;\r\n            if (this.state.overlayMenuActive) {\r\n                this.overlayOpen.next(null);\r\n            }\r\n        }\r\n\r\n        if (this.isDesktop()) {\r\n            this.state.staticMenuDesktopInactive = !this.state.staticMenuDesktopInactive;\r\n        }\r\n        else {\r\n            this.state.staticMenuMobileActive = !this.state.staticMenuMobileActive;\r\n\r\n            if (this.state.staticMenuMobileActive) {\r\n                this.overlayOpen.next(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    showProfileSidebar() {\r\n        this.state.profileSidebarVisible = !this.state.profileSidebarVisible;\r\n        if (this.state.profileSidebarVisible) {\r\n            this.overlayOpen.next(null);\r\n        }\r\n    }\r\n\r\n    showConfigSidebar() {\r\n        this.state.configSidebarVisible = true;\r\n    }\r\n\r\n    isOverlay() {\r\n        return this.config.menuMode === 'overlay';\r\n    }\r\n\r\n    isDesktop() {\r\n        return window.innerWidth > 991;\r\n    }\r\n\r\n    isMobile() {\r\n        return !this.isDesktop();\r\n    }\r\n\r\n    onConfigUpdate() {\r\n        this.configUpdate.next(this.config);\r\n    }\r\n}\r\n","export const Routes = {\r\n  home: {\r\n    breadcrumbs: {\r\n      default: 'General.Dashboard'\r\n    },\r\n    navigations: {\r\n      default: 'home'\r\n    },\r\n    paths: {\r\n      default: 'home'\r\n    }\r\n  },\r\n  login: {\r\n    navigations: {\r\n      default: 'login'\r\n    },\r\n    paths: {\r\n      default: 'login'\r\n    }\r\n  },\r\n  clientRepresentatives: {\r\n    breadcrumbs: {\r\n      creation: 'ClientRepresentative.Create',\r\n      edition: 'ClientRepresentative.Edit',\r\n      list: 'ClientRepresentative.List'\r\n    },\r\n    navigations: {\r\n      creation: 'home/client-representatives/create',\r\n      edition: (id: string) => `home/client-representatives/edit/${id}`,\r\n      list: 'home/client-representatives'\r\n    },\r\n    paths: {\r\n      create: 'create',\r\n      edit: 'edit/:id',\r\n      list: 'client-representatives'\r\n    }\r\n  },\r\n  clients: {\r\n    breadcrumbs: {\r\n      creation: 'Client.Create',\r\n      edition: 'Client.Edit',\r\n      list: 'Client.List'\r\n    },\r\n    navigations: {\r\n      creation: 'home/clients/create',\r\n      edition: (id: string) => `home/clients/edit/${id}`,\r\n      list: 'home/clients'\r\n    },\r\n    paths: {\r\n      create: 'create',\r\n      edit: 'edit/:id',\r\n      list: 'clients'\r\n    },\r\n    tabs: {\r\n      general: {\r\n        index: 0\r\n      },\r\n      representatives: {\r\n        index: 1\r\n      },\r\n      audits: {\r\n        index: 2\r\n      }\r\n    }\r\n  },\r\n  userRoles: {\r\n    breadcrumbs: {\r\n      creation: 'UserRole.Create',\r\n      edition: 'UserRole.Edit',\r\n      list: 'UserRole.List'\r\n    },\r\n    navigations: {\r\n      creation: 'home/user-roles/create',\r\n      edition: (id: number) => `home/user-roles/edit/${id}`,\r\n      list: 'home/user-roles'\r\n    },\r\n    paths: {\r\n      create: 'create',\r\n      edit: 'edit/:id',\r\n      list: 'user-roles'\r\n    }\r\n  },\r\n  users: {\r\n    breadcrumbs: {\r\n      creation: 'User.Create',\r\n      edition: 'User.Edit',\r\n      list: 'User.List'\r\n    },\r\n    navigations: {\r\n      creation: 'home/users/create',\r\n      edition: (id: string) => `home/users/edit/${id}`,\r\n      list: 'home/users'\r\n    },\r\n    paths: {\r\n      create: 'create',\r\n      edit: 'edit/:id',\r\n      list: 'users'\r\n    }\r\n  }\r\n}","import { AuthorizationService } from '../authorization/authorization.service';\r\nimport { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Router } from '@angular/router';\r\nimport { Routes } from '../../routes';\r\n\r\n@Injectable()\r\nexport class AuthGuard {\r\n\r\n  constructor(\r\n    private readonly authorizationService: AuthorizationService,\r\n    private readonly router: Router) {\r\n  }\r\n\r\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n    return this.getCanActivateResult(false, next);\r\n  }\r\n\r\n  canActivateChild(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n    return this.getCanActivateResult(true, next);\r\n  }\r\n\r\n  private getCanActivateResult(checkForChild: boolean, next: ActivatedRouteSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n    const allowedPermissions = next.data['allowedPermissions'];\r\n    const isAuthorized = this.authorizationService.isAuthorized(allowedPermissions);\r\n\r\n    if (!isAuthorized) {\r\n      if (checkForChild)\r\n        this.authorizationService.resetAllData();\r\n      else\r\n        this.authorizationService.decodeTokenAndSetData();\r\n\r\n      this.router.navigate([Routes.login.navigations.default]);\r\n    }\r\n\r\n    this.authorizationService.decodeTokenAndSetData();\r\n\r\n    return isAuthorized;\r\n  }\r\n}","import { AuthorizationService } from '../authorization/authorization.service';\r\nimport { SignInModel } from '../../interfaces/authentication';\r\nimport { Inject, Injectable, PLATFORM_ID } from \"@angular/core\";\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { environment } from \"../../../environments/environment\";\r\nimport { TokenResponse } from '../../interfaces/identity';\r\nimport { ApiRoutes } from '../../api-routes';\r\nimport { ApiResultEnum } from '../../enums/api-result-enum';\r\n\r\n@Injectable()\r\nexport class AuthenticationService {\r\n\r\n    isLoggedIn$: Observable<boolean>;\r\n\r\n    constructor(\r\n        private readonly authorizationService: AuthorizationService,\r\n        private readonly httpClient: HttpClient,\r\n        @Inject(PLATFORM_ID) private platformId: any) {\r\n    }\r\n\r\n    getAuth(): TokenResponse | null {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            const key = localStorage.getItem(environment.auth_key);\r\n\r\n            if (key) {\r\n                return JSON.parse(key);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    isLoggedIn(): boolean {\r\n        return isPlatformBrowser(this.platformId) && localStorage.getItem(environment.auth_key) != null;\r\n    }\r\n\r\n    // performs the login\r\n    login(authData: SignInModel): Observable<string> {\r\n        const data = {\r\n            UserName: authData.Login,\r\n            Password: authData.Password,\r\n            // required when signing up with username/password\r\n            GrantType: \"password\",\r\n            // space-separated list of scopes for which the token is issued\r\n            Scope: \"offline_access profile email\"\r\n        };\r\n\r\n        return this.httpClient\r\n            .post<TokenResponse>(ApiRoutes.identity.authenticate, data)\r\n            .pipe(\r\n                map(res => {\r\n                    const token = res && res.Token;\r\n\r\n                    if (res.Code == 165) {\r\n                        return ApiResultEnum[ApiResultEnum.NotActive];\r\n                    }\r\n                    else if (res.Code !== 200) {\r\n                        return ApiResultEnum[ApiResultEnum.Error];\r\n                    }\r\n\r\n                    if (token) {\r\n                        // store username and jwt token\r\n                        this.setAuth(res);\r\n                        this.authorizationService.decodeTokenAndSetData();\r\n\r\n                        return ApiResultEnum[ApiResultEnum.OK];\r\n                    }\r\n\r\n                    return \"Error\";\r\n                }),\r\n                catchError(error => {\r\n                    console.log(error);\r\n                    return new Observable<any>(error);\r\n                }));\r\n    }\r\n\r\n    logout() {\r\n        this.setAuth(null);\r\n        this.authorizationService.resetAllData();\r\n\r\n        return true;\r\n    }\r\n\r\n    refreshToken(): Observable<string> {\r\n        const tokenData = JSON.parse(localStorage.getItem(environment.auth_key) || '') as TokenResponse;\r\n\r\n        const data = {\r\n            Token: tokenData.Token,\r\n            RefreshToken: tokenData.RefreshToken\r\n        };\r\n\r\n        return this.httpClient\r\n            .post<TokenResponse>(ApiRoutes.identity.refreshToken, data)\r\n            .pipe(\r\n                map(res => {\r\n                    this.setAuth(res);\r\n                    this.authorizationService.decodeTokenAndSetData();\r\n\r\n                    return ApiResultEnum[ApiResultEnum.OK];\r\n                }),\r\n                catchError(error => {\r\n                    console.log(error);\r\n\r\n                    return new Observable<any>(error);\r\n                }));\r\n    }\r\n\r\n    setAuth(auth: TokenResponse | null): boolean {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            if (auth) {\r\n                localStorage.setItem(environment.auth_key, JSON.stringify(auth));\r\n\r\n                this.isLoggedIn$ = of(true);\r\n            }\r\n            else {\r\n                localStorage.removeItem(environment.auth_key);\r\n\r\n                this.isLoggedIn$ = of(false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthorizationService {\r\n  private static _currentUserId?: string;\r\n  private static _currentUserName?: string;\r\n  private static _currentUserLanguageId?: number;\r\n  private static _currentUserPermissions?: number[];\r\n  private static _currentUserRoleId?: number;\r\n  private static _currentUserRoleName?: string;\r\n  private static _currentUserRoles?: string[];\r\n\r\n  //property let to use static properties.\r\n  AS = AuthorizationService;\r\n\r\n  public static get currentUserId(): string | undefined {\r\n    return this._currentUserId;\r\n  }\r\n\r\n  public static get currentUserName(): string | undefined {\r\n    return this._currentUserName;\r\n  }\r\n\r\n  public static get currentUserRoles(): string[] | undefined {\r\n    return this._currentUserRoles;\r\n  }\r\n\r\n  public static get currentUserLanguageId(): number | undefined {\r\n    return this._currentUserLanguageId;\r\n  }\r\n\r\n  public static get currentUserPermissions(): number[] | undefined {\r\n    return this._currentUserPermissions;\r\n  }\r\n\r\n  public static get currentUserRoleId(): number | undefined {\r\n    return this._currentUserRoleId;\r\n  }\r\n\r\n  public static get currentUserRoleName(): string | undefined {\r\n    return this._currentUserRoleName;\r\n  }\r\n\r\n  constructor(private jwtHelperService: JwtHelperService) {\r\n  }\r\n\r\n  decodeToken() {\r\n    const token = localStorage.getItem(environment.auth_key);\r\n\r\n    return this.jwtHelperService.decodeToken(token || '');\r\n  }\r\n\r\n  decodeTokenAndSetData() {\r\n    const decodedToken = this.decodeToken();\r\n\r\n    if (decodedToken) {\r\n      AuthorizationService._currentUserId = decodedToken['sub'];\r\n      AuthorizationService._currentUserName = decodedToken['given_name'];\r\n      AuthorizationService._currentUserLanguageId = decodedToken['userlanguageid'];\r\n      AuthorizationService._currentUserRoleId = decodedToken['userroleid'];\r\n      AuthorizationService._currentUserRoleName = decodedToken['userrolename'];\r\n      AuthorizationService._currentUserRoles = decodedToken['role'];\r\n      AuthorizationService._currentUserPermissions = [];\r\n\r\n      var currentUserPermissionsTextArray = (decodedToken['permissions'] as string).split(',');\r\n\r\n      currentUserPermissionsTextArray.forEach(item =>\r\n        AuthorizationService._currentUserPermissions?.push(Number(item))\r\n      );\r\n    }\r\n    else {\r\n      this.resetAllData();\r\n    }\r\n  }\r\n\r\n  isAuthorized(allowedPermissions: number[] | undefined): boolean {\r\n    if (allowedPermissions === undefined)\r\n      return false;\r\n    // check if the list of allowed permissions is empty, if empty, authorize the user to access the page\r\n    if (allowedPermissions == null || allowedPermissions.length === 0)\r\n      return true;\r\n\r\n    const decodedToken = this.decodeToken();\r\n    // check if it was decoded successfully, if not the token is not valid, deny access\r\n    if (!decodedToken)\r\n      return false;\r\n    // check if the user roles is in the list of allowed permissions, return true if allowed and false if not allowed\r\n    var permissions: number[] = [];\r\n    var permissionsTextArray = (decodedToken['permissions'] as string).split(',');\r\n\r\n    permissionsTextArray.forEach(item => permissions.push(Number(item)));\r\n\r\n    return allowedPermissions.some(r => permissions.includes(r));\r\n  }\r\n\r\n  resetAllData() {\r\n    AuthorizationService._currentUserId = undefined;\r\n    AuthorizationService._currentUserName = undefined;\r\n    AuthorizationService._currentUserLanguageId = undefined;\r\n    AuthorizationService._currentUserRoleId = undefined;\r\n    AuthorizationService._currentUserRoleName = undefined;\r\n    AuthorizationService._currentUserRoles = undefined;\r\n    AuthorizationService._currentUserPermissions = undefined;\r\n  }\r\n}\r\n","import { Component, Injectable } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { StringBuilder } from \"../../tools/stringBuilder\";\r\nimport { ErrorMessageTypeEnum } from \"../../enums/error-messag-type-enum\";\r\nimport { FormComponent } from \"src/app/components/abstract/forms/form\";\r\n\r\n@Injectable()\r\nexport class ErrorService {\r\n\r\n  private static readonly _idMessagePart = \"ID\";\r\n  private static readonly _maxLengthMessagePart = \"MAX\";\r\n  private static readonly _messageSeparator = \"|\";\r\n  private static readonly _messageInnerSeparator = \":\";\r\n  private static readonly _minLengthMessagePart = \"MIN\";\r\n  private static readonly _typeMessagePart = \"TYPE\";\r\n\r\n  private readonly errorMessage: ErrorMessage;\r\n  private readonly errorMessageBuilder: ErrorMessageBuilder;\r\n\r\n  constructor(private readonly translate: TranslateService) {\r\n    this.errorMessage = new ErrorMessage();\r\n    this.errorMessageBuilder = new ErrorMessageBuilder(translate, this.errorMessage);\r\n  }\r\n\r\n  public getDefaultErrorMessage() {\r\n    return this.translate.instant('General.Error.Global');\r\n  }\r\n\r\n  public getFirstErrorMessageKey(error: any) {\r\n    if (this.isValidErrorObject(error)) {\r\n      const errorObject = error.errors;\r\n      const firstErrorPropertyName = this.getFirstErrorName(errorObject);\r\n\r\n      if (!firstErrorPropertyName)\r\n        return;\r\n\r\n      const firstError: string | string[] = errorObject[firstErrorPropertyName];\r\n\r\n      if (!firstError)\r\n        return;\r\n\r\n      const splitError = this.getSplitError(firstError);\r\n\r\n      return splitError[0];\r\n    }\r\n    else {\r\n      return this.getDefaultErrorMessage();\r\n    }\r\n  }\r\n\r\n  public getFirstTranslatedErrorMessage(error: any) {\r\n\r\n    if (this.isValidErrorObject(error)) {\r\n      const errorObject = error.errors;\r\n      const firstErrorPropertyName = this.getFirstErrorName(errorObject);\r\n\r\n      if (!firstErrorPropertyName)\r\n        return;\r\n\r\n      const firstError: string | string[] = errorObject[firstErrorPropertyName];\r\n\r\n      if (!firstError)\r\n        return;\r\n\r\n      const splitError = this.getSplitError(firstError);\r\n      this.fillErrorMessageBasedOnError(splitError);\r\n\r\n      if (!this.errorMessage.hasRequiredPropertiesAssigned()) {\r\n        return this.getDefaultErrorMessage();\r\n      }\r\n\r\n      this.errorMessageBuilder.build();\r\n\r\n      return this.errorMessageBuilder.getMessage();\r\n    }\r\n    else {\r\n      return this.getDefaultErrorMessage();\r\n    }\r\n  }\r\n\r\n  private fillErrorMessageBasedOnError(error: string[]) {\r\n    for (const message of error) {\r\n      const splitMessage = message.split(ErrorService._messageInnerSeparator);\r\n\r\n      switch (splitMessage[0]) {\r\n        case ErrorService._idMessagePart:\r\n          this.errorMessage.id = splitMessage[1];\r\n          break;\r\n        case ErrorService._maxLengthMessagePart:\r\n          this.errorMessage.maxLength = splitMessage[1];\r\n          break;\r\n        case ErrorService._minLengthMessagePart:\r\n          this.errorMessage.minLength = splitMessage[1];\r\n          break;\r\n        case ErrorService._typeMessagePart:\r\n          this.errorMessage.type = splitMessage[1];\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  private getFirstErrorName(errors: any) {\r\n    return Object.keys(errors)[0];\r\n  }\r\n\r\n  private getSplitError(error: string[] | string) {\r\n    return Array.isArray(error)\r\n      ? error[0].split(ErrorService._messageSeparator)\r\n      : error.split(ErrorService._messageSeparator)\r\n  }\r\n\r\n  private isValidErrorObject(error: any) {\r\n    return error?.errors;\r\n  }\r\n}\r\n\r\nclass ErrorMessage {\r\n  id?: string;\r\n  maxLength?: string;\r\n  minLength?: string;\r\n  type?: string;\r\n\r\n  hasRequiredPropertiesAssigned() {\r\n    return this.id && this.type;\r\n  }\r\n}\r\n\r\nclass ErrorMessageBuilder {\r\n  message: ErrorMessage;\r\n  resultMessageBuilder = new StringBuilder();\r\n  translate: TranslateService;\r\n\r\n  constructor(translate: TranslateService, errorMessage: ErrorMessage) {\r\n    this.message = errorMessage;\r\n    this.translate = translate;\r\n  }\r\n\r\n  append(messagePart: string): ErrorMessageBuilder {\r\n    this.resultMessageBuilder.append(messagePart);\r\n    return this;\r\n  }\r\n\r\n  build() {\r\n    this.clean();\r\n\r\n    this\r\n      .append(this.translate.instant('Messages.TheValueOfTheField'))\r\n      .append(\" \")\r\n      .append(\"'\")\r\n      .withId()\r\n      .append(\"'\")\r\n      .append(\" \")\r\n      .withTypeSpecificMessagePart()\r\n      .append(\".\");\r\n  }\r\n\r\n  private clean() {\r\n    if (this.resultMessageBuilder.length() > 0)\r\n      this.resultMessageBuilder = new StringBuilder();\r\n  }\r\n\r\n  getMessage() {\r\n    return this.resultMessageBuilder.toString();\r\n  }\r\n\r\n  private withId(): ErrorMessageBuilder {\r\n    return this.append(this.translate.instant(this.message.id!));\r\n  }\r\n\r\n  private withTypeSpecificMessagePart(): ErrorMessageBuilder {\r\n\r\n    let typeSpecificMessage = '';\r\n\r\n    switch (this.message.type) {\r\n      case ErrorMessageTypeEnum.Email:\r\n        typeSpecificMessage = this.translate.instant('General.Error.IsNotValidEmail');\r\n        break;\r\n      case ErrorMessageTypeEnum.Empty:\r\n        typeSpecificMessage = this.translate.instant('General.Error.IsEmpty');\r\n        break;\r\n      case ErrorMessageTypeEnum.Length:\r\n        typeSpecificMessage = this.translate.instant('General.Error.HasIncorrectLength', { minLength: this.message.minLength, maxLength: this.message.maxLength });\r\n        break;\r\n      case ErrorMessageTypeEnum.MatchAllowedLetters:\r\n        typeSpecificMessage = this.translate.instant('General.Error.IsNotMatchingAllowedLetters');\r\n        break;\r\n      case ErrorMessageTypeEnum.MatchSmallLetters:\r\n        typeSpecificMessage = this.translate.instant('General.Error.IsNotMatchingSmallLetters');\r\n        break;\r\n    }\r\n\r\n    return this.append(typeSpecificMessage);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { FilterMatchMode } from \"primeng/api\";\r\nimport { Table } from \"primeng/table\";\r\n\r\n@Injectable()\r\nexport class FilterService {\r\n\r\n  constructor(public readonly translate: TranslateService) {\r\n  }\r\n\r\n  public getPlaceholder(field: string): string {\r\n    const capitalizedField = field.replace(/^\\w/, (c) => c.toUpperCase());\r\n    return `${this.translate.instant('General.SearchFor')} ${capitalizedField}`;\r\n  }\r\n\r\n  onClearFilters(dataTable: Table) {\r\n    dataTable.reset();\r\n  }\r\n\r\n  onFilterGlobal(dataTable: Table, filterValue: string) {\r\n    dataTable.filterGlobal(filterValue, FilterMatchMode.CONTAINS);\r\n  }\r\n\r\n  public shouldHideIcon(filterValue: string): boolean {\r\n    let inputWidth = 0;\r\n\r\n    const filterElement = document.getElementById('filter');\r\n    const textContentLengthHelper = document.createElement('span');\r\n\r\n    textContentLengthHelper.style.visibility = 'hidden';\r\n    textContentLengthHelper.style.position = 'absolute';\r\n\r\n    textContentLengthHelper.textContent = filterValue;\r\n\r\n    if (filterElement)\r\n      inputWidth = filterElement.offsetWidth;\r\n\r\n    document.body.appendChild(textContentLengthHelper);\r\n    const textContentWidth = textContentLengthHelper.offsetWidth;\r\n    document.body.removeChild(textContentLengthHelper);\r\n\r\n    return textContentWidth > inputWidth - 30;\r\n  }\r\n}","import { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable()\r\nexport class ApiUrlInterceptor implements HttpInterceptor {\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        const baseAddress = req.url.includes('assets/i18n')\r\n            ? `${location.protocol === 'https:' ? 'https' : 'http'}://${window.location.host}`\r\n            : environment.apiUrl;\r\n\r\n        const apiRequest = req.clone({ url: `${baseAddress}${req.url}` });\r\n\r\n        return next.handle(apiRequest);\r\n    }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { HttpHandler, HttpEvent, HttpInterceptor, HttpRequest, HttpErrorResponse } from \"@angular/common/http\";\r\nimport { AuthenticationService } from \"../authentication/authentication.service\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { catchError, tap } from \"rxjs/operators\";\r\nimport { ApiResultEnum } from \"src/app/enums/api-result-enum\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    isRefreshingToken: boolean;\r\n\r\n    constructor(private readonly injector: Injector) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const authenticationService = this.injector.get(AuthenticationService);\r\n\r\n        const token = (authenticationService.isLoggedIn())\r\n            ? authenticationService.getAuth()!.Token\r\n            : null;\r\n\r\n        if (token) {\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    ApiKey: '5f97f178-1fb8-4a24-a71c-0b145a3709c4'\r\n                }\r\n            });\r\n        }\r\n\r\n        return next.handle(request).pipe(\r\n            catchError((errorResponse: HttpErrorResponse) => {\r\n                if (errorResponse.status === 401 && !this.isRefreshingToken) {\r\n                    this.isRefreshingToken = true;\r\n\r\n                    console.log(\"refreshing token...\");\r\n\r\n                    authenticationService.refreshToken().subscribe(result => {\r\n                        console.log(`token refreshed with result: ${result}`);\r\n\r\n                        if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n                            this.isRefreshingToken = false;\r\n\r\n                            window.location.reload();\r\n\r\n                            return tap(() => ApiResultEnum[ApiResultEnum.OK]);\r\n                        }\r\n                        else {\r\n                            console.error(errorResponse);\r\n\r\n                            return throwError(() => errorResponse.error);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                console.error(errorResponse);\r\n\r\n                return throwError(() => errorResponse.error);\r\n            })\r\n        );\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Menu, MenuArray } from \"src/app/interfaces/ui-models\";\r\nimport { UserPermissionEnum } from \"../../enums/user-permission-enum\";\r\nimport { AuthorizationService } from \"../authorization/authorization.service\";\r\nimport { Routes } from \"../../routes\";\r\nimport { Menus } from \"./menus\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MenuService {\r\n\r\n  private menu = new MenuArray();\r\n\r\n  constructor(private readonly authorizationService: AuthorizationService) {\r\n    this.initializeMenu();\r\n    this.initializeMenuItems();\r\n  }\r\n\r\n  getMenu(): MenuArray {\r\n    return this.menu;\r\n  }\r\n\r\n  private getAdministrationItems() {\r\n    return this.menu.getItemsForLabel(Menus.administration.label);\r\n  }\r\n\r\n  private getFirstMenuItemUserIsAuthorizedFor(): Menu | undefined {\r\n\r\n    let firstMenuUserIsAuthorizedFor: Menu | undefined;\r\n\r\n    for (const menu of this.menu) {\r\n      for (const menuItem of menu.Items || []) {\r\n        if (this.authorizationService.isAuthorized(menuItem.Permissions)) {\r\n          firstMenuUserIsAuthorizedFor = menu;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return firstMenuUserIsAuthorizedFor;\r\n  }\r\n\r\n  private getMainMenuItems() {\r\n    return this.menu.getItemsForLabel(Menus.main.label);\r\n  }\r\n\r\n  private initializeMenu() {\r\n\r\n    //MENU\r\n    this.menu.push({\r\n      Label: Menus.main.label,\r\n      Items: new MenuArray()\r\n    });\r\n\r\n    //ADMINISTRATION\r\n    this.menu.push({\r\n      Label: Menus.administration.label,\r\n      Items: new MenuArray()\r\n    });\r\n  }\r\n\r\n  private initializeMenuItems() {\r\n    const mainMenuItems = this.getMainMenuItems();\r\n\r\n    //CLIENTS\r\n    mainMenuItems?.push(<Menu>{\r\n      Permissions: [\r\n        UserPermissionEnum.Clients_CanList\r\n      ],\r\n      Label: Menus.main.items.clients.label,\r\n      Icon: Menus.main.items.clients.icon,\r\n      RouterLink: [`/${Routes.clients.navigations.list}`]\r\n    });\r\n\r\n    const administrationItems = this.getAdministrationItems();\r\n\r\n    //USERS\r\n    administrationItems?.push(<Menu>{\r\n      Permissions: [\r\n        UserPermissionEnum.Users_CanList\r\n      ],\r\n      Label: Menus.administration.items.users.label,\r\n      Icon: Menus.administration.items.users.icon,\r\n      RouterLink: [`/${Routes.users.navigations.list}`]\r\n    });\r\n\r\n    //USER ROLES\r\n    administrationItems?.push(<Menu>{\r\n      Permissions: [\r\n        UserPermissionEnum.UserRoles_CanList\r\n      ],\r\n      Label: Menus.administration.items.userRoles.label,\r\n      Icon: Menus.administration.items.userRoles.icon,\r\n      RouterLink: [`/${Routes.userRoles.navigations.list}`]\r\n    });\r\n  }\r\n}","export const Menus = {\r\n  administration: {\r\n    label: 'Menu.Administration',\r\n    items: {\r\n      userRoles: {\r\n        label: 'Menu.UserRoles',\r\n        icon: 'fa fa-solid fa-users'\r\n      },\r\n      users: {\r\n        label: 'Menu.Users',\r\n        icon: 'fa fa-solid fa-user'\r\n      }\r\n    }\r\n  },\r\n  main: {\r\n    label: 'Menu.Title',\r\n    items: {\r\n      clients: {\r\n        label: 'Menu.Clients',\r\n        icon: 'fa fa-solid fa-face-smile'\r\n      }\r\n    }\r\n  }\r\n};","import { Injectable } from '@angular/core';\r\nimport { DataBaseOperationTypeMessagePartsForConsole, DatabaseOperationTypeMessagePartForConsole } from '../../tools/database-operation-type';\r\n\r\n@Injectable()\r\nexport class ConsoleMessageService {\r\n  constructor() { }\r\n\r\n  public getConsoleMessageWithResultForEntityAfterCreation(entity: string, result: string) {\r\n    return this.getConsoleMessage(entity, result, DataBaseOperationTypeMessagePartsForConsole.create);\r\n  }\r\n\r\n  public getConsoleMessageWithResultForEntityAfterDeletion(entity: string, result: string) {\r\n    return this.getConsoleMessage(entity, result, DataBaseOperationTypeMessagePartsForConsole.delete);\r\n  }\r\n\r\n  public getConsoleMessageWithResultForEntityAfterUpdate(entity: string, result: string) {\r\n    return this.getConsoleMessage(entity, result, DataBaseOperationTypeMessagePartsForConsole.update);\r\n  }\r\n\r\n  private getConsoleMessage(entity: string, result: string, operation: DatabaseOperationTypeMessagePartForConsole) {\r\n    return `The ${entity} has been ${operation.name} with result: ${result}`;\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Message, MessageService } from 'primeng/api';\r\nimport { MessageType, MessageTypes } from '../../tools/message-type';\r\n\r\n@Injectable()\r\nexport class DialogMessageService {\r\n\r\n  constructor(private readonly messageService: MessageService) {\r\n  }\r\n\r\n  public addError(summary: string) {\r\n    this.addMessage(MessageTypes.error, summary);\r\n  }\r\n\r\n  public addInfo(summary: string) {\r\n    this.addMessage(MessageTypes.info, summary);\r\n  }\r\n\r\n  public addSuccess(summary: string) {\r\n    this.addMessage(MessageTypes.success, summary);\r\n  }\r\n\r\n  public addWarning(summary: string) {\r\n    this.addMessage(MessageTypes.warning, summary);\r\n  }\r\n\r\n  private addMessage(type: MessageType, summary: string) {\r\n    this.messageService.add(<Message>{ severity: type.name, summary: summary, life: type.lifeTime });\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { LazyLoadEvent, SelectItem } from \"primeng/api\";\r\nimport { Observable, catchError, map } from \"rxjs\";\r\nimport { SelectOption } from \"../../interfaces/ui-models\";\r\nimport { ApiRoutes } from \"../../api-routes\";\r\nimport { PngTableColumn } from \"../../interfaces/png\";\r\n\r\n@Injectable()\r\nexport class SelectOptionsService {\r\n\r\n  constructor(\r\n    private readonly httpClient: HttpClient,\r\n    public readonly translate: TranslateService) {\r\n  }\r\n\r\n  getClientTypes(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.clientTypes);\r\n  }\r\n\r\n  getCountries(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.countries);\r\n  }\r\n\r\n  getFieldNamesForObjectHistory(event: LazyLoadEvent, columns: PngTableColumn[], entityId: string, entityTableName: string): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.audits(event, columns, entityId, entityTableName), true);\r\n  }\r\n\r\n  getLanguages(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.languages);\r\n  }\r\n\r\n  getUserRoles(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.userRoles);\r\n  }\r\n\r\n  getYesNoOptions(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.yesNoOptions, true);\r\n  }\r\n\r\n  private getOptions(url: string, insertAllOption: boolean = false): Observable<SelectItem[]> {\r\n    return this.httpClient\r\n      .get<SelectOption[]>(url)\r\n      .pipe(map(result => {\r\n        const options: SelectItem[] = [];\r\n\r\n        if (insertAllOption) {\r\n          options.push({ label: this.translate.instant('General.All'), value: -1 });\r\n        }\r\n\r\n        for (let item of result) {\r\n          options.push({ label: item.Name, value: item.Value });\r\n        }\r\n\r\n        return options;\r\n      }),\r\n        catchError(error => {\r\n          console.log(error);\r\n\r\n          return new Observable<SelectItem[]>(error);\r\n        }));\r\n  }\r\n}","import { TranslateService } from \"@ngx-translate/core\";\r\nimport { AuthorizationService } from \"../services/authorization/authorization.service\";\r\n\r\nexport class AccessControl {\r\n\r\n  hasAccessToButtons: boolean = true;\r\n\r\n  constructor(\r\n    private readonly authorizationService: AuthorizationService,\r\n    private readonly permissions: number[]) {\r\n    this.determineWhetherUserHasAccessToButtons();\r\n  }\r\n\r\n  private determineWhetherUserHasAccessToButtons(): void {\r\n    this.permissions.forEach(permission => {\r\n      this.hasAccessToButtons = this.hasAccessToButtons && this.authorizationService.isAuthorized([permission]);\r\n    });\r\n  }\r\n}","export const DataBaseOperationTypeMessagePartsForConsole = {\r\n  create: <DatabaseOperationTypeMessagePartForConsole>{\r\n    name: \"created\"\r\n  },\r\n  delete: <DatabaseOperationTypeMessagePartForConsole>{\r\n    name: \"deleted\"\r\n  },\r\n  update: <DatabaseOperationTypeMessagePartForConsole>{\r\n    name: \"updated\"\r\n  },\r\n};\r\n\r\nexport interface DatabaseOperationTypeMessagePartForConsole {\r\n  name: string;\r\n}","import { MessageLifeTimeEnum } from \"../enums/message-lifetime-enum\";\r\nimport { MessageTypeEnum } from \"../enums/message-type-enum\";\r\n\r\nexport const MessageTypes = {\r\n  error: <MessageType>{\r\n    name: MessageTypeEnum.Error,\r\n    lifeTime: MessageLifeTimeEnum.Error\r\n  },\r\n  info: <MessageType>{\r\n    name: MessageTypeEnum.Info,\r\n    lifeTime: MessageLifeTimeEnum.Info\r\n  },\r\n  success: <MessageType>{\r\n    name: MessageTypeEnum.Success,\r\n    lifeTime: MessageLifeTimeEnum.Success\r\n  },\r\n  warning: <MessageType>{\r\n    name: MessageTypeEnum.Warning,\r\n    lifeTime: MessageLifeTimeEnum.Warning\r\n  }\r\n};\r\n\r\nexport interface MessageType {\r\n  name: string,\r\n  lifeTime: number;\r\n}","import { PngTableColumn } from '../interfaces/png';\r\nimport { FilterMatchMode, FilterMetadata, LazyLoadEvent, SelectItem } from 'primeng/api';\r\nimport { StringBuilder } from './stringBuilder';\r\nimport { PrimeNgHelper } from './primeNgHelper';\r\nimport { SearchOperatorEnum } from '../enums/search-operator-enum';\r\n\r\nexport class PngTableSearchQueryBuilder {\r\n\r\n    private static DATE_MATCH_MODES = [FilterMatchMode.DATE_IS, FilterMatchMode.DATE_AFTER, FilterMatchMode.DATE_BEFORE, FilterMatchMode.DATE_IS_NOT];\r\n\r\n    resultUriBuilder = new StringBuilder();\r\n\r\n    constructor(\r\n        private readonly event: LazyLoadEvent,\r\n        private readonly columns: PngTableColumn[]) {\r\n    }\r\n\r\n    create() {\r\n        this.buildBaseUri();\r\n        this.addFilters();\r\n        return this.resultUriBuilder.toString();\r\n    }\r\n\r\n    public buildBaseUri() {\r\n        this.event.sortField ??= this.columns[0]?.field;\r\n        this.resultUriBuilder.append(`?sf=${this.event.sortField}&so=${this.event.sortOrder}&pc=${this.event.rows}&sr=${this.event.first}`);\r\n    }\r\n\r\n    private addFilters() {\r\n        let whereBuilder = new StringBuilder();\r\n\r\n        this.addGlobalFilters(whereBuilder);\r\n        this.addLocalFilters(whereBuilder);\r\n\r\n        if (whereBuilder.length() > 1) {\r\n            whereBuilder.removeFromEnd(2);\r\n        }\r\n\r\n        this.resultUriBuilder.append(`&f=${whereBuilder.toString()}`);\r\n    }\r\n\r\n    private addGlobalFilters(whereBuilder: StringBuilder) {\r\n        if (this.event.globalFilter) {\r\n            const globalFilterColumns = this.columns.filter(c => c.applyGlobalFiltering === true);\r\n\r\n            for (const column of globalFilterColumns) {\r\n                const replaceWith = column.replaceWith ?? column.field;\r\n\r\n                let value: string = this.event.globalFilter;\r\n                let matchMode = FilterMatchMode.CONTAINS;\r\n\r\n                if (column.options) {\r\n                    value = column.options.filter(o => o.label?.toLowerCase().includes(value.toLowerCase())).map(o => o.value).join(\", \");\r\n                    matchMode = FilterMatchMode.IN;\r\n                }\r\n\r\n                whereBuilder.append(`${replaceWith}|${matchMode}|${value}|${SearchOperatorEnum.MatchAny}|${column.filterType}||`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private addLocalFilters(whereBuilder: StringBuilder) {\r\n        for (const column of this.columns) {\r\n            const filtersGroup = this.event.filters?.[column.field];\r\n\r\n            if (filtersGroup === undefined)\r\n                continue;\r\n\r\n            const replaceWith = column.replaceWith ?? column.field;\r\n            const filters = filtersGroup as FilterMetadata[];\r\n\r\n            for (const filter of filters) {\r\n                if (filter.value == null)\r\n                    continue;\r\n\r\n                let value = undefined;\r\n\r\n                if (Array.isArray(filter.value)) {\r\n                    const filterValues = filter.value as SelectItem[];\r\n                    const valueBuilder = new StringBuilder();\r\n\r\n                    filterValues.forEach(fv => valueBuilder.append(`${fv.value},`));\r\n\r\n                    if (valueBuilder.length() > 0)\r\n                        valueBuilder.removeFromEnd(1);\r\n\r\n                    value = valueBuilder.toString();\r\n                }\r\n                else {\r\n                    value = filter.value;\r\n                }\r\n\r\n                if (PngTableSearchQueryBuilder.DATE_MATCH_MODES.find(mode => mode == filter.matchMode))\r\n                    value = PrimeNgHelper.getDateFromCalendarAsString(value);\r\n\r\n                whereBuilder.append(`${replaceWith}|${filter.matchMode}|${value}|${filter.operator}|${column.filterType}||`);\r\n            }\r\n        }\r\n    }\r\n}","import { StringBuilder } from \"./stringBuilder\";\r\n\r\nexport class PrimeNgHelper {\r\n\r\n  static getDateFromCalendar(date: string): Date | null {\r\n    if (!isNaN(Date.parse(date))) {\r\n      const parsedDate = new Date(date);\r\n      return new Date(Date.UTC(parsedDate.getFullYear(), parsedDate.getMonth(), parsedDate.getDate()));\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  static getDateFromCalendarAsString(date: Date): string | undefined {\r\n    date = new Date(date);\r\n\r\n    if (!date)\r\n      return;\r\n\r\n    date = new Date(date.setMinutes(date.getMinutes() - date.getTimezoneOffset()));\r\n\r\n    return new StringBuilder(date.getFullYear().toString())\r\n      .append('-')\r\n      .append((date.getMonth() + 1).toLocaleString('pl-PL', { minimumIntegerDigits: 2, useGrouping: false }))\r\n      .append('-')\r\n      .append(date.getDate().toLocaleString('pl-PL', { minimumIntegerDigits: 2, useGrouping: false }))\r\n      .toString();\r\n  }\r\n}","export class RegexPatterns {\r\n  // static emailPattern = '^(([^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@\"]+(\\.[^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@\"]+)*)|(\".+\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$';\r\n  static emailPattern = \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}$\";\r\n  static phoneNumberPattern = '^[+]*[(]{0,1}[0-9\\\\s]{1,4}[)]{0,1}[-\\s\\.[0-9\\\\s]*$';\r\n  static bankAccountPattern = '^[0-9]{26}$';\r\n  static postalCodePattern = /\\d{2}-\\d{3}/;\r\n  static passwordPattern = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,20}$/;\r\n  static passwordOrEmptyPattern = /^$|[0-9a-zA-Z]{8,20}$/;\r\n  static decimalNumber = /^\\d+[\\d\\s]*[,]?[\\d]{0,2}?$/;\r\n  static regonPattern = /^(?:[^\\d]|^)(\\d{9}|\\d{14})(?:[^\\d]|$)/;\r\n  static vehicleRegistrationNumberPattern = /^[A-Z]|[0-9]/;\r\n}","export class StringBuilder {\r\n  private value: string[];\r\n\r\n  constructor(initialValue?: string) {\r\n    this.value = [];\r\n\r\n    if (initialValue)\r\n      this.append(initialValue);\r\n  }\r\n\r\n  append(text: string): StringBuilder {\r\n    this.value.push(text);\r\n\r\n    return this;\r\n  }\r\n\r\n  appendLine(text?: string): StringBuilder {\r\n    return this.append(text ? text : '').append('\\n');\r\n  }\r\n\r\n  removeFromEnd(numberOfChars: number): StringBuilder {\r\n    if (this.value.length == 0) {\r\n      return this;\r\n    }\r\n\r\n    if (numberOfChars >= this.value[this.value.length - 1].length) {\r\n      this.value = [];\r\n    }\r\n    else {\r\n      this.value[this.value.length - 1] = this.value[this.value.length - 1]?.slice(0, -numberOfChars);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  charAtEquals(index: number, char: string): boolean {\r\n    if (index < 0 || index >= this.value.length) {\r\n      return false;\r\n    }\r\n\r\n    return this.value[index] === char;\r\n  }\r\n\r\n  length(): number {\r\n    return this.value.length > 0 ? this.value[this.value.length - 1].length : 0;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.value.join('');\r\n  }\r\n}","import { FormGroup } from '@angular/forms';\r\n\r\nexport class FormValidator {\r\n  form: FormGroup;\r\n  constructor(currentForm: FormGroup) {\r\n    this.form = currentForm;\r\n  }\r\n  // retrieve a FormControl\r\n  getFormControl(name: string) {\r\n    return this.form.get(name);\r\n  }\r\n  // returns TRUE if the FormControl is valid\r\n  isValid(name: string) {\r\n    var e = this.getFormControl(name);\r\n    return e && e.valid;\r\n  }\r\n  // returns TRUE if the FormControl has been changed\r\n  isChanged(name: string) {\r\n    var e = this.getFormControl(name);\r\n    return e && (e.dirty || e.touched);\r\n  }\r\n  // returns TRUE if the FormControl is invalid after user changes\r\n  hasError(name: string) {\r\n    var e = this.getFormControl(name);\r\n    return e && (e.dirty || e.touched) && !e.valid;\r\n  }\r\n\r\n  updateAllControlsToTouched() {\r\n    if (this.form) {\r\n      Object.keys(this.form.controls).forEach(key => {\r\n        this.form.get(key)!.markAsTouched();\r\n      });\r\n    }\r\n  }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiUrl: 'http://localhost:61869/api/',\r\n  auth_key: \"Equiprent\"\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","/// <reference types=\"@angular/localize\" />\r\n\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"names":["PngTableSearchQueryBuilder","ApiRoutes","audit","getObjectHistory","event","columns","entityId","entityTableName","create","getFieldNames","client","delete","clientId","getAll","getById","post","put","clientRepresentative","clientRepresentativeId","identity","authenticate","refreshToken","selectOptions","audits","clientTypes","countries","languages","userRoles","yesNoOptions","user","changeLanguage","changeRole","changeTheme","userId","getLanguage","getTheme","userRole","userRoleId","getUserRolePermissionsForCreation","RouterModule","NgModule","AppLayoutComponent","UserListComponent","UserRoleListComponent","LoginComponent","AuthGuard","UserPermissionEnum","UserDetailsComponent","UserCreationComponent","LocationStrategy","PathLocationStrategy","Routes","UserRoleCreationComponent","UserRoleDetailsComponent","ClientListComponent","ClientCreationComponent","ClientDetailsComponent","AppRoutingModule","imports","forRoot","path","home","paths","default","component","data","breadcrumb","breadcrumbs","children","clients","list","canActivate","allowedPermissions","Clients_CanList","Clients_CanModify","creation","edit","edition","users","Users_CanList","Users_CanModify","UserRoles_CanList","UserRoles_CanModify","login","redirectTo","pathMatch","scrollPositionRestoration","anchorScrolling","onSameUrlNavigation","useHash","providers","provide","useClass","exports","Component","HostListener","Title","TranslateService","PrimeNGConfig","AuthenticationService","AuthorizationService","AppComponent","constructor","primengConfig","translate","authenticationService","authorizationService","titleService","setDefaultLang","isUserLoggedIn","isLoggedIn","decodeTokenAndSetData","onKeydownHandler","preventDefault","ngOnInit","ripple","setTitle","args","selector","template","CommonModule","registerLocaleData","localePl","NgxMaskModule","TranslateLoader","TranslateModule","TranslateHttpLoader","HttpClient","HttpClientModule","HTTP_INTERCEPTORS","BrowserModule","JwtModule","AppLayoutModule","environment","MenuService","AuthInterceptor","FormsModule","ReactiveFormsModule","ConsoleMessageService","DialogMessageService","ErrorService","FilterService","SelectOptionsService","AddressComponent","AuditListForEntityComponent","ClientRepresentativeCreationComponent","ClientRepresentativeDetailsComponent","ClientRepresentativeListComponent","CompanyClientAddressComponent","DeletionDialogComponent","LoginResetPasswordComponent","NameInLanguagesComponent","PrivateClientAddressComponent","PrivateClientComponent","UserRolePermissionsComponent","ApiUrlInterceptor","BreadcrumbModule","ButtonModule","CheckboxModule","ConfirmDialogModule","ConfirmationService","DialogService","DropdownModule","DynamicDialogModule","MessageModule","MessagesModule","MessageService","MultiSelectModule","PanelMenuModule","PasswordModule","SplitButtonModule","TableModule","TabViewModule","ToastModule","TreeTableModule","options","AppModule","declarations","config","tokenGetter","jwtTokenGetter","loader","useFactory","HttpLoaderFactory","deps","multi","bootstrap","localStorage","getItem","auth_key","http","AccessControl","ApiResultEnum","AccessControlComponent","confirmationService","consoleMessageService","deletionKey","deletionLinkInitializer","dialogMessageService","entityName","errorService","httpClient","onAfterDeletionSuccessOperationsHandler","router","userPermissions","accessControl","hasAccessToButtons","onEditLabelId","onDelete","entity","confirm","key","message","instant","deletedEntityInstanceIdentificationInitializer","accept","deleteEntity","Id","subscribe","next","result","OK","addSuccess","addError","getErrorMessageForResult","getDefaultErrorMessage","console","log","getConsoleMessageWithResultForEntityAfterDeletion","error","getFirstTranslatedErrorMessage","Object","keys","includes","apiErrorKey","Number","getApiResultKeyByValue","toString","undefined","value","filter","length","FormComponent","AccessControlFormComponent","activatedRoute","formBuilder","mode","submitionLink","afterSubmitionNavigationLink","snapshot","params","deletionLink","isDisabled","isExecuting","updateForm","obj","setAccess","form","disabled","formValidator","updateAllControlsToTouched","onAfterDeletionSuccessNavigateUsingLinkHandler","navigate","enable","disable","AccessControlOpenableAsDialogForm","openedAsDialogConfig","openedAsDialogRef","onAfterDeletionSuccessNavigateUsingLink","onAfterSubmitSuccessNavigateUsingLink","onBackNavigateUsingLink","_dialogConfigData","getOpenedAsDialogData","getEntityId","onBack","close","isOfTypeT","Directive","Input","SimpleFormComponent","FormBuilder","Validators","DynamicRequirementFormComponent","updateFormAfterInit","requiredFields","forEach","fieldName","requiredField","get","setValidators","required","FormModeEnum","PostAction","PutAction","FormSubmitionActionFactory","getFormSubmitionAction","Creation","Edition","getConsoleMessageWithResultForEntityAfterCreation","execute","formComponent","beforeSubmitionCustomOperationsHandler","getConsoleMessageWithResultForEntityAfterUpdate","FormValidator","shouldActionsBeDisabled","invalid","_formValidator","validator","createForm","formFieldGroup","group","onSubmit","onSubmitAction","onAfterSubmitionSuccessNavigateUsingLinkHandler","successMessageTag","getConsoleMessage","afterSubmitionCustomOperationsHandler","firstTranslatedErrorMessage","requestValidationByDatabaseErrorMessage","getFirstErrorMessageKey","patchValue","OpenableAsDialogForm","FormGroup","_form","reloadForm","selectOptionsService","ApartmentNumber","City","CountryId","Email","PhoneNumber","PostalCode","StreetName","StreetNumber","populateDropdowns","entityAddress","Country","getCountries","NationalCompanyId","clientAddress","NationalId","NationalCitizenId","PngTable","concatMap","filterService","fieldNamesForObjectHistory","getFieldNamesForObjectHistory","set","setFieldNamesForObjectHistory","objectHistory","setObjectHistory","table","field","header","width","applyGlobalFiltering","loadAuditsLazy","tempLazyLoadEvent","_dataPopulator","pipe","cols","fieldNameOptions","setOptionsForColumn","totalRecords","TotalRowsCount","List","ViewChild","Router","ClientTypeEnum","addressFormFields","navigations","prepareClientCreationModel","ClientTypeId","Name","addressForm","companyClientAddressForm","privateClientAddressForm","privateClientForm","getClientNationalId","Private","Company","getClientTypes","Addresses","FirstName","LastName","TypeId","ActivatedRoute","prepareClientDetailsModel","getEntityInstanceName","loadClient","ngAfterViewInit","activeTab","switchActiveTab","tabIndex","FilterTypeEnum","selectOptionService","multiSelects","getClientTypeMultiSelectData","setClientTypeMultiSelectData","getClients","setClients","filterType","Text","replaceWith","loadClientsLazy","onCreate","onEdit","sortField","clientTypeOptions","clientTypeColumn","find","c","queryParams","token","add","severity","summary","detail","LanguageCodeEnum","app","Login","Password","getLanguages","languageIdFromStorage","languageId","setLanguage","NotActive","getLanguageCodeById","id","Pl","valueOf","En","lang","use","EventEmitter","Output","FormControl","nameInLanguages","isValid","emit","getNameInLanguages","l","push","LanguageId","controls","label","onChangeInput","isFormValid","valid","d","DynamicDialogConfig","DynamicDialogRef","clientRepresentatives","prepareClientRepresentativeCreationModel","getClientRepresentativeClientId","ClientId","clientRepresentativeAddress","Address","height","modal","style","margin","padding","StringBuilder","ClientRepresentatives_CanModify","prepareClientRepresentativeDetailsModel","loadClientRepresentative","append","dialogService","getClientRepresentatives","setClientRepresentatives","ngOnDestroy","clientRepresentativeCreationDialog","loadClientRepresentativesLazy","openClientRepresentativeDialog","clientRepresentativeDialogConfigData","open","OPEN_AS_DIALOG_SETTINGS","onClose","UserRolePermissionsOnCreationFiller","UserRolePermissionsOnEditionFiller","UserRolePermissionsFillerFactory","makeFiller","formMode","source","destinations","filler","Error","name","Icons","LIST_ICON_NAME","MODIFY_ICON_NAME","UserRolePermissionsFiller","getIconStyleClassNameForPermission","permission","endsWith","UserPermissionNode","createChildNode","icon","linkedPermissionIds","LinkedPermissionsIds","createParentNode","permissionsGroup","fill","permissionsGroupChildren","Permissions","allItems","isSelected","IsSelected","expanded","partialSelected","every","some","updateUserRolePermissions","updateUserRolePermissionsSelected","permissionNode","hasChildren","childPermissionNode","selectedItems","tryPush","hasLinkedPermissions","UserRoleCreationModel","prepareUserRoleCreationModel","groupedUserPermissions","onIsNameInLanguagesValid","isNameInLanguagesValid","NameInLanguages","permissionsSubmitted","userRolePermissions","getPermissionsSubmitted","doesPermissionExistWithinSelected","PermissionsSelected","SelectedUserPermissionNodeArray","UserRoleDetailsModel","prepareUserRoleDetailsModel","loadUserRole","getUserRoleMultiSelectData","setUserRoleMultiSelectData","getUserRoles","setUserRoles","Numeric","loadUserRolesLazy","userRoleOptions","userRoleColumn","userRolePermissionColumns","userPermissionNodes","selectedUserPermissionNodes","onPermissionSelected","linkedPermissionId","isPermissionAlreadySelected","p","permissionToBeSelected","getPermissionNodeToBeSelected","findPermissionById","idToFind","nodeChild","permissionId","userPermissionGroup","RegexPatterns","prepareUserCreationModel","pattern","emailPattern","IsActive","passwordPattern","UserRoleId","PrimeNgHelper","prepareUserDetailsModel","CreatedOn","loadUser","isPasswordFieldFilled","getDateFromCalendarAsString","Date","getUsers","setUsers","loadUsersLazy","ErrorMessageTypeEnum","MessageLifeTimeEnum","MessageTypeEnum","SearchOperatorEnum","NameInLanguage","NameInLanguagesBase","columnName","column","PngTableColumn","PngTreeColumn","Menu","MenuArray","Array","getItemsForLabel","m","Label","Items","PermissionGroupItemModel","PermissionItemModel","item","LayoutService","AppFooterComponent","layoutService","isDarkModeThemeSelectedFromStorage","isDarkModeThemeSelected","Boolean","currentUserId","changeUserTheme","setItem","model","theme","colorScheme","themeLink","document","getElementById","newHref","getAttribute","replace","replaceThemeLink","onConfigUpdate","href","onComplete","cloneLinkElement","cloneNode","setAttribute","parentNode","insertBefore","nextSibling","addEventListener","remove","Renderer2","NavigationEnd","AppSidebarComponent","AppTopBarComponent","renderer","overlayMenuOpenSubscription","overlayOpen$","menuOutsideClickListener","listen","isOutsideClicked","appSidebar","el","nativeElement","isSameNode","target","contains","appTopbar","menuButton","hideMenu","profileMenuOutsideClickListener","menu","topbarMenuButton","hideProfileMenu","state","staticMenuMobileActive","blockBodyScroll","events","body","classList","className","overlayMenuActive","menuHoverActive","unblockBodyScroll","profileSidebarVisible","RegExp","split","join","containerClass","menuMode","staticMenuDesktopInactive","inputStyle","unsubscribe","BrowserAnimationsModule","InputTextModule","SidebarModule","BadgeModule","RadioButtonModule","InputSwitchModule","RippleModule","AppMenuComponent","AppMenuitemComponent","AppConfigModule","menuService","buildMenu","getMenu","appendMenu","allMenuPermissions","menuItem","isAuthorized","menuItems","Icon","routerLink","RouterLink","items","appendMenuItem","menuItemLabel","permissions","x","concat","Injectable","Subject","menuSource","asObservable","resetSource","onMenuStateChange","reset","providedIn","ChangeDetectorRef","HostBinding","animate","transition","trigger","cd","menuSourceSubscription","menuSource$","Promise","resolve","then","routeEvent","active","startsWith","menuResetSubscription","resetSource$","updateActiveStateFromRoute","parentKey","index","String","activeRoute","isActive","matrixParams","fragment","itemClick","command","originalEvent","submenuAnimation","root","activeClass","type","animations","ElementRef","Scroll","url","updateWithLanguageOnInit","setTheme","withDarkMode","createBreadcrumbs","route","urlBuilder","child","routeURL","map","segment","initializeLayout","appMenu","initializeUserMenu","userMenuItems","onLanguageChange","logout","updateWithLanguageOnLanguageChange","updateBreadcrumbItemsWithLanguage","breadcrumbItems","breadcrumbItem","userLanguageId","currentUserLanguageId","language","translation","setTranslation","AppConfigComponent","visible","configSidebarVisible","_val","scale","onConfigButtonClick","showConfigSidebar","decrementScale","applyScale","incrementScale","documentElement","fontSize","configUpdate","overlayOpen","onMenuToggle","isOverlay","isDesktop","showProfileSidebar","window","innerWidth","isMobile","tabs","general","representatives","getCanActivateResult","canActivateChild","checkForChild","resetAllData","Inject","PLATFORM_ID","isPlatformBrowser","Observable","of","catchError","platformId","getAuth","JSON","parse","authData","UserName","GrantType","Scope","res","Token","Code","setAuth","tokenData","RefreshToken","auth","stringify","isLoggedIn$","removeItem","JwtHelperService","jwtHelperService","AuthorizationService_1","_currentUserId","currentUserName","_currentUserName","currentUserRoles","_currentUserRoles","_currentUserLanguageId","currentUserPermissions","_currentUserPermissions","currentUserRoleId","_currentUserRoleId","currentUserRoleName","_currentUserRoleName","decodeToken","decodedToken","currentUserPermissionsTextArray","permissionsTextArray","r","errorMessage","ErrorMessage","errorMessageBuilder","ErrorMessageBuilder","isValidErrorObject","errorObject","errors","firstErrorPropertyName","getFirstErrorName","firstError","splitError","getSplitError","fillErrorMessageBasedOnError","hasRequiredPropertiesAssigned","build","getMessage","splitMessage","ErrorService_1","_messageInnerSeparator","_idMessagePart","_maxLengthMessagePart","maxLength","_minLengthMessagePart","minLength","_typeMessagePart","isArray","_messageSeparator","messagePart","resultMessageBuilder","clean","withId","withTypeSpecificMessagePart","typeSpecificMessage","Empty","Length","MatchAllowedLetters","MatchSmallLetters","FilterMatchMode","getPlaceholder","capitalizedField","toUpperCase","onClearFilters","dataTable","onFilterGlobal","filterValue","filterGlobal","CONTAINS","shouldHideIcon","inputWidth","filterElement","textContentLengthHelper","createElement","visibility","position","textContent","offsetWidth","appendChild","textContentWidth","removeChild","intercept","req","baseAddress","location","protocol","host","apiUrl","apiRequest","clone","handle","Injector","throwError","tap","injector","request","setHeaders","Authorization","ApiKey","errorResponse","status","isRefreshingToken","reload","Menus","initializeMenu","initializeMenuItems","getAdministrationItems","administration","getFirstMenuItemUserIsAuthorizedFor","firstMenuUserIsAuthorizedFor","getMainMenuItems","main","mainMenuItems","administrationItems","DataBaseOperationTypeMessagePartsForConsole","update","operation","MessageTypes","messageService","addMessage","addInfo","info","success","addWarning","warning","life","lifeTime","getOptions","getYesNoOptions","insertAllOption","Value","determineWhetherUserHasAccessToButtons","Info","Success","Warning","buildBaseUri","addFilters","resultUriBuilder","sortOrder","rows","first","whereBuilder","addGlobalFilters","addLocalFilters","removeFromEnd","globalFilter","globalFilterColumns","matchMode","o","toLowerCase","IN","MatchAny","filtersGroup","filters","filterValues","valueBuilder","fv","DATE_MATCH_MODES","operator","DATE_IS","DATE_AFTER","DATE_BEFORE","DATE_IS_NOT","getDateFromCalendar","date","isNaN","parsedDate","UTC","getFullYear","getMonth","getDate","setMinutes","getMinutes","getTimezoneOffset","toLocaleString","minimumIntegerDigits","useGrouping","initialValue","text","appendLine","numberOfChars","slice","charAtEquals","char","currentForm","getFormControl","e","isChanged","dirty","touched","hasError","markAsTouched","production","enableProdMode","platformBrowserDynamic","bootstrapModule","catch","err"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}
{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/components/abstract/access-controls/access-control.ts","./src/app/components/abstract/forms/access-control-form.ts","./src/app/components/abstract/forms/access-control-openable-as-dialog-form.ts","./src/app/components/abstract/forms/dynamic-requirement-form.ts","./src/app/components/abstract/forms/form-factories/form-submition-action-factory.ts","./src/app/components/abstract/forms/form-factories/post-action.ts","./src/app/components/abstract/forms/form-factories/put-action.ts","./src/app/components/abstract/forms/form.ts","./src/app/components/abstract/forms/openable-as-dialog-form.ts","./src/app/components/abstract/forms/simple-form.ts","./src/app/components/addresses/address/address.component.ts","./src/app/components/addresses/address/address.constants.ts","./src/app/components/addresses/company-client-address/company-client-address.component.ts","./src/app/components/addresses/company-client-address/company-client-address.constants.ts","./src/app/components/addresses/manufacturer-address/manufacturer-address.component.ts","./src/app/components/addresses/manufacturer-address/manufacturer-address.constants.ts","./src/app/components/addresses/private-client-address/private-client-address.component.ts","./src/app/components/addresses/private-client-address/private-client-address.constants.ts","./src/app/components/audits/audit-list-for-entity/audit-list-for-entity.component.ts","./src/app/components/clients/create/client-create.component.ts","./src/app/components/clients/create/client-create.constants.ts","./src/app/components/clients/details/client-details.component.ts","./src/app/components/clients/details/client-details.constants.ts","./src/app/components/clients/list/client-list.component.ts","./src/app/components/clients/private-client/private-client.component.ts","./src/app/components/clients/private-client/private-client.constants.ts","./src/app/components/dialogs/deletion/deletion-dialog.component.ts","./src/app/components/equipments/create/equipment-create.component.ts","./src/app/components/equipments/create/equipment.constants.ts","./src/app/components/equipments/details/equipment-details.component.ts","./src/app/components/equipments/details/equipment-details.constants.ts","./src/app/components/equipments/list/equipment-list.component.ts","./src/app/components/equipments/photos/equipment-photos.component.ts","./src/app/components/equipments/photos/uploaders/equipment-photo-on-creation-uploader.ts","./src/app/components/equipments/photos/uploaders/equipment-photo-on-edition-uploader.ts","./src/app/components/equipments/photos/uploaders/equipment-photo-uploader-factory.ts","./src/app/components/equipments/photos/uploaders/equipment-photo-uploader.ts","./src/app/components/login/login/login.component.ts","./src/app/components/login/login/login.constants.ts","./src/app/components/login/reset-password/login-reset-password.component.ts","./src/app/components/manufacturers/create/manufacturer-create.component.ts","./src/app/components/manufacturers/create/manufacturer-create.constants.ts","./src/app/components/manufacturers/details/manufacturer-details.component.ts","./src/app/components/manufacturers/details/manufacturer-details.constants.ts","./src/app/components/manufacturers/list/manufacturer-list.component.ts","./src/app/components/name-in-languages/name-in-languages.component.ts","./src/app/components/representatives/client-representatives/create/client-representative-create.component.ts","./src/app/components/representatives/client-representatives/details/client-representative-details.component.ts","./src/app/components/representatives/client-representatives/list/client-representative-list.component.ts","./src/app/components/user-roles/create/user-role-create.component.ts","./src/app/components/user-roles/details/user-role-details.component.ts","./src/app/components/user-roles/list/user-role-list.component.ts","./src/app/components/user-roles/permissions/fillers/user-role-permissions-filler-factory.ts","./src/app/components/user-roles/permissions/fillers/user-role-permissions-filler.ts","./src/app/components/user-roles/permissions/fillers/user-role-permissions-on-creation-filler.ts","./src/app/components/user-roles/permissions/fillers/user-role-permissions-on-edition-filler.ts","./src/app/components/user-roles/permissions/models/user-permission-node.ts","./src/app/components/user-roles/permissions/user-role-permissions.component.ts","./src/app/components/users/create/user-create.component.ts","./src/app/components/users/details/user-details.component.ts","./src/app/components/users/list/user-list.component.ts","./src/app/components/users/profile/user-profile.component.ts","./src/app/constants/api-routes.constants.ts","./src/app/constants/assets.constants.ts","./src/app/constants/icons.constants.ts","./src/app/constants/local-storage.constants.ts","./src/app/constants/routes.constants.ts","./src/app/enums/api-result.enum.ts","./src/app/enums/client-type.enum.ts","./src/app/enums/error-messag-type.enum.ts","./src/app/enums/filter-type.enum.ts","./src/app/enums/form-mode.enum.ts","./src/app/enums/language-code.enum.ts","./src/app/enums/message-lifetime.enum.ts","./src/app/enums/message-type.enum.ts","./src/app/enums/search-operator.enum.ts","./src/app/enums/user-permission.enum.ts","./src/app/interfaces/name-in-language.ts","./src/app/interfaces/png.ts","./src/app/interfaces/ui-models.ts","./src/app/interfaces/user-permission.ts","./src/app/interfaces/user-role.ts","./src/app/layout/app.footer.component.ts","./src/app/layout/app.layout.component.ts","./src/app/layout/app.layout.module.ts","./src/app/layout/app.menu.component.ts","./src/app/layout/app.menu.service.ts","./src/app/layout/app.menuitem.component.ts","./src/app/layout/app.sidebar.component.ts","./src/app/layout/app.topbar.component.ts","./src/app/layout/config/app.config.component.ts","./src/app/layout/config/config.module.ts","./src/app/layout/services/app.layout.service.ts","./src/app/layout/services/menu.service.ts","./src/app/layout/services/menus.ts","./src/app/services/assets/asset.service.ts","./src/app/services/auth-guard/auth-guard.service.ts","./src/app/services/authentication/authentication.service.ts","./src/app/services/authorization/authorization.service.ts","./src/app/services/errors/error.service.ts","./src/app/services/files/file.service.ts","./src/app/services/filters/filter.service.ts","./src/app/services/images/image.service.ts","./src/app/services/interceptors/api-url-interceptor.ts","./src/app/services/interceptors/auth-interceptor.ts","./src/app/services/messages/console-message.service.ts","./src/app/services/messages/dialog-message.service.ts","./src/app/services/select-options/select-options.service.ts","./src/app/tools/access-control.ts","./src/app/tools/database-operation-type.ts","./src/app/tools/message-type.ts","./src/app/tools/png-table-search-query-builder.ts","./src/app/tools/primeNgHelper.ts","./src/app/tools/regexPatterns.ts","./src/app/tools/stringBuilder.ts","./src/app/ui-controls/form-validator.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Data, RouterModule } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppLayoutComponent } from './layout/app.layout.component';\r\nimport { UserListComponent } from './components/users/list/user-list.component';\r\nimport { UserRoleListComponent } from './components/user-roles/list/user-role-list.component';\r\nimport { LoginComponent } from './components/login/login/login.component';\r\nimport { AuthGuard } from './services/auth-guard/auth-guard.service';\r\nimport { UserPermissionEnum } from './enums/user-permission.enum';\r\nimport { UserDetailsComponent } from './components/users/details/user-details.component';\r\nimport { UserCreationComponent } from './components/users/create/user-create.component';\r\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\r\nimport { Routes } from './constants/routes.constants';\r\nimport { UserRoleCreationComponent } from './components/user-roles/create/user-role-create.component';\r\nimport { UserRoleDetailsComponent } from './components/user-roles/details/user-role-details.component';\r\nimport { ClientListComponent } from './components/clients/list/client-list.component';\r\nimport { ClientCreationComponent } from './components/clients/create/client-create.component';\r\nimport { ClientDetailsComponent } from './components/clients/details/client-details.component';\r\nimport { ManufacturerListComponent } from './components/manufacturers/list/manufacturer-list.component';\r\nimport { ManufacturerCreationComponent } from './components/manufacturers/create/manufacturer-create.component';\r\nimport { ManufacturerDetailsComponent } from './components/manufacturers/details/manufacturer-details.component';\r\nimport { EquipmentListComponent } from './components/equipments/list/equipment-list.component';\r\nimport { EquipmentCreationComponent } from './components/equipments/create/equipment-create.component';\r\nimport { EquipmentDetailsComponent } from './components/equipments/details/equipment-details.component';\r\nimport { UserProfileComponent } from './components/users/profile/user-profile.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forRoot([\r\n            {\r\n                path: Routes.home.paths.default, component: AppLayoutComponent,\r\n                data: {\r\n                    breadcrumb: Routes.home.breadcrumbs.default\r\n                },\r\n                children: [\r\n                    {\r\n                        path: Routes.users.paths.profile,\r\n                        component: UserProfileComponent,\r\n                        canActivate: [AuthGuard],\r\n                        data: {\r\n                            allowedPermissions: [UserPermissionEnum.ForAll],\r\n                            breadcrumb: Routes.users.breadcrumbs.profile\r\n                        }\r\n                    },\r\n                    {\r\n                        path: Routes.clients.paths.list,\r\n                        canActivate: [AuthGuard],\r\n                        data: <Data>{\r\n                            allowedPermissions: [UserPermissionEnum.Clients_CanList],\r\n                            breadcrumb: Routes.clients.breadcrumbs.list\r\n                        },\r\n                        children: [\r\n                            {\r\n                                path: '',\r\n                                component: ClientListComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Clients_CanList],\r\n                                    breadcrumb: null\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.clients.paths.create,\r\n                                component: ClientCreationComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Clients_CanModify],\r\n                                    breadcrumb: Routes.clients.breadcrumbs.creation\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.clients.paths.edit,\r\n                                component: ClientDetailsComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Clients_CanModify],\r\n                                    breadcrumb: Routes.clients.breadcrumbs.edition\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        path: Routes.equipments.paths.list,\r\n                        canActivate: [AuthGuard],\r\n                        data: <Data>{\r\n                            allowedPermissions: [UserPermissionEnum.Equipments_CanList],\r\n                            breadcrumb: Routes.equipments.breadcrumbs.list\r\n                        },\r\n                        children: [\r\n                            {\r\n                                path: '',\r\n                                component: EquipmentListComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Equipments_CanList],\r\n                                    breadcrumb: null\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.equipments.paths.create,\r\n                                component: EquipmentCreationComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Equipments_CanModify],\r\n                                    breadcrumb: Routes.equipments.breadcrumbs.creation\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.equipments.paths.edit,\r\n                                component: EquipmentDetailsComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Equipments_CanModify],\r\n                                    breadcrumb: Routes.equipments.breadcrumbs.edition\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        path: Routes.manufacturers.paths.list,\r\n                        canActivate: [AuthGuard],\r\n                        data: <Data>{\r\n                            allowedPermissions: [UserPermissionEnum.Manufacturers_CanList],\r\n                            breadcrumb: Routes.manufacturers.breadcrumbs.list\r\n                        },\r\n                        children: [\r\n                            {\r\n                                path: '',\r\n                                component: ManufacturerListComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Manufacturers_CanList],\r\n                                    breadcrumb: null\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.manufacturers.paths.create,\r\n                                component: ManufacturerCreationComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Manufacturers_CanModify],\r\n                                    breadcrumb: Routes.manufacturers.breadcrumbs.creation\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.manufacturers.paths.edit,\r\n                                component: ManufacturerDetailsComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Manufacturers_CanModify],\r\n                                    breadcrumb: Routes.manufacturers.breadcrumbs.edition\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        path: Routes.users.paths.list,\r\n                        canActivate: [AuthGuard],\r\n                        data: <Data>{\r\n                            allowedPermissions: [UserPermissionEnum.Users_CanList],\r\n                            breadcrumb: Routes.users.breadcrumbs.list\r\n                        },\r\n                        children: [\r\n                            {\r\n                                path: '',\r\n                                component: UserListComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Users_CanList],\r\n                                    breadcrumb: null\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.users.paths.create,\r\n                                component: UserCreationComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Users_CanModify],\r\n                                    breadcrumb: Routes.users.breadcrumbs.creation\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.users.paths.edit,\r\n                                component: UserDetailsComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.Users_CanList],\r\n                                    breadcrumb: Routes.users.breadcrumbs.edition\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        path: Routes.userRoles.paths.list,\r\n                        canActivate: [AuthGuard],\r\n                        data: <Data>{\r\n                            allowedPermissions: [UserPermissionEnum.UserRoles_CanList],\r\n                            breadcrumb: Routes.userRoles.breadcrumbs.list\r\n                        },\r\n                        children: [\r\n                            {\r\n                                path: '',\r\n                                component: UserRoleListComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.UserRoles_CanList],\r\n                                    breadcrumb: null\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.userRoles.paths.create,\r\n                                component: UserRoleCreationComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.UserRoles_CanModify],\r\n                                    breadcrumb: Routes.userRoles.breadcrumbs.creation\r\n                                }\r\n                            },\r\n                            {\r\n                                path: Routes.userRoles.paths.edit,\r\n                                component: UserRoleDetailsComponent,\r\n                                canActivate: [AuthGuard],\r\n                                data: <Data>{\r\n                                    allowedPermissions: [UserPermissionEnum.UserRoles_CanList],\r\n                                    breadcrumb: Routes.userRoles.breadcrumbs.edition\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                path: Routes.login.paths.default,\r\n                component: LoginComponent,\r\n                data: {\r\n                    breadcrumb: null\r\n                }\r\n            },\r\n            {\r\n                path: '**',\r\n                redirectTo: Routes.home.paths.default\r\n            },\r\n            {\r\n                path: '',\r\n                redirectTo: Routes.home.paths.default,\r\n                pathMatch: 'full'\r\n            },\r\n        ], { scrollPositionRestoration: 'enabled', anchorScrolling: 'enabled', onSameUrlNavigation: 'reload', useHash: false })\r\n    ],\r\n    providers: [\r\n        {\r\n            provide: LocationStrategy, useClass: PathLocationStrategy\r\n        }\r\n    ],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit, HostListener } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { PrimeNGConfig } from 'primeng/api';\r\nimport { AuthenticationService } from './services/authentication/authentication.service';\r\nimport { AuthorizationService } from './services/authorization/authorization.service';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n    public isUserLoggedIn: boolean;\r\n\r\n    constructor(private primengConfig: PrimeNGConfig,\r\n        private translate: TranslateService,\r\n        private authenticationService: AuthenticationService,\r\n        private authorizationService: AuthorizationService,\r\n        private titleService: Title) {\r\n        this.translate.setDefaultLang('pl');\r\n        this.isUserLoggedIn = this.authenticationService.isLoggedIn();\r\n        this.authorizationService.decodeTokenAndSetData();\r\n    }\r\n\r\n    @HostListener('document:keydown.enter', ['$event']) onKeydownHandler(event: KeyboardEvent) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.primengConfig.ripple = true;\r\n        this.titleService.setTitle(\"Equiprent\");\r\n    }\r\n}\r\n","//Angular\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule, LocationStrategy, PathLocationStrategy } from '@angular/common';\r\nimport { registerLocaleData } from '@angular/common';\r\nimport localePl from '@angular/common/locales/pl';\r\nimport { NgxMaskModule, IConfig } from 'ngx-mask';\r\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { HttpClient, HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { JwtModule } from '@auth0/angular-jwt';\r\n\r\n//Application\r\nimport { AppComponent } from './app.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppLayoutModule } from './layout/app.layout.module';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n//Services\r\nimport { AssetService } from './services/assets/asset.service';\r\nimport { AuthenticationService } from './services/authentication/authentication.service';\r\nimport { AuthGuard } from './services/auth-guard/auth-guard.service';\r\nimport { AuthInterceptor } from './services/interceptors/auth-interceptor';\r\nimport { AuthorizationService } from './services/authorization/authorization.service';\r\nimport { ConsoleMessageService } from './services/messages/console-message.service';\r\nimport { DialogMessageService } from './services/messages/dialog-message.service';\r\nimport { ErrorService } from './services/errors/error.service';\r\nimport { FileService } from './services/files/file.service';\r\nimport { FilterService } from './services/filters/filter.service';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ImageService } from './services/images/image.service';\r\nimport { MenuService } from './layout/services/menu.service';\r\nimport { SelectOptionsService } from './services/select-options/select-options.service';\r\n\r\n//Components\r\nimport { AddressComponent } from './components/addresses/address/address.component';\r\nimport { AuditListForEntityComponent } from './components/audits/audit-list-for-entity/audit-list-for-entity.component';\r\nimport { ClientCreationComponent } from './components/clients/create/client-create.component';\r\nimport { ClientDetailsComponent } from './components/clients/details/client-details.component';\r\nimport { ClientListComponent } from './components/clients/list/client-list.component';\r\nimport { ClientRepresentativeCreationComponent } from './components/representatives/client-representatives/create/client-representative-create.component';\r\nimport { ClientRepresentativeDetailsComponent } from './components/representatives/client-representatives/details/client-representative-details.component';\r\nimport { ClientRepresentativeListComponent } from './components/representatives/client-representatives/list/client-representative-list.component';\r\nimport { CompanyClientAddressComponent } from './components/addresses/company-client-address/company-client-address.component';\r\nimport { DeletionDialogComponent } from './components/dialogs/deletion/deletion-dialog.component';\r\nimport { EquipmentCreationComponent } from './components/equipments/create/equipment-create.component';\r\nimport { EquipmentDetailsComponent } from './components/equipments/details/equipment-details.component';\r\nimport { EquipmentListComponent } from './components/equipments/list/equipment-list.component';\r\nimport { EquipmentPhotosComponent } from './components/equipments/photos/equipment-photos.component';\r\nimport { LoginComponent } from './components/login/login/login.component';\r\nimport { LoginResetPasswordComponent } from './components/login/reset-password/login-reset-password.component';\r\nimport { ManufacturerAddressComponent } from './components/addresses/manufacturer-address/manufacturer-address.component';\r\nimport { ManufacturerCreationComponent } from './components/manufacturers/create/manufacturer-create.component';\r\nimport { ManufacturerDetailsComponent } from './components/manufacturers/details/manufacturer-details.component';\r\nimport { ManufacturerListComponent } from './components/manufacturers/list/manufacturer-list.component';\r\nimport { NameInLanguagesComponent } from './components/name-in-languages/name-in-languages.component';\r\nimport { PrivateClientAddressComponent } from './components/addresses/private-client-address/private-client-address.component';\r\nimport { PrivateClientComponent } from './components/clients/private-client/private-client.component';\r\nimport { UserCreationComponent } from './components/users/create/user-create.component';\r\nimport { UserDetailsComponent } from './components/users/details/user-details.component';\r\nimport { UserListComponent } from './components/users/list/user-list.component';\r\nimport { UserProfileComponent } from './components/users/profile/user-profile.component';\r\nimport { UserRoleCreationComponent } from './components/user-roles/create/user-role-create.component';\r\nimport { UserRoleDetailsComponent } from './components/user-roles/details/user-role-details.component';\r\nimport { UserRoleListComponent } from './components/user-roles/list/user-role-list.component';\r\nimport { UserRolePermissionsComponent } from './components/user-roles/permissions/user-role-permissions.component';\r\n\r\n//PrimeNG\r\nimport { ApiUrlInterceptor } from './services/interceptors/api-url-interceptor';\r\nimport { BreadcrumbModule } from 'primeng/breadcrumb';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { CheckboxModule } from 'primeng/checkbox';\r\nimport { ConfirmDialogModule } from 'primeng/confirmdialog';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { DialogService } from 'primeng/dynamicdialog';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { DynamicDialogModule } from 'primeng/dynamicdialog';\r\nimport { FileUploadModule } from 'primeng/fileupload';\r\nimport { GalleriaModule } from 'primeng/galleria';\r\nimport { MessageModule } from 'primeng/message';\r\nimport { MessagesModule } from 'primeng/messages';\r\nimport { MessageService } from 'primeng/api';\r\nimport { MultiSelectModule } from 'primeng/multiselect';\r\nimport { PanelMenuModule } from 'primeng/panelmenu';\r\nimport { PasswordModule } from 'primeng/password';\r\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\r\nimport { SplitButtonModule } from 'primeng/splitbutton';\r\nimport { TableModule } from 'primeng/table';\r\nimport { TabViewModule } from 'primeng/tabview';\r\nimport { ToastModule } from 'primeng/toast';\r\nimport { TreeTableModule } from 'primeng/treetable';\r\n\r\nregisterLocaleData(localePl, 'pl');\r\nexport const options: Partial<IConfig> | (() => Partial<IConfig>) = {};\r\n\r\n@NgModule({\r\n    declarations: [\r\n        //[start] app components\r\n        AppComponent,\r\n        //[end] app components\r\n        //[start] custom components\r\n        AddressComponent,\r\n        AuditListForEntityComponent,\r\n        ClientCreationComponent,\r\n        ClientDetailsComponent,\r\n        ClientListComponent,\r\n        ClientRepresentativeCreationComponent,\r\n        ClientRepresentativeDetailsComponent,\r\n        ClientRepresentativeListComponent,\r\n        CompanyClientAddressComponent,\r\n        DeletionDialogComponent,\r\n        EquipmentCreationComponent,\r\n        EquipmentDetailsComponent,\r\n        EquipmentListComponent,\r\n        EquipmentPhotosComponent,\r\n        LoginComponent,\r\n        LoginResetPasswordComponent,\r\n        ManufacturerAddressComponent,\r\n        ManufacturerCreationComponent,\r\n        ManufacturerDetailsComponent,\r\n        ManufacturerListComponent,\r\n        NameInLanguagesComponent,\r\n        PrivateClientAddressComponent,\r\n        PrivateClientComponent,\r\n        UserCreationComponent,\r\n        UserDetailsComponent,\r\n        UserListComponent,\r\n        UserProfileComponent,\r\n        UserRoleCreationComponent,\r\n        UserRoleDetailsComponent,\r\n        UserRoleListComponent,\r\n        UserRolePermissionsComponent,\r\n        //[end] custom components\r\n    ],\r\n    imports: [\r\n        //[start] app modules\r\n        AppLayoutModule,\r\n        AppRoutingModule,\r\n        BrowserModule,\r\n        CommonModule,\r\n        FormsModule,\r\n        HttpClientModule,\r\n        JwtModule.forRoot({\r\n            config: {\r\n                tokenGetter: jwtTokenGetter\r\n            }\r\n        }),\r\n        NgxMaskModule.forRoot(options),\r\n        ReactiveFormsModule,\r\n        TranslateModule.forRoot({\r\n            loader: {\r\n                provide: TranslateLoader,\r\n                useFactory: HttpLoaderFactory,\r\n                deps: [HttpClient]\r\n            }\r\n        }),\r\n        //[end] app modules\r\n        //[start] primeng Modules\r\n        BreadcrumbModule,\r\n        ButtonModule,\r\n        CheckboxModule,\r\n        ConfirmDialogModule,\r\n        DropdownModule,\r\n        DynamicDialogModule,\r\n        FileUploadModule,\r\n        GalleriaModule,\r\n        MessageModule,\r\n        MessagesModule,\r\n        MultiSelectModule,\r\n        PanelMenuModule,\r\n        PasswordModule,\r\n        ProgressSpinnerModule,\r\n        SplitButtonModule,\r\n        TableModule,\r\n        TabViewModule,\r\n        ToastModule,\r\n        TreeTableModule,\r\n        //[end] primeng Modules\r\n    ],\r\n    providers: [\r\n        //[start] app services\r\n        { provide: LocationStrategy, useClass: PathLocationStrategy },\r\n        {\r\n            provide: HTTP_INTERCEPTORS,\r\n            useClass: AuthInterceptor,\r\n            multi: true\r\n        },\r\n        {\r\n            provide: HTTP_INTERCEPTORS,\r\n            useClass: ApiUrlInterceptor,\r\n            multi: true\r\n        },\r\n        AssetService,\r\n        AuthenticationService,\r\n        AuthGuard,\r\n        AuthorizationService,\r\n        ConfirmationService,\r\n        ConsoleMessageService,\r\n        DialogMessageService,\r\n        DialogService,\r\n        ErrorService,\r\n        FileService,\r\n        FilterService,\r\n        ImageService,\r\n        MessageService,\r\n        MenuService,\r\n        SelectOptionsService,\r\n        //[end] app services\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\r\nexport function jwtTokenGetter() {\r\n    return localStorage.getItem(environment.auth_key);\r\n}\r\n\r\nexport function HttpLoaderFactory(http: HttpClient) {\r\n    return new TranslateHttpLoader(http);\r\n}","import { AccessControl } from \"src/app/tools/access-control\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { Confirmation, ConfirmationService } from \"primeng/api\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ApiResultEnum } from \"src/app/enums/api-result.enum\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { Identifiable } from \"src/app/interfaces/identifiable\";\r\n\r\nexport abstract class AccessControlComponent<T extends Identifiable> {\r\n\r\n  protected abstract readonly deletedEntityInstanceIdentificationInitializer: (deletedEntity: T) => string;\r\n\r\n  private accessControl: AccessControl;\r\n\r\n  public get hasAccessToButtons(): boolean {\r\n    return this.accessControl.hasAccessToButtons;\r\n  }\r\n\r\n  public get onEditLabelId(): string {\r\n    return this.accessControl.hasAccessToButtons ? 'General.Edit' : 'General.Details';\r\n  }\r\n\r\n  public readonly onDeleteLabelId = 'General.Delete';\r\n\r\n  constructor(\r\n    protected readonly authorizationService: AuthorizationService,\r\n    protected readonly confirmationService: ConfirmationService,\r\n    protected readonly consoleMessageService: ConsoleMessageService,\r\n    public readonly deletionKey: string,\r\n    protected readonly deletionLinkInitializer: (...args: any[]) => string,\r\n    protected readonly dialogMessageService: DialogMessageService,\r\n    protected readonly entityName: string,\r\n    protected readonly errorService: ErrorService,\r\n    protected readonly httpClient: HttpClient,\r\n    protected readonly onAfterDeletionSuccessOperationsHandler: (...args: any[]) => void,\r\n    protected readonly router: Router,\r\n    public readonly translate: TranslateService,\r\n    public readonly userPermissions: number[]) {\r\n\r\n    this.accessControl = new AccessControl(this.authorizationService, this.userPermissions);\r\n  }\r\n\r\n  public onDelete(entity: T) {\r\n    this.confirmationService.confirm(<Confirmation>{\r\n      key: this.deletionKey,\r\n      message: `${this.translate.instant(this.entityName + '.DeletionConfirmation')} ${this.deletedEntityInstanceIdentificationInitializer(entity)}?`,\r\n      accept: () => {\r\n        this.deleteEntity(entity);\r\n      }\r\n    });\r\n  }\r\n\r\n  private deleteEntity(entity: T) {\r\n    this.httpClient\r\n      .delete<string>(this.deletionLinkInitializer(entity.Id))\r\n      .subscribe({\r\n        next: result => {\r\n          if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n            this.dialogMessageService.addSuccess(this.translate.instant(`${this.entityName}.Deleted`));\r\n          }\r\n          else {\r\n            this.dialogMessageService.addError(this.getErrorMessageForResult(result) ?? this.errorService.getDefaultErrorMessage());\r\n          }\r\n\r\n          this.onAfterDeletionSuccessOperationsHandler();\r\n\r\n          console.log(this.consoleMessageService.getConsoleMessageWithResultForEntityAfterDeletion(this.entityName, result));\r\n        },\r\n        error: error => {\r\n          this.dialogMessageService.addError(this.errorService.getFirstTranslatedErrorMessage(error));\r\n        }\r\n      });\r\n  }\r\n\r\n  protected getErrorMessageForResult(result: string): string | undefined {\r\n    if (Object.keys(ApiResultEnum).includes(result)) {\r\n      const apiErrorKey = ApiResultEnum[Number(this.getApiResultKeyByValue(result))].toString();\r\n      return `${this.entityName}.Messages.${apiErrorKey}`;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private getApiResultKeyByValue(value: string): keyof ApiResultEnum | undefined {\r\n    const keys = Object.keys(ApiResultEnum).filter((key) => (ApiResultEnum as any)[key] === value);\r\n    return keys.length > 0 ? keys[0] as keyof ApiResultEnum : undefined;\r\n  }\r\n}","import { AccessControl } from \"src/app/tools/access-control\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { Form } from \"./form\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { Confirmation, ConfirmationService } from \"primeng/api\";\r\nimport { ApiResultEnum } from \"src/app/enums/api-result.enum\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\n\r\nexport abstract class AccessControlForm<T>\r\n  extends Form<T> {\r\n\r\n  protected abstract override readonly afterSubmitionCustomOperationsHandler?: (...args: any[]) => void;\r\n  protected abstract readonly deletedEntityInstanceIdentificationInitializer: (...args: any[]) => string;\r\n  protected readonly entityId: string | number;\r\n  protected readonly onAfterDeletionSuccessNavigateUsingLinkHandler?: (link?: string) => void;\r\n  protected override readonly onAfterSubmitionSuccessNavigateUsingLinkHandler?: (link?: string) => void;\r\n  protected override readonly onBackNavigateUsingLinkHandler?: (link?: string) => void;\r\n\r\n  private readonly deletionLink: string;\r\n  private readonly accessControl: AccessControl;\r\n\r\n  public get hasAccessToButtons(): boolean {\r\n    return this.accessControl.hasAccessToButtons;\r\n  }\r\n\r\n  constructor(\r\n    protected readonly activatedRoute: ActivatedRoute,\r\n    protected readonly authorizationService: AuthorizationService,\r\n    protected readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    public readonly deletionKey: string,\r\n    protected readonly deletionLinkInitializer: (...args: any[]) => string,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly entityName: string,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly mode: FormModeEnum,\r\n    protected override readonly router: Router,\r\n    public override readonly submitionLink: string,\r\n    public override readonly translate: TranslateService,\r\n    public userPermissions: number[],\r\n    protected override readonly afterSubmitionNavigationLink?: string) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      entityName,\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      mode,\r\n      router,\r\n      submitionLink,\r\n      translate);\r\n\r\n    this.accessControl = new AccessControl(this.authorizationService, this.userPermissions);\r\n    this.entityId = this.activatedRoute.snapshot.params[\"id\"];\r\n    this.deletionLink = deletionLinkInitializer(this.entityId);\r\n    this.isDisabled = true;\r\n  }\r\n\r\n  public onDelete() {\r\n    this.confirmationService.confirm(<Confirmation>{\r\n      key: this.deletionKey,\r\n      message: `${this.translate.instant(this.entityName + '.DeletionConfirmation')} ${this.deletedEntityInstanceIdentificationInitializer()}?`,\r\n      accept: () => {\r\n        this.isExecuting = true;\r\n        this.deleteEntity();\r\n      }\r\n    });\r\n  }\r\n\r\n  protected override updateForm(obj?: { [key: string]: any }) {\r\n    super.updateForm(obj);\r\n    this.setAccess();\r\n\r\n    if (!this.form.disabled) {\r\n      this.formValidator.updateAllControlsToTouched();\r\n    }\r\n  }\r\n\r\n  private deleteEntity() {\r\n    this.httpClient\r\n      .delete<string>(this.deletionLink)\r\n      .subscribe({\r\n        next: result => {\r\n          if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n            this.dialogMessageService.addSuccess(this.translate.instant(`${this.entityName}.Deleted`));\r\n\r\n            if (!this.onAfterDeletionSuccessNavigateUsingLinkHandler) {\r\n              this.router.navigate([this.afterSubmitionNavigationLink]);\r\n            }\r\n            else {\r\n              this.onAfterDeletionSuccessNavigateUsingLinkHandler();\r\n            }\r\n          }\r\n          else {\r\n            this.dialogMessageService.addError(this.getErrorMessageForResult(result) ?? this.errorService.getDefaultErrorMessage());\r\n          }\r\n\r\n          console.log(this.consoleMessageService.getConsoleMessageWithResultForEntityAfterDeletion(this.entityName, result));\r\n          this.isExecuting = false;\r\n        },\r\n        error: error => {\r\n          this.dialogMessageService.addError(this.errorService.getFirstTranslatedErrorMessage(error));\r\n          this.isExecuting = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  private setAccess() {\r\n    if (this.hasAccessToButtons) {\r\n      this.form.enable();\r\n    }\r\n    else {\r\n      this.form.disable();\r\n    }\r\n\r\n    this.isDisabled = !this.hasAccessToButtons;\r\n  }\r\n}","import { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { DynamicDialogConfig, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { AccessControlForm } from \"./access-control-form\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { DialogConfigData } from \"../dialogs/dialog-config-data\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\n\r\nexport abstract class AccessControlOpenableAsDialogForm<T extends DialogConfigData, U>\r\n  extends AccessControlForm<U> {\r\n\r\n  protected readonly _dialogConfigData: T | undefined;\r\n  protected override readonly entityId: string | number;\r\n  protected override readonly onAfterDeletionSuccessNavigateUsingLinkHandler = this.onAfterDeletionSuccessNavigateUsingLink;\r\n  protected override readonly onAfterSubmitionSuccessNavigateUsingLinkHandler = this.onAfterSubmitSuccessNavigateUsingLink;\r\n  protected override readonly onBackNavigateUsingLinkHandler = this.onBackNavigateUsingLink;\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    public override readonly deletionKey: string,\r\n    protected override readonly deletionLinkInitializer: (...args: any[]) => string,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly entityName: string,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly mode: FormModeEnum,\r\n    public readonly openedAsDialogConfig: DynamicDialogConfig,\r\n    public readonly openedAsDialogRef: DynamicDialogRef,\r\n    protected override readonly router: Router,\r\n    public override readonly submitionLink: string,\r\n    public override readonly translate: TranslateService,\r\n    public override readonly userPermissions: number[],\r\n    protected override readonly afterSubmitionNavigationLink?: string\r\n  ) {\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      deletionKey,\r\n      deletionLinkInitializer,\r\n      dialogMessageService,\r\n      entityName,\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      mode,\r\n      router,\r\n      submitionLink,\r\n      translate,\r\n      userPermissions,\r\n      afterSubmitionNavigationLink\r\n    );\r\n\r\n    this._dialogConfigData = this.getOpenedAsDialogData(openedAsDialogConfig?.data);\r\n    this.entityId = this.getEntityId();\r\n  }\r\n\r\n  public onBack() {\r\n    this.onBackNavigateUsingLink();\r\n  }\r\n\r\n  private onAfterDeletionSuccessNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private onAfterSubmitSuccessNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private onBackNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private getEntityId() {\r\n    if (this.openedAsDialogRef) {\r\n      return this._dialogConfigData?.Id;\r\n    }\r\n    else {\r\n      return this.activatedRoute.snapshot.params[\"id\"];\r\n    }\r\n  }\r\n\r\n  private getOpenedAsDialogData(data: any) {\r\n    return this.isOfTypeT(data) ? data : undefined;\r\n  }\r\n\r\n  private isOfTypeT(value: any): value is T {\r\n    return typeof value === 'object' && value !== null;\r\n  }\r\n}","import { Directive, Input, OnInit } from \"@angular/core\";\r\nimport { SimpleFormComponent as SimpleForm } from \"./simple-form\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\n\r\n@Directive({\r\n  selector: \"dynamic-requirement-form\"\r\n})\r\nexport abstract class DynamicRequirementForm\r\n  extends SimpleForm {\r\n\r\n  @Input('requiredFields') requiredFields: string[] = [];\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder\r\n  ) {\r\n    super(formBuilder);\r\n  }\r\n\r\n  protected updateFormAfterInit(): void {\r\n    this.requiredFields.forEach(fieldName => {\r\n      const requiredField = this.form.get(fieldName);\r\n      if (requiredField) {\r\n        requiredField.setValidators([Validators.required]);\r\n      }\r\n    });\r\n  }\r\n}","import { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { PostAction } from \"./post-action\";\r\nimport { PutAction } from \"./put-action\";\r\nimport { FormSubmitionAction } from \"./form-submition-action\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nexport class FormSubmitionActionFactory<T> {\r\n\r\n  constructor(\r\n    private readonly consoleMessageService: ConsoleMessageService,\r\n    private readonly httpClient: HttpClient) { }\r\n\r\n  public getFormSubmitionAction<T>(mode: FormModeEnum): FormSubmitionAction<T> | undefined {\r\n    switch (mode) {\r\n      case FormModeEnum.Creation:\r\n        return new PostAction<T>(this.consoleMessageService, this.httpClient);\r\n\r\n      case FormModeEnum.Edition:\r\n        return new PutAction<T>(this.consoleMessageService, this.httpClient);\r\n\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n}","import { Observable } from \"rxjs\";\r\nimport { FormSubmitionAction } from \"./form-submition-action\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { Form } from \"../form\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nexport class PostAction<T>\r\n  implements FormSubmitionAction<T> {\r\n\r\n  constructor(\r\n    private readonly consoleMessageService: ConsoleMessageService,\r\n    private readonly httpClient: HttpClient) {\r\n  }\r\n\r\n  getConsoleMessage: (entity: string, result: string) => string = (entity: string, result: string) => {\r\n    return this.consoleMessageService.getConsoleMessageWithResultForEntityAfterCreation(entity, result);\r\n  }\r\n\r\n  execute(formComponent: Form<T>): Observable<string> {\r\n    const entity = formComponent.beforeSubmitionCustomOperationsHandler();\r\n    return this.httpClient.post<string>(formComponent.submitionLink, entity);\r\n  }\r\n\r\n  successMessageTag: string = 'Created';\r\n}","import { Observable } from \"rxjs\";\r\nimport { FormSubmitionAction } from \"./form-submition-action\";\r\nimport { Form } from \"../form\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nexport class PutAction<T>\r\n  implements FormSubmitionAction<T> {\r\n\r\n  constructor(\r\n    private readonly consoleMessageService: ConsoleMessageService,\r\n    private readonly httpClient: HttpClient) { }\r\n\r\n  getConsoleMessage: (entity: string, result: string) => string = (entity: string, result: string) => {\r\n    return this.consoleMessageService.getConsoleMessageWithResultForEntityAfterUpdate(entity, result);\r\n  }\r\n\r\n  execute(formComponent: Form<T>): Observable<string> {\r\n    const entity = formComponent.beforeSubmitionCustomOperationsHandler();\r\n    return this.httpClient.put<string>(formComponent.submitionLink, entity);\r\n  }\r\n\r\n  successMessageTag: string = 'Updated';\r\n}","import { FormBuilder, FormGroup } from \"@angular/forms\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { FormValidator } from \"src/app/ui-controls/form-validator\";\r\nimport { FormSubmitionActionFactory as FormSubmitionActionFactory } from \"./form-factories/form-submition-action-factory\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ApiResultEnum } from \"src/app/enums/api-result.enum\";\r\nimport { Router } from \"@angular/router\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\n\r\nexport abstract class Form<T> {\r\n\r\n  public readonly beforeSubmitionCustomOperationsHandler: (...args: any[]) => T;\r\n  public readonly formMode: typeof FormModeEnum = FormModeEnum;\r\n\r\n  protected readonly afterSubmitionCustomOperationsHandler?: (...args: any[]) => void;\r\n  protected readonly onAfterSubmitionSuccessNavigateUsingLinkHandler?: (link?: string) => void;\r\n  protected readonly onBackNavigateUsingLinkHandler?: (link?: string) => void;\r\n\r\n  private _formValidator: FormValidator;\r\n\r\n  form: FormGroup;\r\n  isDisabled: boolean = false;\r\n  isExecuting: boolean = false;\r\n\r\n  public get shouldActionsBeDisabled(): boolean {\r\n    return this.form.invalid ||\r\n      this.isDisabled ||\r\n      this.isExecuting;\r\n  }\r\n\r\n  protected get formValidator(): FormValidator {\r\n    return this._formValidator;\r\n  }\r\n  private set formValidator(validator: FormValidator) {\r\n    this._formValidator = validator;\r\n  }\r\n\r\n  constructor(\r\n    protected readonly consoleMessageService: ConsoleMessageService,\r\n    protected readonly dialogMessageService: DialogMessageService,\r\n    protected readonly entityName: string,\r\n    protected readonly errorService: ErrorService,\r\n    protected readonly formBuilder: FormBuilder,\r\n    protected readonly httpClient: HttpClient,\r\n    protected readonly mode: FormModeEnum,\r\n    protected readonly router: Router,\r\n    public readonly submitionLink: string,\r\n    public readonly translate: TranslateService,\r\n    protected readonly afterSubmitionNavigationLink?: string) {\r\n  }\r\n\r\n  protected createForm(formFieldGroup?: object) {\r\n    this.form = this.formBuilder.group(formFieldGroup ?? {});\r\n    this.formValidator = new FormValidator(this.form);\r\n  }\r\n\r\n  public onSubmit() {\r\n    this.isExecuting = true;\r\n    const onSubmitAction = new FormSubmitionActionFactory(this.consoleMessageService, this.httpClient)\r\n      .getFormSubmitionAction<T>(this.mode);\r\n\r\n    if (!onSubmitAction)\r\n      return;\r\n\r\n    onSubmitAction\r\n      .execute(this)\r\n      .subscribe({\r\n        next: result => {\r\n          if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n            if (!this.onAfterSubmitionSuccessNavigateUsingLinkHandler) {\r\n              this.router.navigate([this.afterSubmitionNavigationLink]);\r\n            }\r\n            else {\r\n              this.onAfterSubmitionSuccessNavigateUsingLinkHandler(this.afterSubmitionNavigationLink);\r\n            }\r\n\r\n            this.dialogMessageService.addSuccess(this.translate.instant(`${this.entityName}.${onSubmitAction.successMessageTag}`));\r\n          }\r\n          else {\r\n            this.dialogMessageService.addError(this.getErrorMessageForResult(result) ?? this.errorService.getDefaultErrorMessage());\r\n          }\r\n\r\n          console.log(onSubmitAction.getConsoleMessage(this.entityName, result));\r\n\r\n          if (this.afterSubmitionCustomOperationsHandler) {\r\n            this.afterSubmitionCustomOperationsHandler();\r\n          }\r\n\r\n          this.isExecuting = false;\r\n        },\r\n        error: error => {\r\n          const firstTranslatedErrorMessage = this.errorService.getFirstTranslatedErrorMessage(error);\r\n          if (firstTranslatedErrorMessage !== this.errorService.getDefaultErrorMessage()) {\r\n            this.dialogMessageService.addError(this.errorService.getFirstTranslatedErrorMessage(error));\r\n          }\r\n          else {\r\n            const requestValidationByDatabaseErrorMessage = this.getErrorMessageForResult(this.errorService.getFirstErrorMessageKey(error));\r\n            this.dialogMessageService.addError(requestValidationByDatabaseErrorMessage ? this.translate.instant(requestValidationByDatabaseErrorMessage) : firstTranslatedErrorMessage);\r\n          }\r\n          this.isExecuting = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  protected updateForm(obj?: { [key: string]: any }) {\r\n    if (obj) {\r\n      this.form.patchValue(obj);\r\n    }\r\n  }\r\n\r\n  protected getErrorMessageForResult(result: string): string | undefined {\r\n    if (Object.keys(ApiResultEnum).includes(result)) {\r\n      const apiErrorKey = ApiResultEnum[Number(this.getApiResultKeyByValue(result))].toString();\r\n      return `${this.entityName}.Messages.${apiErrorKey}`;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private getApiResultKeyByValue(value: string): keyof ApiResultEnum | undefined {\r\n    const keys = Object.keys(ApiResultEnum).filter((key) => (ApiResultEnum as any)[key] === value);\r\n    return keys.length > 0 ? keys[0] as keyof ApiResultEnum : undefined;\r\n  }\r\n}","import { Router } from \"@angular/router\";\r\nimport { DynamicDialogConfig, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { Form } from \"./form\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\n\r\nexport abstract class OpenableAsDialogForm<T, U>\r\n  extends Form<U> {\r\n\r\n  protected readonly _dialogConfigData: T | undefined;\r\n  protected readonly onAfterDeletionSuccessNavigateUsingLinkHandler: (...args: any[]) => void = this.onAfterDeletionSuccessNavigateUsingLink;\r\n  protected override readonly onAfterSubmitionSuccessNavigateUsingLinkHandler = this.onAfterSubmitSuccessNavigateUsingLink;\r\n  protected override readonly onBackNavigateUsingLinkHandler = this.onBackNavigateUsingLink;\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly entityName: string,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly mode: FormModeEnum,\r\n    public openedAsDialogConfig: DynamicDialogConfig,\r\n    public openedAsDialogRef: DynamicDialogRef,\r\n    protected override readonly router: Router,\r\n    public override submitionLink: string,\r\n    public override readonly translate: TranslateService,\r\n    protected override afterSubmitionNavigationLink?: string) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      entityName,\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      mode,\r\n      router,\r\n      submitionLink,\r\n      translate,\r\n      afterSubmitionNavigationLink\r\n    );\r\n\r\n    this._dialogConfigData = this.getOpenedAsDialogData(openedAsDialogConfig?.data);\r\n  }\r\n\r\n  public onBack() {\r\n    this.onBackNavigateUsingLink();\r\n  }\r\n\r\n  private onAfterDeletionSuccessNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private onAfterSubmitSuccessNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private onBackNavigateUsingLink() {\r\n    if (this.openedAsDialogRef) {\r\n      this.openedAsDialogRef.close();\r\n    }\r\n    else {\r\n      this.router.navigate([this.afterSubmitionNavigationLink]);\r\n    }\r\n  }\r\n\r\n  private getOpenedAsDialogData(data: any) {\r\n    return this.isOfTypeT(data) ? data : undefined;\r\n  }\r\n\r\n  private isOfTypeT(value: any): value is T {\r\n    return typeof value === 'object' && value !== null;\r\n  }\r\n}","import { FormBuilder, FormGroup } from \"@angular/forms\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { FormValidator } from \"src/app/ui-controls/form-validator\";\r\n\r\nexport abstract class SimpleFormComponent {\r\n\r\n  public readonly formMode: typeof FormModeEnum = FormModeEnum;\r\n\r\n  public get form(): FormGroup {\r\n    return this._form;\r\n  };\r\n  private set form(value: FormGroup) {\r\n    this._form = value;\r\n  }\r\n\r\n  protected get formValidator(): FormValidator {\r\n    return this._formValidator;\r\n  }\r\n  private set formValidator(value: FormValidator) {\r\n    this._formValidator = value;\r\n  }\r\n\r\n  private _form: FormGroup;\r\n  private _formValidator: FormValidator;\r\n\r\n  isDisabled: boolean = false;\r\n  isExecuting: boolean = false;\r\n\r\n  constructor(protected readonly formBuilder: FormBuilder) { }\r\n\r\n  public get shouldActionsBeDisabled(): boolean {\r\n    return this.form.invalid ||\r\n      this.isDisabled ||\r\n      this.isExecuting;\r\n  }\r\n\r\n  protected createForm(formFieldGroup?: object, reloadForm = false) {\r\n    this.form = reloadForm ? new FormGroup(formFieldGroup) : this.formBuilder.group(formFieldGroup ?? {});\r\n    this.formValidator = new FormValidator(this.form);\r\n  }\r\n\r\n  protected updateForm(obj?: { [key: string]: any }) {\r\n    if (obj)\r\n      this.form.patchValue(obj);\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { SelectItem } from \"primeng/api\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { Address } from \"src/app/interfaces/address\";\r\nimport { DynamicRequirementForm } from \"../../abstract/forms/dynamic-requirement-form\";\r\nimport { ADDRESS_CONTROL_NAMES } from \"./address.constants\";\r\n\r\n@Component({\r\n  selector: 'address',\r\n  templateUrl: './address.component.html'\r\n})\r\nexport class AddressComponent\r\n  extends DynamicRequirementForm\r\n  implements OnInit {\r\n\r\n  @Input('entityAddress') entityAddress?: Address;\r\n  @Input('showTitle') showTitle?: boolean;\r\n\r\n  countries: SelectItem[];\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public readonly translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n    this.createForm({\r\n      [ADDRESS_CONTROL_NAMES.ApartmentNumber]: [''],\r\n      [ADDRESS_CONTROL_NAMES.City]: [''],\r\n      [ADDRESS_CONTROL_NAMES.Country]: [''],\r\n      [ADDRESS_CONTROL_NAMES.Email]: [''],\r\n      [ADDRESS_CONTROL_NAMES.Id]: null,\r\n      [ADDRESS_CONTROL_NAMES.PhoneNumber]: [''],\r\n      [ADDRESS_CONTROL_NAMES.PostalCode]: [''],\r\n      [ADDRESS_CONTROL_NAMES.StreetName]: [''],\r\n      [ADDRESS_CONTROL_NAMES.StreetNumber]: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n    this.updateFormAfterInit();\r\n\r\n    if (this.entityAddress) {\r\n      this.updateForm({\r\n        [ADDRESS_CONTROL_NAMES.ApartmentNumber]: this.entityAddress.ApartmentNumber,\r\n        [ADDRESS_CONTROL_NAMES.City]: this.entityAddress.City,\r\n        [ADDRESS_CONTROL_NAMES.Country]: this.entityAddress.Country.Id,\r\n        [ADDRESS_CONTROL_NAMES.Email]: this.entityAddress.Email,\r\n        [ADDRESS_CONTROL_NAMES.Id]: this.entityAddress.Id,\r\n        [ADDRESS_CONTROL_NAMES.PhoneNumber]: this.entityAddress.PhoneNumber,\r\n        [ADDRESS_CONTROL_NAMES.PostalCode]: this.entityAddress.PostalCode,\r\n        [ADDRESS_CONTROL_NAMES.StreetName]: this.entityAddress.StreetName,\r\n        [ADDRESS_CONTROL_NAMES.StreetNumber]: this.entityAddress.StreetNumber\r\n      });\r\n    }\r\n  }\r\n\r\n  private populateDropdowns() {\r\n    this.selectOptionsService\r\n      .getCountries()\r\n      .subscribe(options => {\r\n        this.countries = options;\r\n      });\r\n  }\r\n}","export const ADDRESS_CONTROL_NAMES = {\r\n  ApartmentNumber: 'ApartmentNumber',\r\n  City: 'City',\r\n  Country: 'CountryId',\r\n  Email: 'Email',\r\n  Id: 'Id',\r\n  PhoneNumber: 'PhoneNumber',\r\n  PostalCode: 'PostalCode',\r\n  StreetName: 'StreetName',\r\n  StreetNumber: 'StreetNumber',\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { SimpleFormComponent } from \"../../abstract/forms/simple-form\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ClientAddress } from \"src/app/interfaces/address\";\r\nimport { COMPANY_CLIENT_ADDRESS_CONTROL_NAMES } from \"./company-client-address.constants\";\r\n\r\n@Component({\r\n  selector: 'company-client-address',\r\n  templateUrl: './company-client-address.component.html'\r\n})\r\nexport class CompanyClientAddressComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  @Input('clientAddress') clientAddress?: ClientAddress;\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder,\r\n    public readonly translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n    this.createForm({\r\n      [COMPANY_CLIENT_ADDRESS_CONTROL_NAMES.NationalCompanyId]: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.clientAddress) {\r\n      this.updateForm({\r\n        [COMPANY_CLIENT_ADDRESS_CONTROL_NAMES.NationalCompanyId]: this.clientAddress.NationalId\r\n      });\r\n    }\r\n  }\r\n}","export const COMPANY_CLIENT_ADDRESS_CONTROL_NAMES = {\r\n  NationalCompanyId: 'NationalCompanyId',\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { SimpleFormComponent } from \"../../abstract/forms/simple-form\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ManufacturerAddress } from \"src/app/interfaces/address\";\r\nimport { MANUFACTURER_ADDRESS_CONTROL_NAMES } from \"./manufacturer-address.constants\";\r\n\r\n@Component({\r\n  selector: 'manufacturer-address',\r\n  templateUrl: './manufacturer-address.component.html'\r\n})\r\nexport class ManufacturerAddressComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  @Input('manufacturerAddress') manufacturerAddress?: ManufacturerAddress;\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder,\r\n    public readonly translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n    this.createForm({\r\n      [MANUFACTURER_ADDRESS_CONTROL_NAMES.NationalId]: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.manufacturerAddress) {\r\n      this.updateForm({\r\n        [MANUFACTURER_ADDRESS_CONTROL_NAMES.NationalId]: this.manufacturerAddress.NationalId\r\n      });\r\n    }\r\n  }\r\n}","export const MANUFACTURER_ADDRESS_CONTROL_NAMES = {\r\n  NationalId: 'NationalId',\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { SimpleFormComponent } from \"../../abstract/forms/simple-form\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ClientAddress } from \"src/app/interfaces/address\";\r\nimport { PRIVATE_CLIENT_ADDRESS_CONTROL_NAMES } from \"./private-client-address.constants\";\r\n\r\n@Component({\r\n  selector: 'private-client-address',\r\n  templateUrl: './private-client-address.component.html'\r\n})\r\nexport class PrivateClientAddressComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  @Input('clientAddress') clientAddress?: ClientAddress;\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder,\r\n    public readonly translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n    this.createForm({\r\n      [PRIVATE_CLIENT_ADDRESS_CONTROL_NAMES.NationalCitizenId]: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.clientAddress) {\r\n      this.updateForm({\r\n        [PRIVATE_CLIENT_ADDRESS_CONTROL_NAMES.NationalCitizenId]: this.clientAddress.NationalId\r\n      });\r\n    }\r\n  }\r\n}","export const PRIVATE_CLIENT_ADDRESS_CONTROL_NAMES = {\r\n  NationalCitizenId: 'NationalCitizenId',\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { LazyLoadEvent, SelectItem } from \"primeng/api\";\r\nimport { PngTable, PngTableColumn } from \"src/app/interfaces/png\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { FilterService } from \"src/app/services/filters/filter.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { AuditListItemModel, AuditListModel } from \"src/app/interfaces/audit\";\r\nimport { concatMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: \"audit-list-for-entity\",\r\n  templateUrl: \"./audit-list-for-entity.component.html\"\r\n})\r\nexport class AuditListForEntityComponent implements OnInit {\r\n\r\n  private readonly _dataPopulator = {\r\n    fieldNamesForObjectHistory: {\r\n      get: () => this.getFieldNamesForObjectHistory(),\r\n      set: (options: SelectItem[]) => this.setFieldNamesForObjectHistory(options)\r\n    },\r\n    objectHistory: {\r\n      get: (event: LazyLoadEvent) => this.getObjectHistory(event),\r\n      set: (audits: AuditListModel) => this.setObjectHistory(audits)\r\n    }\r\n  };\r\n\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  public audits: AuditListItemModel[];\r\n  public table: PngTable;\r\n  public fieldNameOptions: SelectItem[] = [];\r\n  public totalRecords: number;\r\n\r\n  @Input() entityId: string;\r\n  @Input() entityTableName: string;\r\n\r\n  constructor(\r\n    public readonly filterService: FilterService,\r\n    private readonly httpClient: HttpClient,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public readonly translate: TranslateService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.table = new PngTable([\r\n      <PngTableColumn>{\r\n        field: 'UserName',\r\n        header: 'Audit.UserName',\r\n        width: '20%',\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'CreatedOn',\r\n        header: 'Audit.CreatedOn',\r\n        width: '20%'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'FieldName',\r\n        header: 'Audit.FieldName',\r\n        width: '20%',\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'OldValue',\r\n        header: 'Audit.OldValue',\r\n        width: '20%',\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'NewValue',\r\n        header: 'Audit.NewValue',\r\n        width: '20%',\r\n        applyGlobalFiltering: true\r\n      }\r\n    ]);\r\n  }\r\n\r\n  public loadAuditsLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n\r\n    this._dataPopulator.objectHistory\r\n      .get(event)\r\n      .pipe(\r\n        concatMap(result => {\r\n          this._dataPopulator.objectHistory.set(result);\r\n\r\n          return this._dataPopulator.fieldNamesForObjectHistory.get();\r\n        })\r\n      )\r\n      .subscribe(result => {\r\n        this._dataPopulator.fieldNamesForObjectHistory.set(result);\r\n      });\r\n  }\r\n\r\n  private getFieldNamesForObjectHistory() {\r\n    return this.selectOptionsService\r\n      .getFieldNamesForObjectHistory(this.tempLazyLoadEvent, this.table.cols, this.entityId, this.entityTableName);\r\n  }\r\n\r\n  private getObjectHistory(event: LazyLoadEvent) {\r\n    return this.httpClient\r\n      .get<AuditListModel>(ApiRoutes.audit.getObjectHistory(event, this.table.cols, this.entityId, this.entityTableName));\r\n  }\r\n\r\n  private setFieldNamesForObjectHistory(options: SelectItem[]) {\r\n    this.fieldNameOptions = options;\r\n    this.table.setOptionsForColumn(\"FieldName\", this.fieldNameOptions);\r\n  }\r\n\r\n  private setObjectHistory(audits: AuditListModel) {\r\n    this.totalRecords = audits.TotalRowsCount;\r\n    this.audits = audits.List;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { Routes } from \"src/app/constants/routes.constants\";\r\nimport { SelectItem } from \"primeng/api\";\r\nimport { ClientTypeEnum } from \"src/app/enums/client-type.enum\";\r\nimport { PrivateClientComponent } from \"../private-client/private-client.component\";\r\nimport { AddressComponent } from \"../../addresses/address/address.component\";\r\nimport { PrivateClientAddressComponent } from \"../../addresses/private-client-address/private-client-address.component\";\r\nimport { CompanyClientAddressComponent } from \"../../addresses/company-client-address/company-client-address.component\";\r\nimport { ClientCreationModel } from \"src/app/interfaces/client\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { Form } from \"../../abstract/forms/form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { CLIENT_CREATE_CONTROL_NAMES } from \"./client-create.constants\";\r\nimport { ADDRESS_CONTROL_NAMES } from \"../../addresses/address/address.constants\";\r\nimport { ClientAddress, Country } from \"src/app/interfaces/address\";\r\nimport { PRIVATE_CLIENT_ADDRESS_CONTROL_NAMES } from \"../../addresses/private-client-address/private-client-address.constants\";\r\nimport { COMPANY_CLIENT_ADDRESS_CONTROL_NAMES } from \"../../addresses/company-client-address/company-client-address.constants\";\r\nimport { PRIVATE_CLIENT_CONTROL_NAMES } from \"../private-client/private-client.constants\";\r\n\r\n@Component({\r\n  selector: \"client-create\",\r\n  templateUrl: \"./client-create.component.html\"\r\n})\r\nexport class ClientCreationComponent\r\n  extends Form<ClientCreationModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareClientCreationModel;\r\n\r\n  @ViewChild('addressForm') addressForm: AddressComponent;\r\n  @ViewChild('companyClientAddressForm') companyClientAddressForm?: CompanyClientAddressComponent;\r\n  @ViewChild('privateClientAddressForm') privateClientAddressForm?: PrivateClientAddressComponent;\r\n  @ViewChild('privateClientForm') privateClientForm?: PrivateClientComponent;\r\n\r\n  readonly clientAddressRequiredFields: string[] = [\r\n    ADDRESS_CONTROL_NAMES.ApartmentNumber,\r\n    ADDRESS_CONTROL_NAMES.City,\r\n    ADDRESS_CONTROL_NAMES.Country,\r\n    ADDRESS_CONTROL_NAMES.PostalCode,\r\n    ADDRESS_CONTROL_NAMES.StreetName,\r\n    ADDRESS_CONTROL_NAMES.StreetNumber\r\n  ];\r\n  readonly clientType: typeof ClientTypeEnum = ClientTypeEnum;\r\n\r\n  public override get shouldActionsBeDisabled(): boolean {\r\n    return super.shouldActionsBeDisabled ||\r\n      (this.addressForm?.form.invalid ?? false) ||\r\n      (this.companyClientAddressForm?.form.invalid ?? false) ||\r\n      (this.privateClientAddressForm?.form.invalid ?? false) ||\r\n      (this.privateClientForm?.form.invalid ?? false);\r\n  }\r\n\r\n  clientTypes: SelectItem[];\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'Client',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Creation,\r\n      router,\r\n      ApiRoutes.client.post,\r\n      translate,\r\n      Routes.clients.navigations.list\r\n    );\r\n\r\n    this.createForm({\r\n      [CLIENT_CREATE_CONTROL_NAMES.ClientType]: null,\r\n      [CLIENT_CREATE_CONTROL_NAMES.Name]: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.clients.navigations.list]);\r\n  }\r\n\r\n  private getClientNationalId(): string {\r\n    switch (Number(this.form.value.ClientTypeId)) {\r\n      case ClientTypeEnum.Private:\r\n        return this.privateClientAddressForm?.form.value[PRIVATE_CLIENT_ADDRESS_CONTROL_NAMES.NationalCitizenId];\r\n      case ClientTypeEnum.Company:\r\n        return this.companyClientAddressForm?.form.value[COMPANY_CLIENT_ADDRESS_CONTROL_NAMES.NationalCompanyId];\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  private populateDropdowns() {\r\n    this.selectOptionsService\r\n      .getClientTypes()\r\n      .subscribe(options => {\r\n        this.clientTypes = options;\r\n      });\r\n  }\r\n\r\n  private prepareClientCreationModel(): ClientCreationModel {\r\n    const clientAddress = <ClientAddress>{\r\n      ApartmentNumber: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.ApartmentNumber],\r\n      City: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.City],\r\n      Country: <Country>{\r\n        Id: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.Country]\r\n      },\r\n      Email: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.Email],\r\n      NationalId: this.getClientNationalId(),\r\n      PhoneNumber: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.PhoneNumber],\r\n      PostalCode: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.PostalCode],\r\n      StreetName: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.StreetName],\r\n      StreetNumber: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.StreetNumber],\r\n    };\r\n    const client = <ClientCreationModel>{\r\n      Addresses: [clientAddress],\r\n      FirstName: this.privateClientForm?.form.value[PRIVATE_CLIENT_CONTROL_NAMES.FirstName],\r\n      LastName: this.privateClientForm?.form.value[PRIVATE_CLIENT_CONTROL_NAMES.LastName],\r\n      Name: this.form.value[CLIENT_CREATE_CONTROL_NAMES.Name],\r\n      TypeId: this.form.value[CLIENT_CREATE_CONTROL_NAMES.ClientType],\r\n    };\r\n\r\n    return client;\r\n  }\r\n}","export const CLIENT_CREATE_CONTROL_NAMES = {\r\n  ClientType: 'ClientTypeId',\r\n  Name: 'Name',\r\n}","import { AfterViewInit, Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { ConfirmationService, SelectItem } from \"primeng/api\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission.enum\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { ClientTypeEnum } from \"src/app/enums/client-type.enum\";\r\nimport { ClientDetailsModel } from \"src/app/interfaces/client\";\r\nimport { AddressComponent } from \"../../addresses/address/address.component\";\r\nimport { CompanyClientAddressComponent } from \"../../addresses/company-client-address/company-client-address.component\";\r\nimport { PrivateClientAddressComponent } from \"../../addresses/private-client-address/private-client-address.component\";\r\nimport { PrivateClientComponent } from \"../private-client/private-client.component\";\r\nimport { AccessControlForm } from \"../../abstract/forms/access-control-form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { Routes } from \"src/app/constants/routes.constants\";\r\nimport { CLIENT_DETAILS_CONTROL_NAMES } from \"./client-details.constants\";\r\nimport { ADDRESS_CONTROL_NAMES } from \"../../addresses/address/address.constants\";\r\nimport { ClientAddress, Country } from \"src/app/interfaces/address\";\r\nimport { PRIVATE_CLIENT_CONTROL_NAMES } from \"../private-client/private-client.constants\";\r\nimport { PRIVATE_CLIENT_ADDRESS_CONTROL_NAMES } from \"../../addresses/private-client-address/private-client-address.constants\";\r\nimport { COMPANY_CLIENT_ADDRESS_CONTROL_NAMES } from \"../../addresses/company-client-address/company-client-address.constants\";\r\n\r\n@Component({\r\n  selector: \"client-details\",\r\n  templateUrl: \"./client-details.component.html\"\r\n})\r\nexport class ClientDetailsComponent\r\n  extends AccessControlForm<ClientDetailsModel>\r\n  implements OnInit, AfterViewInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareClientDetailsModel;\r\n\r\n  protected override afterSubmitionCustomOperationsHandler = undefined;\r\n  protected override readonly deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n  protected override readonly entityId: string;\r\n\r\n  activeTab: number = 0;\r\n  client: ClientDetailsModel;\r\n  clientTypes: SelectItem[];\r\n  routes = Routes;\r\n\r\n  readonly clientAddressRequiredFields: string[] = [\r\n    ADDRESS_CONTROL_NAMES.ApartmentNumber,\r\n    ADDRESS_CONTROL_NAMES.City,\r\n    ADDRESS_CONTROL_NAMES.Country,\r\n    ADDRESS_CONTROL_NAMES.PostalCode,\r\n    ADDRESS_CONTROL_NAMES.StreetName,\r\n    ADDRESS_CONTROL_NAMES.StreetNumber\r\n  ];\r\n  readonly clientType: typeof ClientTypeEnum = ClientTypeEnum;\r\n\r\n  public override get shouldActionsBeDisabled(): boolean {\r\n    return super.shouldActionsBeDisabled ||\r\n      !this.client ||\r\n      (this.addressForm?.form.invalid ?? false) ||\r\n      (this.companyClientAddressForm?.form.invalid ?? false) ||\r\n      (this.privateClientAddressForm?.form.invalid ?? false) ||\r\n      (this.privateClientForm?.form.invalid ?? false);\r\n  }\r\n\r\n  @ViewChild('addressForm') addressForm: AddressComponent;\r\n  @ViewChild('companyClientAddressForm') companyClientAddressForm?: CompanyClientAddressComponent;\r\n  @ViewChild('privateClientAddressForm') privateClientAddressForm?: PrivateClientAddressComponent;\r\n  @ViewChild('privateClientForm') privateClientForm?: PrivateClientComponent;\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteClient',\r\n      ApiRoutes.client.delete,\r\n      dialogMessageService,\r\n      'Client',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      router,\r\n      ApiRoutes.client.put,\r\n      translate,\r\n      [UserPermissionEnum.Clients_CanModify],\r\n      Routes.clients.navigations.list);\r\n\r\n    this.createForm({\r\n      [CLIENT_DETAILS_CONTROL_NAMES.ClientType]: null,\r\n      [CLIENT_DETAILS_CONTROL_NAMES.Name]: ['', Validators.required]\r\n    });\r\n\r\n    this.loadClient();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const activeTab = this.activatedRoute.snapshot.params['activeTab'];\r\n    if (activeTab) {\r\n      this.switchActiveTab(Number(activeTab));\r\n    }\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.clients.navigations.list]);\r\n  }\r\n\r\n  public switchActiveTab(tabIndex: number) {\r\n    this.activeTab = tabIndex;\r\n  }\r\n\r\n  private getClientNationalId(): string {\r\n    switch (Number(this.form.value.ClientTypeId)) {\r\n      case ClientTypeEnum.Private:\r\n        return this.privateClientAddressForm?.form.value[PRIVATE_CLIENT_ADDRESS_CONTROL_NAMES.NationalCitizenId];\r\n      case ClientTypeEnum.Company:\r\n        return this.companyClientAddressForm?.form.value[COMPANY_CLIENT_ADDRESS_CONTROL_NAMES.NationalCompanyId];\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  private getEntityInstanceName(): string {\r\n    return this.client.Name;\r\n  }\r\n\r\n  private loadClient() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<ClientDetailsModel>(ApiRoutes.client.getById(this.entityId))\r\n      .subscribe(result => {\r\n        this.client = result;\r\n\r\n        this.updateForm({\r\n          [CLIENT_DETAILS_CONTROL_NAMES.ClientType]: this.client.TypeId.toString(),\r\n          [CLIENT_DETAILS_CONTROL_NAMES.Name]: this.client.Name,\r\n        });\r\n      });\r\n  }\r\n\r\n  private populateDropdowns() {\r\n    this.selectOptionsService\r\n      .getClientTypes()\r\n      .subscribe(options => {\r\n        this.clientTypes = options;\r\n      });\r\n  }\r\n\r\n  private prepareClientDetailsModel(): ClientDetailsModel {\r\n    const clientAddress = <ClientAddress>{\r\n      ApartmentNumber: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.ApartmentNumber],\r\n      City: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.City],\r\n      Country: <Country>{\r\n        Id: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.Country],\r\n      },\r\n      Email: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.Email],\r\n      Id: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.Id],\r\n      NationalId: this.getClientNationalId(),\r\n      PhoneNumber: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.PhoneNumber],\r\n      PostalCode: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.PostalCode],\r\n      StreetName: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.StreetName],\r\n      StreetNumber: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.StreetNumber],\r\n    };\r\n    const client = <ClientDetailsModel>{\r\n      Addresses: [clientAddress],\r\n      FirstName: this.privateClientForm?.form.value[PRIVATE_CLIENT_CONTROL_NAMES.FirstName],\r\n      Id: this.client.Id,\r\n      LastName: this.privateClientForm?.form.value[PRIVATE_CLIENT_CONTROL_NAMES.LastName],\r\n      Name: this.form.value[CLIENT_DETAILS_CONTROL_NAMES.Name],\r\n      TypeId: this.form.value[CLIENT_DETAILS_CONTROL_NAMES.ClientType]\r\n    };\r\n\r\n    return client;\r\n  }\r\n}","export const CLIENT_DETAILS_CONTROL_NAMES = {\r\n  ClientType: 'ClientTypeId',\r\n  Name: 'Name',\r\n}","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { AccessControlComponent } from '../../abstract/access-controls/access-control';\r\nimport { ConfirmationService, LazyLoadEvent, SelectItem } from 'primeng/api';\r\nimport { PngTableColumn } from 'src/app/interfaces/png';\r\nimport { Table } from 'primeng/table';\r\nimport { AuthorizationService } from 'src/app/services/authorization/authorization.service';\r\nimport { UserPermissionEnum } from 'src/app/enums/user-permission.enum';\r\nimport { ClientListItemModel, ClientListModel } from 'src/app/interfaces/client';\r\nimport { Router } from '@angular/router';\r\nimport { Routes } from 'src/app/constants/routes.constants';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ApiRoutes } from 'src/app/constants/api-routes.constants';\r\nimport { DialogMessageService } from 'src/app/services/messages/dialog-message.service';\r\nimport { ErrorService } from 'src/app/services/errors/error.service';\r\nimport { ConsoleMessageService } from 'src/app/services/messages/console-message.service';\r\nimport { SelectOptionsService } from 'src/app/services/select-options/select-options.service';\r\nimport { FilterService } from 'src/app/services/filters/filter.service';\r\nimport { FilterTypeEnum } from 'src/app/enums/filter-type.enum';\r\n\r\n@Component({\r\n  selector: \"client-list\",\r\n  templateUrl: \"./client-list.component.html\"\r\n})\r\nexport class ClientListComponent\r\n  extends AccessControlComponent<ClientListItemModel>\r\n  implements OnInit {\r\n\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n\r\n  private readonly _dataPopulator = {\r\n    multiSelects: {\r\n      clientTypes: {\r\n        get: () => this.getClientTypeMultiSelectData(),\r\n        set: (clientTypes: SelectItem[]) => this.setClientTypeMultiSelectData(clientTypes)\r\n      }\r\n    },\r\n    clients: {\r\n      get: (event: LazyLoadEvent) => this.getClients(event),\r\n      set: (clients: ClientListModel) => this.setClients(clients)\r\n    }\r\n  };\r\n\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  clients: ClientListItemModel[];\r\n  clientTypeOptions: SelectItem[];\r\n  cols: PngTableColumn[];\r\n  totalRecords: number;\r\n\r\n  @ViewChild('dataTable') dataTable: Table;\r\n\r\n  constructor(\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    public readonly filterService: FilterService,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionService: SelectOptionsService,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteClient',\r\n      ApiRoutes.client.delete,\r\n      dialogMessageService,\r\n      'Client',\r\n      errorService,\r\n      httpClient,\r\n      () => {\r\n        this._dataPopulator.clients\r\n          .get(this.tempLazyLoadEvent)\r\n          .subscribe(result => this._dataPopulator.clients.set(result));\r\n      },\r\n      router,\r\n      translate,\r\n      [UserPermissionEnum.Clients_CanModify]);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cols = [\r\n      <PngTableColumn>{\r\n        field: 'Name',\r\n        header: 'Client.Name',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true,\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'FirstName',\r\n        header: 'Client.FirstName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'LastName',\r\n        header: 'Client.LastName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'TypeName',\r\n        header: 'Client.TypeName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true,\r\n        replaceWith: 'ClientTypeId'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Actions',\r\n        header: '',\r\n        width: '20%'\r\n      }\r\n    ];\r\n\r\n    this._dataPopulator.multiSelects.clientTypes\r\n      .get()\r\n      .subscribe(clientTypes => this._dataPopulator.multiSelects.clientTypes.set(clientTypes));\r\n  }\r\n\r\n  public loadClientsLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n\r\n    this._dataPopulator.clients\r\n      .get(event)\r\n      .subscribe(result => this._dataPopulator.clients.set(result));\r\n  }\r\n\r\n  public onCreate() {\r\n    this.router.navigate([Routes.clients.navigations.creation]);\r\n  }\r\n\r\n  public onEdit(client: ClientListItemModel) {\r\n    this.router.navigate([Routes.clients.navigations.edition(client.Id)]);\r\n  }\r\n\r\n  private getClients(event: LazyLoadEvent) {\r\n    event.sortField ??= this.cols[0].field;\r\n\r\n    return this.httpClient\r\n      .get<ClientListModel>(ApiRoutes.client.getAll(event, this.cols));\r\n  }\r\n\r\n  private getClientTypeMultiSelectData() {\r\n    return this.selectOptionService.getClientTypes();\r\n  }\r\n\r\n  private getEntityInstanceName(client: ClientListItemModel): string {\r\n    return client.Name;\r\n  }\r\n\r\n  private setClientTypeMultiSelectData(clientTypes: SelectItem[]) {\r\n    this.clientTypeOptions = clientTypes;\r\n\r\n    const clientTypeColumn = this.cols.find(c => c.field === \"TypeName\");\r\n    if (clientTypeColumn) {\r\n      clientTypeColumn.options = this.clientTypeOptions;\r\n    }\r\n  }\r\n\r\n  private setClients(clients: ClientListModel) {\r\n    this.totalRecords = clients.TotalRowsCount;\r\n    this.clients = clients.List;\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { SimpleFormComponent } from \"../../abstract/forms/simple-form\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ClientDetailsModel } from \"src/app/interfaces/client\";\r\nimport { PRIVATE_CLIENT_CONTROL_NAMES } from \"./private-client.constants\";\r\n\r\n@Component({\r\n  selector: \"private-client\",\r\n  templateUrl: \"./private-client.component.html\"\r\n})\r\nexport class PrivateClientComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  @Input('client') client?: ClientDetailsModel;\r\n\r\n  constructor(\r\n    protected override formBuilder: FormBuilder,\r\n    public translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n    this.createForm({\r\n      [PRIVATE_CLIENT_CONTROL_NAMES.FirstName]: ['', Validators.required],\r\n      [PRIVATE_CLIENT_CONTROL_NAMES.LastName]: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.client) {\r\n      this.updateForm({\r\n        [PRIVATE_CLIENT_CONTROL_NAMES.FirstName]: this.client.FirstName,\r\n        [PRIVATE_CLIENT_CONTROL_NAMES.LastName]: this.client.LastName\r\n      });\r\n    }\r\n  }\r\n}","export const PRIVATE_CLIENT_CONTROL_NAMES = {\r\n  FirstName: 'FirstName',\r\n  LastName: 'LastName',\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\n\r\n@Component({\r\n  selector: \"deletion-dialog\",\r\n  templateUrl: \"./deletion-dialog.component.html\"\r\n})\r\nexport class DeletionDialogComponent\r\n  implements OnInit {\r\n\r\n  @Input('deletionKey') deletionKey?: string;\r\n\r\n  constructor(\r\n    public translate: TranslateService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n}","import { Component, OnInit } from \"@angular/core\";\r\nimport { Form } from \"../../abstract/forms/form\";\r\nimport { EquipmentCreationModel } from \"src/app/interfaces/equipment\";\r\nimport { SelectItem } from \"primeng/api\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Router } from \"@angular/router\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { Routes } from \"src/app/constants/routes.constants\";\r\nimport { RegexPatterns } from \"src/app/tools/regexPatterns\";\r\nimport { EQUIPMENT_CREATE_CONTROL_NAMES } from \"./equipment.constants\";\r\n\r\n@Component({\r\n  selector: \"equipment-create\",\r\n  templateUrl: \"./equipment-create.component.html\"\r\n})\r\nexport class EquipmentCreationComponent\r\n  extends Form<EquipmentCreationModel>\r\n  implements OnInit {\r\n\r\n  public override beforeSubmitionCustomOperationsHandler = this.prepareEquipmentCreationModel;\r\n\r\n  manufacturers: SelectItem[];\r\n  types: SelectItem[];\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'Equipment',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Creation,\r\n      router,\r\n      ApiRoutes.equipment.post,\r\n      translate,\r\n      Routes.equipments.navigations.list\r\n    );\r\n\r\n    this.createForm({\r\n      [EQUIPMENT_CREATE_CONTROL_NAMES.Description]: null,\r\n      [EQUIPMENT_CREATE_CONTROL_NAMES.Manufacturer]: null,\r\n      [EQUIPMENT_CREATE_CONTROL_NAMES.MarketValue]: ['', Validators.pattern(RegexPatterns.decimalNumber)],\r\n      [EQUIPMENT_CREATE_CONTROL_NAMES.Name]: ['', Validators.required],\r\n      [EQUIPMENT_CREATE_CONTROL_NAMES.PricePerDay]: ['', Validators.pattern(RegexPatterns.decimalNumber)],\r\n      [EQUIPMENT_CREATE_CONTROL_NAMES.SerialNumber]: ['', Validators.required],\r\n      [EQUIPMENT_CREATE_CONTROL_NAMES.Type]: null\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.equipments.navigations.list]);\r\n  }\r\n\r\n  private populateDropdowns() {\r\n\r\n    this.selectOptionsService\r\n      .getManufacturers()\r\n      .subscribe(options => {\r\n        this.manufacturers = options;\r\n      });\r\n\r\n    this.selectOptionsService\r\n      .getEquipmentTypes()\r\n      .subscribe(options => {\r\n        this.types = options;\r\n      });\r\n  }\r\n\r\n  private prepareEquipmentCreationModel(): EquipmentCreationModel {\r\n    const equipment = <EquipmentCreationModel>{\r\n      Description: this.form.value[EQUIPMENT_CREATE_CONTROL_NAMES.Description],\r\n      ManufacturerId: this.form.value[EQUIPMENT_CREATE_CONTROL_NAMES.Manufacturer],\r\n      MarketValue: this.form.value[EQUIPMENT_CREATE_CONTROL_NAMES.MarketValue].replace(/\\s/g, '').replace(',', '.'),\r\n      Name: this.form.value[EQUIPMENT_CREATE_CONTROL_NAMES.Name],\r\n      PricePerDay: this.form.value[EQUIPMENT_CREATE_CONTROL_NAMES.PricePerDay].replace(/\\s/g, '').replace(',', '.'),\r\n      SerialNumber: this.form.value[EQUIPMENT_CREATE_CONTROL_NAMES.SerialNumber],\r\n      TypeId: this.form.value[EQUIPMENT_CREATE_CONTROL_NAMES.Type]\r\n    };\r\n\r\n    return equipment;\r\n  }\r\n}","export const EQUIPMENT_CREATE_CONTROL_NAMES = {\r\n  Description: 'Description',\r\n  Manufacturer: 'ManufacturerId',\r\n  MarketValue: 'MarketValue',\r\n  Name: 'Name',\r\n  PricePerDay: 'PricePerDay',\r\n  SerialNumber: 'SerialNumber',\r\n  Type: 'TypeId',\r\n}","import { Component, OnInit } from \"@angular/core\";\r\nimport { AccessControlForm } from \"../../abstract/forms/access-control-form\";\r\nimport { EquipmentDetailsModel } from \"src/app/interfaces/equipment\";\r\nimport { ConfirmationService, SelectItem } from \"primeng/api\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission.enum\";\r\nimport { Routes } from \"src/app/constants/routes.constants\";\r\nimport { RegexPatterns } from \"src/app/tools/regexPatterns\";\r\nimport { StringBuilder } from \"src/app/tools/stringBuilder\";\r\nimport { formatNumber } from \"@angular/common\";\r\nimport { ImageService } from \"src/app/services/images/image.service\";\r\nimport { EQUIPMENT_DETAILS_CONTROL_NAMES } from \"./equipment-details.constants\";\r\n\r\n@Component({\r\n  selector: \"equipment-details\",\r\n  templateUrl: \"./equipment-details.component.html\"\r\n})\r\nexport class EquipmentDetailsComponent\r\n  extends AccessControlForm<EquipmentDetailsModel>\r\n  implements OnInit {\r\n\r\n  public override beforeSubmitionCustomOperationsHandler = this.prepareEquipmentDetailsModel;\r\n\r\n  protected override afterSubmitionCustomOperationsHandler = undefined;\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n  protected override entityId: string;\r\n\r\n  equipment: EquipmentDetailsModel;\r\n  manufacturers: SelectItem[];\r\n  types: SelectItem[];\r\n\r\n  public override get shouldActionsBeDisabled(): boolean {\r\n    return super.shouldActionsBeDisabled ||\r\n      !this.equipment;\r\n  }\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    private readonly imageService: ImageService,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteEquipment',\r\n      ApiRoutes.equipment.delete,\r\n      dialogMessageService,\r\n      'Equipment',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      router,\r\n      ApiRoutes.user.put,\r\n      translate,\r\n      [UserPermissionEnum.Equipments_CanModify],\r\n      Routes.equipments.navigations.list\r\n    );\r\n\r\n    this.createForm({\r\n      [EQUIPMENT_DETAILS_CONTROL_NAMES.Description]: null,\r\n      [EQUIPMENT_DETAILS_CONTROL_NAMES.Manufacturer]: null,\r\n      [EQUIPMENT_DETAILS_CONTROL_NAMES.MarketValue]: ['', Validators.pattern(RegexPatterns.decimalNumber)],\r\n      [EQUIPMENT_DETAILS_CONTROL_NAMES.Name]: ['', Validators.required],\r\n      [EQUIPMENT_DETAILS_CONTROL_NAMES.PricePerDay]: ['', Validators.pattern(RegexPatterns.decimalNumber)],\r\n      [EQUIPMENT_DETAILS_CONTROL_NAMES.SerialNumber]: ['', Validators.required],\r\n      [EQUIPMENT_DETAILS_CONTROL_NAMES.Type]: null\r\n    });\r\n\r\n    this.loadEquipment();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.equipments.navigations.list]);\r\n  }\r\n\r\n  private getEntityInstanceName(): string {\r\n    return new StringBuilder(this.equipment.Name)\r\n      .append(' ')\r\n      .append(this.equipment.SerialNumber)\r\n      .toString();\r\n  }\r\n\r\n  private loadEquipment() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<EquipmentDetailsModel>(ApiRoutes.equipment.getById(this.entityId))\r\n      .subscribe(result => {\r\n        this.equipment = result;\r\n\r\n        for (const photo of this.equipment.Photos.filter(photo => photo.ThumbnailFile !== undefined)) {\r\n          photo.ThumbnailUrl = this.imageService.getImageUrlForEncodedFile(photo.ThumbnailFile)!;\r\n        }\r\n\r\n        this.updateForm({\r\n          [EQUIPMENT_DETAILS_CONTROL_NAMES.Description]: this.equipment.Description,\r\n          [EQUIPMENT_DETAILS_CONTROL_NAMES.Manufacturer]: this.equipment.ManufacturerId,\r\n          [EQUIPMENT_DETAILS_CONTROL_NAMES.MarketValue]: formatNumber(this.equipment.MarketValue, this.translate.getDefaultLang(), '1.2-2'),\r\n          [EQUIPMENT_DETAILS_CONTROL_NAMES.Name]: this.equipment.Name,\r\n          [EQUIPMENT_DETAILS_CONTROL_NAMES.PricePerDay]: formatNumber(this.equipment.PricePerDay, this.translate.getDefaultLang(), '1.2-2'),\r\n          [EQUIPMENT_DETAILS_CONTROL_NAMES.SerialNumber]: this.equipment.SerialNumber,\r\n          [EQUIPMENT_DETAILS_CONTROL_NAMES.Type]: this.equipment.TypeId.toString()\r\n        });\r\n      });\r\n  }\r\n\r\n  private populateDropdowns() {\r\n    this.selectOptionsService\r\n      .getManufacturers()\r\n      .subscribe(options => {\r\n        this.manufacturers = options;\r\n      });\r\n\r\n    this.selectOptionsService\r\n      .getEquipmentTypes()\r\n      .subscribe(options => {\r\n        this.types = options;\r\n      });\r\n  }\r\n\r\n  private prepareEquipmentDetailsModel(): EquipmentDetailsModel {\r\n    const equipment = <EquipmentDetailsModel>{\r\n      Description: this.form.value[EQUIPMENT_DETAILS_CONTROL_NAMES.Description],\r\n      ManufacturerId: this.form.value[EQUIPMENT_DETAILS_CONTROL_NAMES.Manufacturer],\r\n      MarketValue: this.form.value[EQUIPMENT_DETAILS_CONTROL_NAMES.MarketValue].replace(/\\s/g, '').replace(',', '.'),\r\n      Name: this.form.value[EQUIPMENT_DETAILS_CONTROL_NAMES.Name],\r\n      PricePerDay: this.form.value[EQUIPMENT_DETAILS_CONTROL_NAMES.PricePerDay].replace(/\\s/g, '').replace(',', '.'),\r\n      SerialNumber: this.form.value[EQUIPMENT_DETAILS_CONTROL_NAMES.SerialNumber],\r\n      TypeId: this.form.value[EQUIPMENT_DETAILS_CONTROL_NAMES.Type]\r\n    };\r\n\r\n    return equipment;\r\n  }\r\n}","export const EQUIPMENT_DETAILS_CONTROL_NAMES = {\r\n  Description: 'Description',\r\n  Manufacturer: 'ManufacturerId',\r\n  MarketValue: 'MarketValue',\r\n  Name: 'Name',\r\n  PricePerDay: 'PricePerDay',\r\n  SerialNumber: 'SerialNumber',\r\n  Type: 'TypeId',\r\n};","import { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { AccessControlComponent } from \"../../abstract/access-controls/access-control\";\r\nimport { EquipmentListItemModel, EquipmentListModel } from \"src/app/interfaces/equipment\";\r\nimport { ConfirmationService, LazyLoadEvent, SelectItem } from \"primeng/api\";\r\nimport { PngTableColumn } from \"src/app/interfaces/png\";\r\nimport { Table } from \"primeng/table\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission.enum\";\r\nimport { FilterTypeEnum } from \"src/app/enums/filter-type.enum\";\r\nimport { Routes } from \"src/app/constants/routes.constants\";\r\nimport { StringBuilder } from \"src/app/tools/stringBuilder\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { FilterService } from \"src/app/services/filters/filter.service\";\r\n\r\n@Component({\r\n  selector: \"equipment-list\",\r\n  templateUrl: \"./equipment-list.component.html\"\r\n})\r\nexport class EquipmentListComponent\r\n  extends AccessControlComponent<EquipmentListItemModel>\r\n  implements OnInit {\r\n\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n\r\n  private readonly _dataPopulator = {\r\n    multiSelects: {\r\n      manufacturers: {\r\n        get: () => this.getManufacturerMultiSelectData(),\r\n        set: (manufacturers: SelectItem[]) => this.setManufacturerMultiSelectData(manufacturers)\r\n      },\r\n      types: {\r\n        get: () => this.getTypeMultiSelectData(),\r\n        set: (types: SelectItem[]) => this.setTypeMultiSelectData(types)\r\n      }\r\n    },\r\n    equipments: {\r\n      get: (event: LazyLoadEvent) => this.getEquipments(event),\r\n      set: (equipments: EquipmentListModel) => this.setEquipments(equipments)\r\n    }\r\n  };\r\n\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  cols: PngTableColumn[];\r\n  equipments: EquipmentListItemModel[];\r\n  manufacturerOptions: SelectItem[];\r\n  totalRecords: number;\r\n  typeOptions: SelectItem[];\r\n\r\n  @ViewChild('dataTable') dataTable: Table;\r\n\r\n  constructor(\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    public readonly filterService: FilterService,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteManufacturer',\r\n      ApiRoutes.equipment.delete,\r\n      dialogMessageService,\r\n      'Equipment',\r\n      errorService,\r\n      httpClient,\r\n      () => {\r\n        this._dataPopulator.equipments\r\n          .get(this.tempLazyLoadEvent)\r\n          .subscribe(result => this._dataPopulator.equipments.set(result));\r\n      },\r\n      router,\r\n      translate,\r\n      [UserPermissionEnum.Equipments_CanModify]);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cols = [\r\n      <PngTableColumn>{\r\n        field: 'Name',\r\n        header: 'Equipment.Name',\r\n        width: '10%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'ManufacturerName',\r\n        header: 'Equipment.ManufacturerName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true,\r\n        replaceWith: 'ManufacturerId'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'SerialNumber',\r\n        header: 'Equipment.SerialNumber',\r\n        width: '10%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'TypeName',\r\n        header: 'Equipment.TypeName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true,\r\n        replaceWith: 'TypeId'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Actions',\r\n        header: '',\r\n        width: '20%'\r\n      }\r\n    ];\r\n\r\n    this._dataPopulator.multiSelects.manufacturers\r\n      .get()\r\n      .subscribe(manufacturers => this._dataPopulator.multiSelects.manufacturers.set(manufacturers));\r\n\r\n    this._dataPopulator.multiSelects.types\r\n      .get()\r\n      .subscribe(types => this._dataPopulator.multiSelects.types.set(types));\r\n  }\r\n\r\n  public loadEquipmentsLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n    this._dataPopulator.equipments\r\n      .get(event)\r\n      .subscribe(result => this._dataPopulator.equipments.set(result));\r\n  }\r\n\r\n  public onCreate() {\r\n    this.router.navigate([Routes.equipments.navigations.creation]);\r\n  }\r\n\r\n  public onEdit(equipment: EquipmentListItemModel) {\r\n    this.router.navigate([Routes.equipments.navigations.edition(equipment.Id)]);\r\n  }\r\n\r\n  private getEntityInstanceName(equipment: EquipmentListItemModel): string {\r\n    return new StringBuilder(equipment.Name)\r\n      .append(' ')\r\n      .append(equipment.SerialNumber)\r\n      .toString();\r\n  }\r\n\r\n  private getManufacturerMultiSelectData() {\r\n    return this.selectOptionsService.getManufacturers();\r\n  }\r\n\r\n  private getEquipments(event: LazyLoadEvent) {\r\n    event.sortField ??= this.cols[0]?.field;\r\n\r\n    return this.httpClient\r\n      .get<EquipmentListModel>(ApiRoutes.equipment.getAll(event, this.cols));\r\n  }\r\n\r\n  private getTypeMultiSelectData() {\r\n    return this.selectOptionsService.getEquipmentTypes();\r\n  }\r\n\r\n  private setManufacturerMultiSelectData(manufacturers: SelectItem[]) {\r\n    this.manufacturerOptions = manufacturers;\r\n\r\n    const manufacturerColumn = this.cols.find(c => c.field === \"ManufacturerName\");\r\n    if (manufacturerColumn) {\r\n      manufacturerColumn.options = this.manufacturerOptions;\r\n    }\r\n  }\r\n\r\n  private setEquipments(equipments: EquipmentListModel) {\r\n    this.totalRecords = equipments.TotalRowsCount;\r\n    this.equipments = equipments.List;\r\n  }\r\n\r\n  private setTypeMultiSelectData(types: SelectItem[]) {\r\n    this.typeOptions = types;\r\n\r\n    const typeColumn = this.cols.find(c => c.field === \"TypeName\");\r\n    if (typeColumn) {\r\n      typeColumn.options = this.typeOptions;\r\n    }\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, Input, OnInit, ViewChild } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { EquipmentPhoto } from \"src/app/interfaces/equipment\";\r\nimport { SimpleFileModel } from \"src/app/interfaces/file\";\r\nimport { ImageService } from \"src/app/services/images/image.service\";\r\nimport { FileUploadEvent } from \"src/app/tools/events/file-upload-event\";\r\nimport { PrimeNgHelper } from \"src/app/tools/primeNgHelper\";\r\nimport { EquipmentPhotoUploaderFactory } from \"./uploaders/equipment-photo-uploader-factory\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { FileService } from \"src/app/services/files/file.service\";\r\nimport { FileUpload } from \"primeng/fileupload\";\r\n\r\n@Component({\r\n  selector: 'equipment-photos',\r\n  templateUrl: 'equipment-photos.component.html'\r\n})\r\nexport class EquipmentPhotosComponent\r\n  implements OnInit {\r\n\r\n  get activeIndex(): number {\r\n    return this._activeIndex;\r\n  }\r\n\r\n  set activeIndex(newValue) {\r\n    if (this.equipmentPhotos && 0 <= newValue && newValue <= this.equipmentPhotos.length - 1) {\r\n      this._activeIndex = newValue;\r\n    }\r\n  }\r\n\r\n  _activeIndex: number = 0;\r\n\r\n  equipmentPhotos: EquipmentPhoto[] = [];\r\n  galleriaResponsiveOptions: any[] = PrimeNgHelper.galleriaResponsiveOptions;\r\n\r\n  @Input() equipmentId?: string;\r\n  @Input() sourcePhotos: EquipmentPhoto[] = [];\r\n\r\n  @ViewChild('equipmentPhotoUpload') equipmentPhotoUpload: FileUpload;\r\n\r\n  constructor(\r\n    private readonly fileService: FileService,\r\n    private readonly httpClient: HttpClient,\r\n    private readonly imageService: ImageService,\r\n    public readonly translate: TranslateService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!this.sourcePhotos)\r\n      return;\r\n\r\n    for (const photo of this.sourcePhotos) {\r\n      this.equipmentPhotos.push(photo);\r\n    }\r\n  }\r\n\r\n  public async equipmentPhotoUploadAsync(event: FileUploadEvent) {\r\n    const uploader = new EquipmentPhotoUploaderFactory(this.fileService, this.httpClient, this.imageService, this.equipmentId)\r\n      .makeUploader(!this.equipmentId ? FormModeEnum.Creation : FormModeEnum.Edition);\r\n\r\n    const uploadedEquipmentPhotos: EquipmentPhoto[] = [];\r\n    await uploader.uploadToPhotosAsync(event.files, uploadedEquipmentPhotos);\r\n    uploadedEquipmentPhotos.splice(0, 0, ...this.equipmentPhotos);\r\n\r\n    this.equipmentPhotos = [...uploadedEquipmentPhotos];\r\n    this.activeIndex = this.equipmentPhotos.length - 1;\r\n    this.equipmentPhotoUpload.clear();\r\n  }\r\n\r\n  public getEquipmentPhotoSource(item: EquipmentPhoto) {\r\n    if (!this.equipmentId)\r\n      return;\r\n\r\n    const equipmentPhoto = this.equipmentPhotos.find(p => p.Id === item.Id);\r\n    if (!equipmentPhoto || equipmentPhoto.IsBeingDownloaded)\r\n      return;\r\n\r\n    equipmentPhoto.IsBeingDownloaded = true;\r\n    this.httpClient\r\n      .get<SimpleFileModel>(ApiRoutes.equipment.file.photo.download(equipmentPhoto.Id!))\r\n      .subscribe({\r\n        next: async result => {\r\n          if (result && result.File !== undefined && result.File !== null) {\r\n            equipmentPhoto.SourceUrl = this.imageService.getImageUrlForEncodedFile(result.File);\r\n          }\r\n          else {\r\n            equipmentPhoto.SourceUrl = await this.imageService.getNotFoundImageUrlAsync();\r\n          }\r\n\r\n          equipmentPhoto.IsBeingDownloaded = false;\r\n        },\r\n        error: async () => {\r\n          equipmentPhoto.SourceUrl = await this.imageService.getNotFoundImageUrlAsync();\r\n          equipmentPhoto.IsBeingDownloaded = false;\r\n        }\r\n      });\r\n  }\r\n}","import { EquipmentPhoto } from \"src/app/interfaces/equipment\";\r\nimport { EquipmentPhotoUploader } from \"./equipment-photo-uploader\";\r\nimport { FileService } from \"src/app/services/files/file.service\";\r\nimport { ImageService } from \"src/app/services/images/image.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { lastValueFrom } from \"rxjs\";\r\nimport { SimpleFileModel } from \"src/app/interfaces/file\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\n\r\nexport class EquipmentPhotoOnCreationUploader extends EquipmentPhotoUploader {\r\n\r\n  constructor(\r\n    private readonly fileService: FileService,\r\n    private readonly httpClient: HttpClient,\r\n    private readonly imageService: ImageService,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public override async uploadToPhotosAsync(files: File[], photos: EquipmentPhoto[]) {\r\n    for (const file of files) {\r\n      const fileArrayBuffer = await this.fileService.getArrayBuffer(file);\r\n      if (!fileArrayBuffer) {\r\n        return;\r\n      }\r\n\r\n      const encodedFile = this.fileService.convertFileToBase64String(fileArrayBuffer);\r\n      const thumbnail = await lastValueFrom(this.httpClient.post<SimpleFileModel>(\r\n        ApiRoutes.equipment.file.photo.makeThumbnailForFile,\r\n        <SimpleFileModel>{\r\n          File: encodedFile,\r\n          FileName: file.name,\r\n        }));\r\n\r\n      photos.push(<EquipmentPhoto>{\r\n        File: encodedFile,\r\n        FileName: file.name,\r\n        SourceUrl: this.imageService.getImageUrlForEncodedFile(encodedFile),\r\n        ThumbnailUrl: this.imageService.getImageUrlForEncodedFile(thumbnail.File),\r\n        ThumbnailFile: thumbnail.File\r\n      });\r\n    }\r\n  }\r\n}","import { EquipmentPhoto, EquipmentPhotoBase, EquipmentPhotosUploadRequest, EquipmentPhotosUploadResponse } from \"src/app/interfaces/equipment\";\r\nimport { EquipmentPhotoUploader } from \"./equipment-photo-uploader\";\r\nimport { FileService } from \"src/app/services/files/file.service\";\r\nimport { ImageService } from \"src/app/services/images/image.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { lastValueFrom } from \"rxjs\";\r\n\r\nexport class EquipmentPhotoOnEditionUploader extends EquipmentPhotoUploader {\r\n\r\n  constructor(\r\n    private readonly equipmentId: string,\r\n    private readonly fileService: FileService,\r\n    private readonly httpClient: HttpClient,\r\n    private readonly imageService: ImageService,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public override async uploadToPhotosAsync(files: File[], photos: EquipmentPhoto[]) {\r\n    for (const file of files) {\r\n      const fileArrayBuffer = await this.fileService.getArrayBuffer(file);\r\n      if (!fileArrayBuffer) {\r\n        return;\r\n      }\r\n\r\n      const encodedFile = this.fileService.convertFileToBase64String(fileArrayBuffer);\r\n      photos.push(<EquipmentPhoto>{\r\n        File: encodedFile,\r\n        FileName: file.name,\r\n        SourceUrl: this.imageService.getImageUrlForEncodedFile(encodedFile)\r\n      });\r\n    }\r\n\r\n    await this.UploadPhotosToApiAsync(photos);\r\n  }\r\n\r\n  private async UploadPhotosToApiAsync(photos: EquipmentPhoto[]) {\r\n    const photosToUploadToApi = photos\r\n      .filter(photo => photo.Id === undefined)\r\n      .map(photo => <EquipmentPhotoBase>{\r\n        File: photo.File,\r\n        FileName: photo.FileName,\r\n        Id: photo.Id,\r\n      });\r\n\r\n    const request = <EquipmentPhotosUploadRequest>{\r\n      EquipmentId: this.equipmentId,\r\n      Photos: photosToUploadToApi\r\n    };\r\n\r\n    const result = await lastValueFrom(this.httpClient\r\n      .post<EquipmentPhotosUploadResponse>(ApiRoutes.equipment.file.photo.upload.multiple, request));\r\n\r\n    for (const uploadedPhoto of result.UploadedPhotos) {\r\n      const photo = photos.find(p => p.FileName === uploadedPhoto.FileName && !p.Id);\r\n      if (photo) {\r\n        photo.Id = uploadedPhoto.Id;\r\n        if (uploadedPhoto.ThumbnailFile) {\r\n          photo.ThumbnailFile = uploadedPhoto.ThumbnailFile;\r\n          photo.ThumbnailUrl = this.imageService.getImageUrlForEncodedFile(photo.ThumbnailFile)!;\r\n        }\r\n      }\r\n    }\r\n\r\n    photos = photos.filter(photo => photo.Id);\r\n  }\r\n}","import { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { EquipmentPhotoUploader } from \"./equipment-photo-uploader\";\r\nimport { EquipmentPhotoOnCreationUploader } from \"./equipment-photo-on-creation-uploader\";\r\nimport { EquipmentPhotoOnEditionUploader } from \"./equipment-photo-on-edition-uploader\";\r\nimport { FileService } from \"src/app/services/files/file.service\";\r\nimport { ImageService } from \"src/app/services/images/image.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nexport class EquipmentPhotoUploaderFactory {\r\n\r\n  constructor(\r\n    private readonly fileService: FileService,\r\n    private readonly httpClient: HttpClient,\r\n    private readonly imageService: ImageService,\r\n    private readonly equipmentId?: string,\r\n  ) {\r\n  }\r\n\r\n  public makeUploader(formMode: FormModeEnum) {\r\n\r\n    let uploader: EquipmentPhotoUploader;\r\n\r\n    switch (formMode) {\r\n      case FormModeEnum.Creation:\r\n        uploader = new EquipmentPhotoOnCreationUploader(this.fileService, this.httpClient, this.imageService);\r\n        break;\r\n\r\n      case FormModeEnum.Edition:\r\n        uploader = new EquipmentPhotoOnEditionUploader(this.equipmentId!, this.fileService, this.httpClient, this.imageService);\r\n        break;\r\n\r\n      default:\r\n        throw new Error(`[${this.constructor.name}] Unsupported form mode.`);\r\n    }\r\n\r\n    return uploader;\r\n  }\r\n}","import { EquipmentPhoto } from \"src/app/interfaces/equipment\";\r\n\r\nexport abstract class EquipmentPhotoUploader {\r\n  public abstract uploadToPhotosAsync(files: File[], photos: EquipmentPhoto[]): Promise<void>;\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { Router } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { SelectItem } from 'primeng/api';\r\nimport { AppComponent } from 'src/app/app.component';\r\nimport { LanguageCodeEnum } from 'src/app/enums/language-code.enum';\r\nimport { SignInModel } from 'src/app/interfaces/authentication';\r\nimport { AuthenticationService } from 'src/app/services/authentication/authentication.service';\r\nimport { ErrorService } from 'src/app/services/errors/error.service';\r\nimport { DialogMessageService } from 'src/app/services/messages/dialog-message.service';\r\nimport { SelectOptionsService } from 'src/app/services/select-options/select-options.service';\r\nimport { ApiResultEnum } from 'src/app/enums/api-result.enum';\r\nimport { Routes } from 'src/app/constants/routes.constants';\r\nimport { SimpleFormComponent } from '../../abstract/forms/simple-form';\r\nimport { LOGIN_CONTROL_NAMES } from './login.constants';\r\nimport { LOCAL_STORAGE_PROPERTIES } from 'src/app/constants/local-storage.constants';\r\n\r\n@Component({\r\n  selector: \"login\",\r\n  templateUrl: \"./login.component.html\"\r\n})\r\nexport class LoginComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  languageId: number;\r\n  languages: SelectItem[];\r\n\r\n  constructor(\r\n    private readonly app: AppComponent,\r\n    private readonly authenticationService: AuthenticationService,\r\n    private readonly dialogMessageService: DialogMessageService,\r\n    private readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    private readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    private readonly titleService: Title,\r\n    public readonly translate: TranslateService) {\r\n\r\n    super(formBuilder);\r\n\r\n    this.translate.setDefaultLang('pl');\r\n    this.titleService.setTitle(translate.instant('AppName'));\r\n\r\n    this.createForm({\r\n      [LOGIN_CONTROL_NAMES.Login]: ['', Validators.required],\r\n      [LOGIN_CONTROL_NAMES.Password]: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.selectOptionsService\r\n      .getLanguages()\r\n      .subscribe(options => {\r\n        this.languages = options;\r\n        const languageIdFromStorage = localStorage.getItem(LOCAL_STORAGE_PROPERTIES.LanguageId);\r\n        if (languageIdFromStorage) {\r\n          this.languageId = Number(languageIdFromStorage);\r\n          this.setLanguage(this.languageId);\r\n        }\r\n      });\r\n  }\r\n\r\n  public onSubmit() {\r\n    if (!this.form.value.Login) {\r\n      this.dialogMessageService.addError(this.errorService.getDefaultErrorMessage());\r\n      return;\r\n    }\r\n\r\n    const data = <SignInModel>{\r\n      Login: this.form.value[LOGIN_CONTROL_NAMES.Login],\r\n      Password: this.form.value[LOGIN_CONTROL_NAMES.Password],\r\n    };\r\n\r\n    this.authenticationService\r\n      .login(data)\r\n      .subscribe(result => {\r\n        switch (result) {\r\n          case ApiResultEnum[ApiResultEnum.OK]:\r\n            this.app.isUserLoggedIn = true;\r\n            this.authenticationService.isFirstTimeLoggedIn = true;\r\n            this.router.navigate([Routes.home.navigations.default]);\r\n            break;\r\n\r\n          case ApiResultEnum[ApiResultEnum.NotActive]:\r\n            this.dialogMessageService.addError(this.translate.instant('Messages.AccountNotActive'));\r\n            this.dialogMessageService.addError(this.translate.instant('Messages.PleaseContactAdmin'));\r\n            break;\r\n\r\n          default:\r\n            this.dialogMessageService.addError(this.translate.instant('Messages.InvalidLoginData'));\r\n            break;\r\n        }\r\n      });\r\n  }\r\n\r\n  private getLanguageCodeById(id: number) {\r\n    switch (id) {\r\n      case LanguageCodeEnum.Pl.valueOf():\r\n        return \"pl\";\r\n      case LanguageCodeEnum.En.valueOf():\r\n        return \"en\";\r\n      default:\r\n        return \"---\";\r\n    }\r\n  }\r\n\r\n  private setLanguage(languageId: number) {\r\n    const lang = this.getLanguageCodeById(languageId);\r\n\r\n    this.translate.use(lang).subscribe(() => {\r\n      this.titleService.setTitle(this.translate.instant('AppName'));\r\n    });\r\n  }\r\n}","export const LOGIN_CONTROL_NAMES = {\r\n  Login: 'Login',\r\n  Password: 'Password',\r\n};","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { MessageService } from 'primeng/api';\r\nimport { ErrorService } from 'src/app/services/errors/error.service';\r\nimport { SimpleFormComponent } from '../../abstract/forms/simple-form';\r\n\r\n@Component({\r\n  selector: \"login-reset-password\",\r\n  templateUrl: \"./login-reset-password.component.html\"\r\n})\r\nexport class LoginResetPasswordComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  token: string;\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private errorService: ErrorService,\r\n    protected override formBuilder: FormBuilder,\r\n    public dialogMessageService: MessageService,\r\n    public translate: TranslateService) {\r\n\r\n    super(formBuilder);\r\n\r\n    this.activatedRoute.queryParams.subscribe(params => {\r\n      this.token = params['token'];\r\n\r\n      this.createForm({\r\n        Email: ['', Validators.required]\r\n      });\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public onSubmit() {\r\n    if (!this.form.value.Email) {\r\n      this.dialogMessageService.add({ severity: 'error', summary: this.errorService.getDefaultErrorMessage(), detail: this.translate.instant('Messages.EnterEmailFirst') });\r\n      return;\r\n    }\r\n\r\n    // const model = <ResetPasswordModel>{\r\n    //   Email: this.form.value.Email,\r\n    //   Language: this.translate.currentLang\r\n    // };\r\n\r\n    //[TODO]\r\n    // this.http.put<string>(ApiRoutes.identity.resetPassword, model).subscribe(result => {\r\n    //   if (result == \"OK\") {\r\n    //     this.messageService.add({ key: 'tst', severity: 'success', summary: this.translate.instant('Messages.EmailWithPasswordResetInstructionsSent') });\r\n    //   }\r\n    //   else if (result == \"WrongToken\") {\r\n    //     this.messageService.add({ key: 'tst', severity: 'error', summary: this.translate.instant('Messages.CantChangeUserPassword') });\r\n    //   }\r\n    //   else if (result == \"EmailDoesntExist\") {\r\n    //     this.messageService.add({ severity: 'error', summary: this.translate.instant('Messages.ProvidedEmailDoesNotExist') });\r\n    //   }\r\n\r\n    //   console.log(`Reset password has been ended with result: ${result}`);\r\n    // }, error => console.log(error));\r\n  }\r\n}","import { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { Form } from \"../../abstract/forms/form\";\r\nimport { ManufacturerCreationModel } from \"src/app/interfaces/manufacturer\";\r\nimport { ManufacturerAddressComponent } from \"../../addresses/manufacturer-address/manufacturer-address.component\";\r\nimport { Country, ManufacturerAddress } from \"src/app/interfaces/address\";\r\nimport { AddressComponent } from \"../../addresses/address/address.component\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { Routes } from \"src/app/constants/routes.constants\";\r\nimport { ADDRESS_CONTROL_NAMES } from \"../../addresses/address/address.constants\";\r\nimport { MANUFACTURER_ADDRESS_CONTROL_NAMES } from \"../../addresses/manufacturer-address/manufacturer-address.constants\";\r\nimport { MANUFACTURER_CREATE_CONTROL_NAMES } from \"./manufacturer-create.constants\";\r\n\r\n@Component({\r\n  selector: \"manufacturer-create\",\r\n  templateUrl: \"./manufacturer-create.component.html\"\r\n})\r\nexport class ManufacturerCreationComponent\r\n  extends Form<ManufacturerCreationModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareManufacturerCreationModel;\r\n\r\n  @ViewChild('addressForm') addressForm: AddressComponent;\r\n  @ViewChild('manufacturerAddressForm') manufacturerAddressForm: ManufacturerAddressComponent;\r\n\r\n  readonly manufacturerAddressRequiredFields: string[] = [\r\n    ADDRESS_CONTROL_NAMES.City,\r\n    ADDRESS_CONTROL_NAMES.Country,\r\n    ADDRESS_CONTROL_NAMES.PostalCode,\r\n    ADDRESS_CONTROL_NAMES.StreetName,\r\n    ADDRESS_CONTROL_NAMES.StreetNumber\r\n  ];\r\n\r\n  public override get shouldActionsBeDisabled(): boolean {\r\n    return super.shouldActionsBeDisabled ||\r\n      (this.addressForm?.form.invalid ?? false) ||\r\n      (this.manufacturerAddressForm?.form.invalid ?? false);\r\n  }\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'Manufacturer',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Creation,\r\n      router,\r\n      ApiRoutes.manufacturer.post,\r\n      translate,\r\n      Routes.manufacturers.navigations.list\r\n    );\r\n\r\n    this.createForm({\r\n      [MANUFACTURER_CREATE_CONTROL_NAMES.IsOperational]: false,\r\n      [MANUFACTURER_CREATE_CONTROL_NAMES.Name]: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.manufacturers.navigations.list]);\r\n  }\r\n\r\n  private prepareManufacturerCreationModel(): ManufacturerCreationModel {\r\n    const manufacturerAddress = <ManufacturerAddress>{\r\n      ApartmentNumber: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.ApartmentNumber],\r\n      City: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.City],\r\n      Country: <Country>{\r\n        Id: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.Country],\r\n      },\r\n      Email: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.Email],\r\n      NationalId: this.manufacturerAddressForm.form.value[MANUFACTURER_ADDRESS_CONTROL_NAMES.NationalId],\r\n      PhoneNumber: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.PhoneNumber],\r\n      PostalCode: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.PostalCode],\r\n      StreetName: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.StreetName],\r\n      StreetNumber: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.StreetNumber],\r\n    };\r\n\r\n    const manufacturer = <ManufacturerCreationModel>{\r\n      Address: manufacturerAddress,\r\n      IsOperational: this.form.value[MANUFACTURER_CREATE_CONTROL_NAMES.IsOperational],\r\n      Name: this.form.value[MANUFACTURER_CREATE_CONTROL_NAMES.Name],\r\n    };\r\n\r\n    return manufacturer;\r\n  }\r\n}","export const MANUFACTURER_CREATE_CONTROL_NAMES = {\r\n  IsOperational: 'IsOperational',\r\n  Name: 'Name'\r\n}","import { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { AccessControlForm } from \"../../abstract/forms/access-control-form\";\r\nimport { ManufacturerDetailsModel } from \"src/app/interfaces/manufacturer\";\r\nimport { Country, ManufacturerAddress } from \"src/app/interfaces/address\";\r\nimport { AddressComponent } from \"../../addresses/address/address.component\";\r\nimport { ManufacturerAddressComponent } from \"../../addresses/manufacturer-address/manufacturer-address.component\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission.enum\";\r\nimport { Routes } from \"src/app/constants/routes.constants\";\r\nimport { ADDRESS_CONTROL_NAMES } from \"../../addresses/address/address.constants\";\r\nimport { MANUFACTURER_DETAILS_CONTROL_NAMES } from \"./manufacturer-details.constants\";\r\nimport { MANUFACTURER_ADDRESS_CONTROL_NAMES } from \"../../addresses/manufacturer-address/manufacturer-address.constants\";\r\n\r\n@Component({\r\n  selector: \"manufacturer-details\",\r\n  templateUrl: \"./manufacturer-details.component.html\"\r\n})\r\nexport class ManufacturerDetailsComponent\r\n  extends AccessControlForm<ManufacturerDetailsModel>\r\n  implements OnInit {\r\n\r\n  public override beforeSubmitionCustomOperationsHandler = this.prepareManufacturerDetailsModel;\r\n\r\n  protected override afterSubmitionCustomOperationsHandler = undefined;\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n  protected override entityId: string;\r\n\r\n  manufacturer: ManufacturerDetailsModel;\r\n\r\n  readonly manufacturerAddressRequiredFields: string[] = [\r\n    ADDRESS_CONTROL_NAMES.City,\r\n    ADDRESS_CONTROL_NAMES.Country,\r\n    ADDRESS_CONTROL_NAMES.PostalCode,\r\n    ADDRESS_CONTROL_NAMES.StreetName,\r\n    ADDRESS_CONTROL_NAMES.StreetNumber\r\n  ];\r\n\r\n  public override get shouldActionsBeDisabled(): boolean {\r\n    return super.shouldActionsBeDisabled ||\r\n      (!this.manufacturer || this.manufacturer.IsDeleted) ||\r\n      (this.addressForm?.form.invalid ?? false) ||\r\n      (this.manufacturerAddressForm?.form.invalid ?? false);\r\n  }\r\n\r\n  @ViewChild('addressForm') addressForm: AddressComponent;\r\n  @ViewChild('manufacturerAddressForm') manufacturerAddressForm: ManufacturerAddressComponent;\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteManufacturer',\r\n      ApiRoutes.manufacturer.delete,\r\n      dialogMessageService,\r\n      'Manufacturer',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      router,\r\n      ApiRoutes.manufacturer.put,\r\n      translate,\r\n      [UserPermissionEnum.Manufacturers_CanModify],\r\n      Routes.manufacturers.navigations.list\r\n    );\r\n\r\n    this.createForm({\r\n      [MANUFACTURER_DETAILS_CONTROL_NAMES.IsOperational]: false,\r\n      [MANUFACTURER_DETAILS_CONTROL_NAMES.Name]: ['', Validators.required]\r\n    });\r\n\r\n    this.loadManufacturer();\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.manufacturers.navigations.list]);\r\n  }\r\n\r\n  private getEntityInstanceName(): string {\r\n    return this.manufacturer.Name;\r\n  }\r\n\r\n  private loadManufacturer() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<ManufacturerDetailsModel>(ApiRoutes.manufacturer.getById(this.entityId))\r\n      .subscribe(result => {\r\n        this.manufacturer = result;\r\n        this.updateForm({\r\n          IsOperational: this.manufacturer.IsOperational,\r\n          Name: this.manufacturer.Name,\r\n        });\r\n\r\n        if (result.IsDeleted) {\r\n          this.form.get(MANUFACTURER_DETAILS_CONTROL_NAMES.IsOperational)?.disable();\r\n        }\r\n      });\r\n  }\r\n\r\n  private prepareManufacturerDetailsModel(): ManufacturerDetailsModel {\r\n    const manufacturerAddress = <ManufacturerAddress>{\r\n      ApartmentNumber: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.ApartmentNumber],\r\n      City: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.City],\r\n      Country: <Country>{\r\n        Id: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.Country]\r\n      },\r\n      Email: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.Email],\r\n      Id: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.Id],\r\n      NationalId: this.manufacturerAddressForm.form.value[MANUFACTURER_ADDRESS_CONTROL_NAMES.NationalId],\r\n      PhoneNumber: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.PhoneNumber],\r\n      PostalCode: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.PostalCode],\r\n      StreetName: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.StreetName],\r\n      StreetNumber: this.addressForm.form.value[ADDRESS_CONTROL_NAMES.StreetNumber],\r\n    }\r\n    const manufacturer = <ManufacturerDetailsModel>{\r\n      Address: manufacturerAddress,\r\n      Id: this.manufacturer.Id,\r\n      IsOperational: this.form.value.IsOperational,\r\n      Name: this.form.value.Name,\r\n    };\r\n\r\n    return manufacturer;\r\n  }\r\n}","export const MANUFACTURER_DETAILS_CONTROL_NAMES = {\r\n  IsOperational: 'IsOperational',\r\n  Name: 'Name',\r\n};","import { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { AccessControlComponent } from \"../../abstract/access-controls/access-control\";\r\nimport { ManufacturerListItemModel, ManufacturerListModel } from \"src/app/interfaces/manufacturer\";\r\nimport { ConfirmationService, LazyLoadEvent } from \"primeng/api\";\r\nimport { PngTableColumn } from \"src/app/interfaces/png\";\r\nimport { Table } from \"primeng/table\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission.enum\";\r\nimport { FilterService } from \"src/app/services/filters/filter.service\";\r\nimport { FilterTypeEnum } from \"src/app/enums/filter-type.enum\";\r\nimport { Routes } from \"src/app/constants/routes.constants\";\r\n\r\n@Component({\r\n  selector: \"manufacturer-list\",\r\n  templateUrl: \"./manufacturer-list.component.html\"\r\n})\r\nexport class ManufacturerListComponent\r\n  extends AccessControlComponent<ManufacturerListItemModel>\r\n  implements OnInit {\r\n\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n\r\n  private readonly _dataPopulator = {\r\n    manufacturers: {\r\n      get: (event: LazyLoadEvent) => this.getManufacturers(event),\r\n      set: (manufacturers: ManufacturerListModel) => this.setManufacturers(manufacturers)\r\n    }\r\n  };\r\n\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  cols: PngTableColumn[];\r\n  manufacturers: ManufacturerListItemModel[];\r\n  totalRecords: number;\r\n\r\n  @ViewChild('dataTable') dataTable: Table;\r\n\r\n  constructor(\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    public readonly filterService: FilterService,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteManufacturer',\r\n      ApiRoutes.manufacturer.delete,\r\n      dialogMessageService,\r\n      'Manufacturer',\r\n      errorService,\r\n      httpClient,\r\n      () => {\r\n        this._dataPopulator.manufacturers\r\n          .get(this.tempLazyLoadEvent)\r\n          .subscribe(result => this._dataPopulator.manufacturers.set(result));\r\n      },\r\n      router,\r\n      translate,\r\n      [UserPermissionEnum.Manufacturers_CanModify]);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cols = [\r\n      <PngTableColumn>{\r\n        field: 'Name',\r\n        header: 'Manufacturer.Name',\r\n        width: '10%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'IsOperational',\r\n        header: 'Manufacturer.IsOperational',\r\n        width: '10%'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'NationalId',\r\n        header: 'Manufacturer.NationalId',\r\n        width: '10%',\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'AddressSummary',\r\n        header: 'Manufacturer.AddressSummary',\r\n        width: '10%',\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Actions',\r\n        header: '',\r\n        width: '20%'\r\n      }\r\n    ];\r\n  }\r\n\r\n  public loadManufacturersLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n    this._dataPopulator.manufacturers\r\n      .get(event)\r\n      .subscribe(result => this._dataPopulator.manufacturers.set(result));\r\n  }\r\n\r\n  public onCreate() {\r\n    this.router.navigate([Routes.manufacturers.navigations.creation]);\r\n  }\r\n\r\n  public onEdit(manufacturer: ManufacturerListItemModel) {\r\n    this.router.navigate([Routes.manufacturers.navigations.edition(manufacturer.Id)]);\r\n  }\r\n\r\n  private getEntityInstanceName(manufacturer: ManufacturerListItemModel): string {\r\n    return manufacturer.Name;\r\n  }\r\n\r\n  private getManufacturers(event: LazyLoadEvent) {\r\n    event.sortField ??= this.cols[0].field;\r\n\r\n    return this.httpClient\r\n      .get<ManufacturerListModel>(ApiRoutes.manufacturer.getAll(event, this.cols));\r\n  }\r\n\r\n  private setManufacturers(manufacturers: ManufacturerListModel) {\r\n    this.totalRecords = manufacturers.TotalRowsCount;\r\n    this.manufacturers = manufacturers.List;\r\n  }\r\n}","import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\r\nimport { FormBuilder, FormControl, Validators } from \"@angular/forms\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { SelectItem } from \"primeng/api\";\r\nimport { NameInLanguage } from \"src/app/interfaces/name-in-language\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { SimpleFormComponent } from \"../abstract/forms/simple-form\";\r\n\r\n@Component({\r\n  selector: 'name-in-languages',\r\n  templateUrl: './name-in-languages.component.html'\r\n})\r\nexport class NameInLanguagesComponent\r\n  extends SimpleFormComponent\r\n  implements OnInit {\r\n\r\n  languages: SelectItem[];\r\n\r\n  @Input('disabled') disabled: boolean;\r\n  @Input('nameInLanguages') nameInLanguages: NameInLanguage[];\r\n\r\n  @Output('isValid') isValid = new EventEmitter<boolean>();\r\n\r\n  constructor(\r\n    protected override readonly formBuilder: FormBuilder,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public readonly translate: TranslateService\r\n  ) {\r\n    super(formBuilder);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.selectOptionsService\r\n      .getLanguages()\r\n      .subscribe(languages => {\r\n        this.languages = languages;\r\n\r\n        this.createForm();\r\n\r\n        if (this.nameInLanguages) {\r\n          this.updateForm();\r\n          this.isValid.emit(true);\r\n        }\r\n\r\n        if (this.disabled) {\r\n          this.form.disable();\r\n        }\r\n        else {\r\n          this.form.enable();\r\n        }\r\n      });\r\n  }\r\n\r\n  public getNameInLanguages(): NameInLanguage[] {\r\n    const data: NameInLanguage[] = [];\r\n\r\n    this.languages.forEach(l => {\r\n      data.push(<NameInLanguage>{\r\n        LanguageId: Number(l.value),\r\n        Name: this.form.controls[l.label!].value\r\n      });\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  public onChangeInput() {\r\n    let isFormValid = true;\r\n\r\n    Object.keys(this.form.controls)\r\n      .forEach(key => {\r\n        isFormValid = isFormValid && (this.form.get(key)?.valid ?? true);\r\n      });\r\n\r\n    this.isValid.emit(isFormValid);\r\n  }\r\n\r\n  protected override createForm() {\r\n    const group: { [key: string]: FormControl } = {};\r\n\r\n    this.languages.forEach(l => {\r\n      group[l.label!] = new FormControl('');\r\n      group[l.label!].setValidators(Validators.required);\r\n    });\r\n\r\n    super.createForm(group, true);\r\n  }\r\n\r\n  protected override updateForm() {\r\n    this.languages.forEach(l => {\r\n      const data = this.nameInLanguages.find(d => d.LanguageId == l.value);\r\n\r\n      this.form.controls[l.label!].patchValue(data?.Name);\r\n    });\r\n  }\r\n}","import { Component, Input, OnInit, ViewChild } from \"@angular/core\";\r\nimport { AddressComponent } from \"../../../addresses/address/address.component\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { Routes } from \"src/app/constants/routes.constants\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Address, Country } from \"src/app/interfaces/address\";\r\nimport { ClientRepresentativeDialogConfigData, ClientRepresentativeCreationModel } from \"src/app/interfaces/client\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { DynamicDialogConfig, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { OpenableAsDialogForm } from \"../../../abstract/forms/openable-as-dialog-form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { ADDRESS_CONTROL_NAMES } from \"src/app/components/addresses/address/address.constants\";\r\n\r\n@Component({\r\n  selector: \"client-representative-create\",\r\n  templateUrl: \"./client-representative-create.component.html\"\r\n})\r\nexport class ClientRepresentativeCreationComponent\r\n  extends OpenableAsDialogForm<ClientRepresentativeDialogConfigData, ClientRepresentativeCreationModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareClientRepresentativeCreationModel;\r\n\r\n  @Input('clientId') clientId?: string;\r\n\r\n  @ViewChild('addressForm') addressForm: AddressComponent;\r\n\r\n  public static OPEN_AS_DIALOG_SETTINGS = <DynamicDialogConfig>{\r\n    header: 'ClientRepresentative.Create',\r\n    height: 'auto',\r\n    modal: true,\r\n    style: { margin: 0, padding: 0 },\r\n    width: '50vw'\r\n  };\r\n\r\n  readonly clientRepresentativeAddressRequiredFields: string[] = [\r\n    ADDRESS_CONTROL_NAMES.City,\r\n    ADDRESS_CONTROL_NAMES.Country,\r\n    ADDRESS_CONTROL_NAMES.Email,\r\n    ADDRESS_CONTROL_NAMES.PhoneNumber,\r\n    ADDRESS_CONTROL_NAMES.PostalCode,\r\n    ADDRESS_CONTROL_NAMES.StreetName,\r\n    ADDRESS_CONTROL_NAMES.StreetNumber\r\n  ];\r\n\r\n  public override get shouldActionsBeDisabled() {\r\n    return super.shouldActionsBeDisabled ||\r\n      (this.addressForm?.form.invalid ?? false);\r\n  }\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    public override readonly openedAsDialogConfig: DynamicDialogConfig,\r\n    public override readonly openedAsDialogRef: DynamicDialogRef,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'ClientRepresentative',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Creation,\r\n      openedAsDialogConfig,\r\n      openedAsDialogRef,\r\n      router,\r\n      ApiRoutes.clientRepresentative.post,\r\n      translate,\r\n      Routes.clientRepresentatives.navigations.list);\r\n\r\n    this.createForm({\r\n      FirstName: ['', Validators.required],\r\n      LastName: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  private getClientRepresentativeClientId() {\r\n    return this._dialogConfigData ? this._dialogConfigData.ClientId : this.clientId;\r\n  }\r\n\r\n  private prepareClientRepresentativeCreationModel(): ClientRepresentativeCreationModel {\r\n    const clientRepresentativeAddress = <Address>{\r\n      ApartmentNumber: this.addressForm.form.value.ApartmentNumber,\r\n      City: this.addressForm.form.value.City,\r\n      Country: <Country>{\r\n        Id: this.addressForm.form.value.CountryId\r\n      },\r\n      Email: this.addressForm.form.value.Email,\r\n      PhoneNumber: this.addressForm.form.value.PhoneNumber,\r\n      PostalCode: this.addressForm.form.value.PostalCode,\r\n      StreetName: this.addressForm.form.value.StreetName,\r\n      StreetNumber: this.addressForm.form.value.StreetNumber\r\n    };\r\n    const clientRepresentative = <ClientRepresentativeCreationModel>{\r\n      Address: clientRepresentativeAddress,\r\n      ClientId: this.getClientRepresentativeClientId(),\r\n      FirstName: this.form.value.FirstName,\r\n      LastName: this.form.value.LastName\r\n    };\r\n\r\n    return clientRepresentative;\r\n  }\r\n}","import { Component, Input, OnInit, ViewChild } from \"@angular/core\";\r\nimport { ClientRepresentativeDetailsModel, ClientRepresentativeDialogConfigData } from \"src/app/interfaces/client\";\r\nimport { AddressComponent } from \"../../../addresses/address/address.component\";\r\nimport { DynamicDialogConfig, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { Address, Country } from \"src/app/interfaces/address\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { Routes } from \"src/app/constants/routes.constants\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { AccessControlOpenableAsDialogForm } from \"../../../abstract/forms/access-control-openable-as-dialog-form\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission.enum\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { StringBuilder } from \"src/app/tools/stringBuilder\";\r\nimport { ADDRESS_CONTROL_NAMES } from \"src/app/components/addresses/address/address.constants\";\r\n\r\n@Component({\r\n  selector: \"client-representative-details\",\r\n  templateUrl: \"./client-representative-details.component.html\"\r\n})\r\nexport class ClientRepresentativeDetailsComponent\r\n  extends AccessControlOpenableAsDialogForm<ClientRepresentativeDialogConfigData, ClientRepresentativeDetailsModel>\r\n  implements OnInit {\r\n\r\n  public static readonly OPEN_AS_DIALOG_SETTINGS = <DynamicDialogConfig>{\r\n    header: 'ClientRepresentative.Details',\r\n    height: 'auto',\r\n    modal: true,\r\n    style: { margin: 0, padding: 0 },\r\n    width: '50vw'\r\n  };\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareClientRepresentativeDetailsModel;\r\n\r\n  protected override readonly afterSubmitionCustomOperationsHandler = undefined;\r\n  protected override readonly deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n  protected override readonly entityId: string;\r\n\r\n  @Input('clientId') clientId?: string;\r\n\r\n  @ViewChild('addressForm') addressForm: AddressComponent;\r\n\r\n  readonly clientRepresentativeAddressRequiredFields: string[] = [\r\n    ADDRESS_CONTROL_NAMES.City,\r\n    ADDRESS_CONTROL_NAMES.Country,\r\n    ADDRESS_CONTROL_NAMES.Email,\r\n    ADDRESS_CONTROL_NAMES.PhoneNumber,\r\n    ADDRESS_CONTROL_NAMES.PostalCode,\r\n    ADDRESS_CONTROL_NAMES.StreetName,\r\n    ADDRESS_CONTROL_NAMES.StreetNumber\r\n  ];\r\n\r\n  clientRepresentative: ClientRepresentativeDetailsModel;\r\n\r\n  public override get shouldActionsBeDisabled() {\r\n    return super.shouldActionsBeDisabled ||\r\n      !this.clientRepresentative ||\r\n      (this.addressForm?.form.invalid ?? false);\r\n  }\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    public override readonly openedAsDialogConfig: DynamicDialogConfig,\r\n    public override readonly openedAsDialogRef: DynamicDialogRef,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteClientRepresentative',\r\n      ApiRoutes.clientRepresentative.delete,\r\n      dialogMessageService,\r\n      'ClientRepresentative',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      openedAsDialogConfig,\r\n      openedAsDialogRef,\r\n      router,\r\n      ApiRoutes.clientRepresentative.put,\r\n      translate,\r\n      [UserPermissionEnum.ClientRepresentatives_CanModify],\r\n      Routes.clientRepresentatives.navigations.list\r\n    );\r\n\r\n    this.createForm({\r\n      FirstName: ['', Validators.required],\r\n      LastName: ['', Validators.required]\r\n    });\r\n\r\n    this.loadClientRepresentative();\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  private getEntityInstanceName(): string {\r\n    return new StringBuilder(this.clientRepresentative.LastName)\r\n      .append(' ')\r\n      .append(this.clientRepresentative.FirstName)\r\n      .toString();\r\n  }\r\n\r\n  private loadClientRepresentative() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<ClientRepresentativeDetailsModel>(ApiRoutes.clientRepresentative.getById(this.entityId))\r\n      .subscribe(result => {\r\n        this.clientRepresentative = result;\r\n\r\n        this.updateForm({\r\n          FirstName: this.clientRepresentative.FirstName,\r\n          LastName: this.clientRepresentative.LastName\r\n        });\r\n      });\r\n  }\r\n\r\n  private prepareClientRepresentativeDetailsModel(): ClientRepresentativeDetailsModel {\r\n    const clientRepresentativeAddress = <Address>{\r\n      ApartmentNumber: this.addressForm.form.value.ApartmentNumber,\r\n      City: this.addressForm.form.value.City,\r\n      Country: <Country>{\r\n        Id: this.addressForm.form.value.CountryId\r\n      },\r\n      Email: this.addressForm.form.value.Email,\r\n      Id: this.addressForm.form.value.Id,\r\n      PhoneNumber: this.addressForm.form.value.PhoneNumber,\r\n      PostalCode: this.addressForm.form.value.PostalCode,\r\n      StreetName: this.addressForm.form.value.StreetName,\r\n      StreetNumber: this.addressForm.form.value.StreetNumber\r\n    };\r\n    const clientRepresentative = <ClientRepresentativeDetailsModel>{\r\n      Address: clientRepresentativeAddress,\r\n      ClientId: this.clientRepresentative.ClientId,\r\n      FirstName: this.form.value.FirstName,\r\n      Id: this.entityId,\r\n      LastName: this.form.value.LastName\r\n    }\r\n\r\n    return clientRepresentative;\r\n  }\r\n}","import { Component, Input, OnDestroy, OnInit, ViewChild } from \"@angular/core\";\r\nimport { AccessControlComponent } from \"../../../abstract/access-controls/access-control\";\r\nimport { Confirmation, ConfirmationService, LazyLoadEvent } from 'primeng/api';\r\nimport { PngTableColumn } from \"src/app/interfaces/png\";\r\nimport { Table } from \"primeng/table\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission.enum\";\r\nimport { FilterTypeEnum } from \"src/app/enums/filter-type.enum\";\r\nimport { ClientRepresentativeDialogConfigData, ClientRepresentativeListItemModel, ClientRepresentativeListModel } from \"src/app/interfaces/client\";\r\nimport { Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { FilterService } from \"src/app/services/filters/filter.service\";\r\nimport { DialogService, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { ClientRepresentativeCreationComponent } from \"../create/client-representative-create.component\";\r\nimport { ClientRepresentativeDetailsComponent } from \"../details/client-representative-details.component\";\r\n\r\n@Component({\r\n  selector: \"client-representative-list\",\r\n  templateUrl: \"./client-representative-list.component.html\"\r\n})\r\nexport class ClientRepresentativeListComponent\r\n  extends AccessControlComponent<ClientRepresentativeListItemModel>\r\n  implements OnInit, OnDestroy {\r\n\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n\r\n  @Input('clientId') clientId: string;\r\n\r\n  @ViewChild('dataTable') dataTable: Table;\r\n\r\n  private readonly _dataPopulator = {\r\n    clientRepresentatives: {\r\n      get: (event: LazyLoadEvent) => this.getClientRepresentatives(event),\r\n      set: (clientRepresentatives: ClientRepresentativeListModel) => this.setClientRepresentatives(clientRepresentatives)\r\n    }\r\n  };\r\n\r\n  private clientRepresentativeCreationDialog: DynamicDialogRef | undefined;\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  clientRepresentatives: ClientRepresentativeListItemModel[];\r\n  cols: PngTableColumn[];\r\n  totalRecords: number;\r\n\r\n  constructor(\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    private readonly dialogService: DialogService,\r\n    protected override readonly errorService: ErrorService,\r\n    public readonly filterService: FilterService,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteClientRepresentative',\r\n      ApiRoutes.clientRepresentative.delete,\r\n      dialogMessageService,\r\n      'ClientRepresentative',\r\n      errorService,\r\n      httpClient,\r\n      () => {\r\n        this._dataPopulator.clientRepresentatives\r\n          .get(this.tempLazyLoadEvent)\r\n          .subscribe(result => this._dataPopulator.clientRepresentatives.set(result));\r\n      },\r\n      router,\r\n      translate,\r\n      [UserPermissionEnum.ClientRepresentatives_CanModify]);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cols = [\r\n      <PngTableColumn>{\r\n        field: 'LastName',\r\n        header: 'ClientRepresentative.LastName',\r\n        width: '30%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'FirstName',\r\n        header: 'ClientRepresentative.FirstName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Email',\r\n        header: 'ClientRepresentative.Email',\r\n        width: '30%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'PhoneNumber',\r\n        header: 'ClientRepresentative.PhoneNumber',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Actions',\r\n        header: '',\r\n        width: '20%'\r\n      }\r\n    ];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.clientRepresentativeCreationDialog) {\r\n      this.clientRepresentativeCreationDialog.close();\r\n    }\r\n  }\r\n\r\n  public loadClientRepresentativesLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n\r\n    this._dataPopulator.clientRepresentatives\r\n      .get(event)\r\n      .subscribe(result => this._dataPopulator.clientRepresentatives.set(result));\r\n  }\r\n\r\n  public onCreate() {\r\n    if (!this.clientId)\r\n      return;\r\n\r\n    this.openClientRepresentativeDialog();\r\n  }\r\n\r\n  public onEdit(clientRepresentative: ClientRepresentativeListItemModel) {\r\n    this.openClientRepresentativeDialog(clientRepresentative);\r\n  }\r\n\r\n  private getClientRepresentatives(event: LazyLoadEvent) {\r\n    event.sortField ??= this.cols[0].field;\r\n\r\n    return this.httpClient\r\n      .get<ClientRepresentativeListModel>(ApiRoutes.clientRepresentative.getAll(event, this.cols, this.clientId));\r\n  }\r\n\r\n  private getEntityInstanceName(clientRepresentative: ClientRepresentativeListItemModel): string {\r\n    return `${clientRepresentative.LastName} ${clientRepresentative.FirstName}`;\r\n  }\r\n\r\n  private openClientRepresentativeDialog(clientRepresentative?: ClientRepresentativeListItemModel) {\r\n\r\n    const clientRepresentativeDialogConfigData = <ClientRepresentativeDialogConfigData>{\r\n      ClientId: this.clientId,\r\n      Id: clientRepresentative ? clientRepresentative.Id : undefined\r\n    };\r\n\r\n    this.clientRepresentativeCreationDialog = this.dialogService.open(\r\n      clientRepresentative ? ClientRepresentativeDetailsComponent : ClientRepresentativeCreationComponent,\r\n      clientRepresentative\r\n        ? {\r\n          ...ClientRepresentativeDetailsComponent.OPEN_AS_DIALOG_SETTINGS,\r\n          data: clientRepresentativeDialogConfigData\r\n        }\r\n        : {\r\n          ...ClientRepresentativeCreationComponent.OPEN_AS_DIALOG_SETTINGS,\r\n          data: clientRepresentativeDialogConfigData\r\n        });\r\n\r\n    this.clientRepresentativeCreationDialog.onClose.subscribe(() => {\r\n      this._dataPopulator.clientRepresentatives\r\n        .get(this.tempLazyLoadEvent)\r\n        .subscribe(result => this._dataPopulator.clientRepresentatives.set(result));\r\n    });\r\n  }\r\n\r\n  private setClientRepresentatives(clientRepresentatives: ClientRepresentativeListModel) {\r\n    this.totalRecords = clientRepresentatives.TotalRowsCount;\r\n    this.clientRepresentatives = clientRepresentatives.List;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { Routes } from \"src/app/constants/routes.constants\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { UserRoleCreationModel, UserRolePermissionsForCreation } from \"src/app/interfaces/user-role\";\r\nimport { PermissionGroupItemModel } from \"src/app/interfaces/user-permission\";\r\nimport { NameInLanguagesComponent } from \"../../name-in-languages/name-in-languages.component\";\r\nimport { ApiResultEnum } from \"src/app/enums/api-result.enum\";\r\nimport { UserRolePermissionsComponent } from \"../permissions/user-role-permissions.component\";\r\nimport { Form } from \"../../abstract/forms/form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\n\r\n@Component({\r\n  selector: \"user-role-create\",\r\n  templateUrl: \"./user-role-create.component.html\"\r\n})\r\nexport class UserRoleCreationComponent\r\n  extends Form<UserRoleCreationModel>\r\n  implements OnInit {\r\n\r\n  public override beforeSubmitionCustomOperationsHandler = this.prepareUserRoleCreationModel;\r\n\r\n  private readonly _dataPopulator = {\r\n    userPermissions: {\r\n      get: () => this.httpClient.get<UserRolePermissionsForCreation>(ApiRoutes.userRole.getUserRolePermissionsForCreation),\r\n      set: (userPermissions: UserRolePermissionsForCreation) => this.groupedUserPermissions = userPermissions.List\r\n    }\r\n  }\r\n\r\n  groupedUserPermissions: PermissionGroupItemModel[];\r\n  isNameInLanguagesValid: boolean = false;\r\n\r\n  @ViewChild('nameInLanguages') nameInLanguages: NameInLanguagesComponent;\r\n  @ViewChild('userRolePermissions') userRolePermissions: UserRolePermissionsComponent;\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'UserRole',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Creation,\r\n      router,\r\n      ApiRoutes.userRole.post,\r\n      translate,\r\n      Routes.userRoles.navigations.list);\r\n\r\n    this.createForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._dataPopulator.userPermissions\r\n      .get()\r\n      .subscribe(result => this._dataPopulator.userPermissions.set(result));\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.userRoles.navigations.list]);\r\n  }\r\n\r\n  public onIsNameInLanguagesValid(value: boolean) {\r\n    this.isNameInLanguagesValid = value;\r\n  }\r\n\r\n  private prepareUserRoleCreationModel(): UserRoleCreationModel {\r\n    const userRole = new UserRoleCreationModel();\r\n    userRole.NameInLanguages = this.nameInLanguages.getNameInLanguages();\r\n\r\n    const permissionsSubmitted = this.userRolePermissions.getPermissionsSubmitted();\r\n    for (const permission of permissionsSubmitted) {\r\n      if (!userRole.doesPermissionExistWithinSelected(permission.Id)) {\r\n        userRole.PermissionsSelected.push(permission);\r\n      }\r\n    }\r\n\r\n    return userRole;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission.enum\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { SelectedUserPermissionNodeArray } from \"src/app/interfaces/user-permission\";\r\nimport { PngTreeColumn } from \"src/app/interfaces/png\";\r\nimport { NameInLanguagesComponent } from \"../../name-in-languages/name-in-languages.component\";\r\nimport { Routes } from \"src/app/constants/routes.constants\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { UserRoleDetailsModel } from \"src/app/interfaces/user-role\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { UserRolePermissionsComponent } from \"../permissions/user-role-permissions.component\";\r\nimport { UserPermissionNode } from \"../permissions/models/user-permission-node\";\r\nimport { AccessControlForm } from \"../../abstract/forms/access-control-form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\n\r\n@Component({\r\n  selector: 'user-role-details',\r\n  templateUrl: './user-role-details.component.html'\r\n})\r\nexport class UserRoleDetailsComponent\r\n  extends AccessControlForm<UserRoleDetailsModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareUserRoleDetailsModel;\r\n\r\n  protected override afterSubmitionCustomOperationsHandler = undefined;\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n  protected override readonly entityId: number;\r\n\r\n  isNameInLanguagesValid: boolean = false;\r\n  selectedUserPermissions = new SelectedUserPermissionNodeArray();\r\n  userPermissionColumns: PngTreeColumn[] = [];\r\n  userPermissionGroups: UserPermissionNode[] = [];\r\n  userRole: UserRoleDetailsModel;\r\n\r\n  public override get shouldActionsBeDisabled(): boolean {\r\n    return super.shouldActionsBeDisabled ||\r\n      !this.userRole;\r\n  }\r\n\r\n  @ViewChild('nameInLanguages') nameInLanguages: NameInLanguagesComponent;\r\n  @ViewChild('userRolePermissions') userRolePermissions: UserRolePermissionsComponent;\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteUserRole',\r\n      ApiRoutes.userRole.delete,\r\n      dialogMessageService,\r\n      'UserRole',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      router,\r\n      ApiRoutes.userRole.put,\r\n      translate,\r\n      [UserPermissionEnum.UserRoles_CanModify],\r\n      Routes.userRoles.navigations.list);\r\n\r\n    this.createForm();\r\n    this.loadUserRole();\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.userRoles.navigations.list]);\r\n  }\r\n\r\n  public onIsNameInLanguagesValid(value: boolean) {\r\n    this.isNameInLanguagesValid = value;\r\n  }\r\n\r\n  private getEntityInstanceName(): string {\r\n    return this.userRole.Name!;\r\n  }\r\n\r\n  private loadUserRole() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<UserRoleDetailsModel>(ApiRoutes.userRole.getById(this.entityId))\r\n      .subscribe(result => {\r\n        this.userRole = result;\r\n        this.updateForm();\r\n      });\r\n  }\r\n\r\n  protected override updateForm() {\r\n    if (!this.userRole)\r\n      return;\r\n\r\n    super.updateForm();\r\n  }\r\n\r\n  private prepareUserRoleDetailsModel() {\r\n    const userRole = new UserRoleDetailsModel();\r\n\r\n    userRole.Id = this.userRole.Id;\r\n    userRole.NameInLanguages = this.nameInLanguages.getNameInLanguages();\r\n\r\n    const permissionsSubmitted = this.userRolePermissions.getPermissionsSubmitted();\r\n    for (const permission of permissionsSubmitted) {\r\n      if (!userRole.doesPermissionExistWithinSelected(permission.Id)) {\r\n        userRole.PermissionsSelected.push(permission);\r\n      }\r\n    }\r\n\r\n    return userRole;\r\n  }\r\n}","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Table } from 'primeng/table';\r\nimport { PngTableColumn } from 'src/app/interfaces/png';\r\nimport { UserRoleListItemModel, UserRoleListModel } from 'src/app/interfaces/user-role';\r\nimport { FilterService } from 'src/app/services/filters/filter.service';\r\nimport { ConfirmationService, LazyLoadEvent, SelectItem } from 'primeng/api';\r\nimport { SelectOptionsService } from 'src/app/services/select-options/select-options.service';\r\nimport { FilterTypeEnum } from 'src/app/enums/filter-type.enum';\r\nimport { ApiRoutes } from 'src/app/constants/api-routes.constants';\r\nimport { ConsoleMessageService } from 'src/app/services/messages/console-message.service';\r\nimport { ErrorService } from 'src/app/services/errors/error.service';\r\nimport { DialogMessageService } from 'src/app/services/messages/dialog-message.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserPermissionEnum } from 'src/app/enums/user-permission.enum';\r\nimport { Routes } from 'src/app/constants/routes.constants';\r\nimport { AccessControlComponent } from '../../abstract/access-controls/access-control';\r\nimport { AuthorizationService } from 'src/app/services/authorization/authorization.service';\r\n\r\n@Component({\r\n  selector: \"user-role-list\",\r\n  templateUrl: \"./user-role-list.component.html\"\r\n})\r\nexport class UserRoleListComponent\r\n  extends AccessControlComponent<UserRoleListItemModel>\r\n  implements OnInit {\r\n\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n\r\n  private readonly _dataPopulator = {\r\n    multiSelects: {\r\n      userRoles: {\r\n        get: () => this.getUserRoleMultiSelectData(),\r\n        set: (userRoles: SelectItem[]) => this.setUserRoleMultiSelectData(userRoles)\r\n      }\r\n    },\r\n    userRoles: {\r\n      get: (event: LazyLoadEvent) => this.getUserRoles(event),\r\n      set: (userRoles: UserRoleListModel) => this.setUserRoles(userRoles)\r\n    }\r\n  };\r\n\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  cols: PngTableColumn[];\r\n  totalRecords: number;\r\n  userRoleOptions: SelectItem[];\r\n  userRoles: UserRoleListItemModel[];\r\n\r\n  @ViewChild('dataTable') dataTable: Table;\r\n\r\n  constructor(\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    public readonly filterService: FilterService,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteUserRole',\r\n      ApiRoutes.userRole.delete,\r\n      dialogMessageService,\r\n      'UserRole',\r\n      errorService,\r\n      httpClient,\r\n      () => {\r\n        this._dataPopulator.userRoles\r\n          .get(this.tempLazyLoadEvent)\r\n          .subscribe(result => this._dataPopulator.userRoles.set(result));\r\n      },\r\n      router,\r\n      translate,\r\n      [UserPermissionEnum.UserRoles_CanModify]);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.cols = [\r\n      <PngTableColumn>{\r\n        field: 'Id',\r\n        header: 'UserRole.Id',\r\n        width: '10%',\r\n        filterType: FilterTypeEnum.Numeric\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Name',\r\n        header: 'UserRole.Name',\r\n        width: '70%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true,\r\n        replaceWith: 'Id'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Actions',\r\n        header: '',\r\n        width: '20%'\r\n      }\r\n    ];\r\n\r\n    this._dataPopulator.multiSelects.userRoles\r\n      .get()\r\n      .subscribe(userRoles => this._dataPopulator.multiSelects.userRoles.set(userRoles));\r\n  }\r\n\r\n  public loadUserRolesLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n\r\n    this._dataPopulator.userRoles\r\n      .get(event)\r\n      .subscribe(result => this._dataPopulator.userRoles.set(result));\r\n  }\r\n\r\n  public onCreate() {\r\n    this.router.navigate([Routes.userRoles.navigations.creation]);\r\n  }\r\n\r\n  public onEdit(userRole: UserRoleListItemModel) {\r\n    this.router.navigate([Routes.userRoles.navigations.edition(userRole.Id)]);\r\n  }\r\n\r\n  private getEntityInstanceName(userRole: UserRoleListItemModel): string {\r\n    return userRole.Name;\r\n  }\r\n\r\n  private getUserRoleMultiSelectData() {\r\n    return this.selectOptionsService.getUserRoles();\r\n  }\r\n\r\n  private getUserRoles(event: LazyLoadEvent) {\r\n    event.sortField ??= this.cols[0]?.field;\r\n\r\n    return this.httpClient\r\n      .get<UserRoleListModel>(ApiRoutes.userRole.getAll(event, this.cols));\r\n  }\r\n\r\n  private setUserRoleMultiSelectData(userRoles: SelectItem[]) {\r\n    this.userRoleOptions = userRoles;\r\n\r\n    const userRoleColumn = this.cols.find(c => c.field === \"Name\");\r\n\r\n    if (userRoleColumn) {\r\n      userRoleColumn.options = this.userRoleOptions;\r\n    }\r\n  }\r\n\r\n  private setUserRoles(userRoles: UserRoleListModel) {\r\n    this.totalRecords = userRoles.TotalRowsCount;\r\n    this.userRoles = userRoles.List;\r\n  }\r\n}","import { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { PermissionGroupItemModel } from \"src/app/interfaces/user-permission\";\r\nimport { UserRolePermissionsDestinations } from \"src/app/interfaces/user-role\";\r\nimport { UserRolePermissionsOnCreationFiller } from \"./user-role-permissions-on-creation-filler\";\r\nimport { UserRolePermissionsOnEditionFiller } from \"./user-role-permissions-on-edition-filler\";\r\nimport { UserRolePermissionsFiller } from \"./user-role-permissions-filler\";\r\n\r\nexport class UserRolePermissionsFillerFactory {\r\n  static makeFiller(formMode: FormModeEnum, source: PermissionGroupItemModel[], destinations: UserRolePermissionsDestinations) {\r\n\r\n    let filler: UserRolePermissionsFiller;\r\n\r\n    switch (formMode) {\r\n      case FormModeEnum.Creation:\r\n        filler = new UserRolePermissionsOnCreationFiller(source, destinations);\r\n        break;\r\n\r\n      case FormModeEnum.Edition:\r\n        filler = new UserRolePermissionsOnEditionFiller(source, destinations);\r\n        break;\r\n\r\n      default:\r\n        throw new Error(`[${this.constructor.name}] Unsupported form mode.`);\r\n    }\r\n\r\n    return filler;\r\n  }\r\n}","import { Icons, LIST_ICON_NAME, MODIFY_ICON_NAME } from \"src/app/constants/icons.constants\";\r\nimport { PermissionGroupItemModel, PermissionItemModel } from \"src/app/interfaces/user-permission\";\r\nimport { UserPermissionNode } from \"../models/user-permission-node\";\r\n\r\nexport abstract class UserRolePermissionsFiller {\r\n\r\n  public abstract createChildNode(permission: PermissionItemModel): UserPermissionNode;\r\n  public abstract createParentNode(permissionsGroup: PermissionGroupItemModel, children: UserPermissionNode[]): UserPermissionNode;\r\n  public abstract fill(): void;\r\n\r\n  protected getIconStyleClassNameForPermission(permission: PermissionItemModel) {\r\n    return permission.Name.endsWith('.CanList')\r\n      ? LIST_ICON_NAME\r\n      : permission.Name.endsWith('.CanModify')\r\n        ? MODIFY_ICON_NAME\r\n        : Icons[permission.Name]\r\n  }\r\n}","import { PermissionGroupItemModel, PermissionItemModel, UserPermissionNodeData } from \"src/app/interfaces/user-permission\";\r\nimport { UserRolePermissionsDestinations } from \"src/app/interfaces/user-role\";\r\nimport { UserRolePermissionsFiller } from \"./user-role-permissions-filler\";\r\nimport { Icons } from \"src/app/constants/icons.constants\";\r\nimport { UserPermissionNode } from \"../models/user-permission-node\";\r\n\r\nexport class UserRolePermissionsOnCreationFiller extends UserRolePermissionsFiller {\r\n\r\n  constructor(private source: PermissionGroupItemModel[], private destinations: UserRolePermissionsDestinations) {\r\n    super();\r\n  }\r\n\r\n  public override createChildNode(permission: PermissionItemModel): UserPermissionNode<any> {\r\n\r\n    const result = new UserPermissionNode();\r\n\r\n    result.data = <UserPermissionNodeData>{\r\n      icon: this.getIconStyleClassNameForPermission(permission),\r\n      id: permission.Id,\r\n      name: permission.Name,\r\n      linkedPermissionIds: permission.LinkedPermissionsIds\r\n    };\r\n\r\n    return result;\r\n  }\r\n\r\n  public override createParentNode(permissionsGroup: PermissionGroupItemModel, children: UserPermissionNode[]): UserPermissionNode<any> {\r\n\r\n    const result = new UserPermissionNode();\r\n\r\n    result.children = children;\r\n    result.data = <UserPermissionNodeData>{\r\n      icon: Icons[permissionsGroup.Name],\r\n      id: null,\r\n      name: permissionsGroup.Name,\r\n      linkedPermissionIds: [],\r\n    };\r\n\r\n    return result;\r\n  }\r\n\r\n  public override fill() {\r\n    for (const permissionsGroup of this.source) {\r\n      const permissionsGroupChildren: UserPermissionNode[] = [];\r\n\r\n      for (const permission of permissionsGroup.Permissions) {\r\n        permissionsGroupChildren.push(this.createChildNode(permission));\r\n      }\r\n\r\n      this.destinations.allItems.push(this.createParentNode(permissionsGroup, permissionsGroupChildren));\r\n    }\r\n  }\r\n}","import { Icons } from \"src/app/constants/icons.constants\";\r\nimport { PermissionGroupItemModel, PermissionItemModel, UserPermissionNodeData } from \"src/app/interfaces/user-permission\";\r\nimport { UserRolePermissionsDestinations } from \"src/app/interfaces/user-role\";\r\nimport { UserRolePermissionsFiller } from \"./user-role-permissions-filler\";\r\nimport { UserPermissionNode } from \"../models/user-permission-node\";\r\n\r\nexport class UserRolePermissionsOnEditionFiller extends UserRolePermissionsFiller {\r\n\r\n  constructor(private source: PermissionGroupItemModel[], private destinations: UserRolePermissionsDestinations) {\r\n    super();\r\n  }\r\n\r\n  public override createChildNode(permission: PermissionItemModel): UserPermissionNode<any> {\r\n\r\n    const result = new UserPermissionNode();\r\n\r\n    result.data = <UserPermissionNodeData>{\r\n      icon: this.getIconStyleClassNameForPermission(permission),\r\n      id: permission.Id,\r\n      isSelected: permission.IsSelected,\r\n      linkedPermissionIds: permission.LinkedPermissionsIds,\r\n      name: permission.Name\r\n    };\r\n    result.expanded = true;\r\n    result.partialSelected = permission.IsSelected ? false : undefined;\r\n\r\n    return result;\r\n  }\r\n\r\n  public override createParentNode(permissionsGroup: PermissionGroupItemModel, children: UserPermissionNode<any>[]): UserPermissionNode<any> {\r\n\r\n    const result = new UserPermissionNode();\r\n\r\n    result.children = children;\r\n    result.data = <UserPermissionNodeData>{\r\n      icon: Icons[permissionsGroup.Name],\r\n      id: null,\r\n      isSelected: children.every(c => c.isSelected()),\r\n      linkedPermissionIds: [],\r\n      name: permissionsGroup.Name\r\n    };\r\n    result.expanded = true;\r\n    result.partialSelected = !children.every(c => c.isSelected()) && children.some(c => c.isSelected());\r\n\r\n    return result;\r\n  }\r\n\r\n  public override fill() {\r\n    this.updateUserRolePermissions();\r\n    this.updateUserRolePermissionsSelected();\r\n  }\r\n\r\n  private updateUserRolePermissions() {\r\n    for (const permissionsGroup of this.source) {\r\n      const permissionsGroupChildren: UserPermissionNode[] = [];\r\n\r\n      for (const permission of permissionsGroup.Permissions) {\r\n        permissionsGroupChildren.push(this.createChildNode(permission));\r\n      }\r\n\r\n      this.destinations.allItems.push(this.createParentNode(permissionsGroup, permissionsGroupChildren));\r\n    }\r\n  }\r\n\r\n  private updateUserRolePermissionsSelected() {\r\n    for (const permissionNode of this.destinations.allItems) {\r\n      if (permissionNode.hasChildren()) {\r\n        for (const childPermissionNode of permissionNode.children!) {\r\n          this.destinations.selectedItems.tryPush(childPermissionNode);\r\n        }\r\n      }\r\n\r\n      this.destinations.selectedItems.tryPush(permissionNode);\r\n    }\r\n  }\r\n}","import { TreeNode } from \"primeng/api\";\r\nimport { UserPermissionNodeData } from \"src/app/interfaces/user-permission\";\r\n\r\nexport class UserPermissionNode<T = any> implements TreeNode {\r\n  children?: UserPermissionNode<T>[] = [];\r\n  data: UserPermissionNodeData;\r\n  expanded?: boolean | undefined;\r\n  partialSelected?: boolean | undefined;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  public hasChildren(): boolean {\r\n    return this.children !== undefined && this.children.length > 0\r\n  }\r\n\r\n  public hasLinkedPermissions() {\r\n    return this.data.linkedPermissionIds.length > 0;\r\n  }\r\n\r\n  public isSelected(): boolean {\r\n    return this.data.isSelected ?? false;\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { PngTreeColumn } from \"src/app/interfaces/png\";\r\nimport { PermissionGroupItemModel, PermissionItemModel, SelectedUserPermissionNodeArray } from \"src/app/interfaces/user-permission\";\r\nimport { UserRolePermissionsFillerFactory } from \"./fillers/user-role-permissions-filler-factory\";\r\nimport { UserRolePermissionsDestinations } from \"src/app/interfaces/user-role\";\r\nimport { UserPermissionNode } from \"./models/user-permission-node\";\r\n\r\n@Component({\r\n  selector: 'user-role-permissions',\r\n  templateUrl: './user-role-permissions.component.html'\r\n})\r\nexport class UserRolePermissionsComponent implements OnInit {\r\n\r\n  selectedUserPermissionNodes = new SelectedUserPermissionNodeArray();\r\n  userPermissionNodes: UserPermissionNode[] = [];\r\n  userRolePermissionColumns: PngTreeColumn[] = [];\r\n\r\n  @Input() formMode: FormModeEnum = FormModeEnum.Creation;\r\n  @Input() groupedUserPermissions: PermissionGroupItemModel[];\r\n\r\n  constructor(\r\n    public translate: TranslateService\r\n  ) {\r\n    this.userRolePermissionColumns = [\r\n      {\r\n        icon: 'icon',\r\n        field: 'name',\r\n        header: 'UserPermission.Name'\r\n      }\r\n    ];\r\n  }\r\n\r\n  ngOnInit() {\r\n    UserRolePermissionsFillerFactory\r\n      .makeFiller(\r\n        this.formMode,\r\n        this.groupedUserPermissions,\r\n        <UserRolePermissionsDestinations>{ allItems: this.userPermissionNodes, selectedItems: this.selectedUserPermissionNodes })\r\n      .fill();\r\n  }\r\n\r\n  public getPermissionsSubmitted() {\r\n    const permissionsSubmitted: PermissionItemModel[] = [];\r\n    for (const permissionNode of this.selectedUserPermissionNodes) {\r\n      if (!permissionNode.hasChildren()) {\r\n        permissionsSubmitted.push(<PermissionItemModel>{\r\n          Id: permissionNode.data.id\r\n        });\r\n      }\r\n      else {\r\n        for (const childPermissionNode of permissionNode.children!) {\r\n          permissionsSubmitted.push(<PermissionItemModel>{\r\n            Id: childPermissionNode.data.id\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return permissionsSubmitted;\r\n  }\r\n\r\n  public onPermissionSelected(permissionNode: UserPermissionNode) {\r\n    if (!permissionNode.hasLinkedPermissions())\r\n      return;\r\n\r\n    for (const linkedPermissionId of permissionNode.data.linkedPermissionIds) {\r\n      const isPermissionAlreadySelected = this.selectedUserPermissionNodes.find(p => p.data.id === linkedPermissionId);\r\n\r\n      if (!isPermissionAlreadySelected) {\r\n        const permissionToBeSelected = this.getPermissionNodeToBeSelected(linkedPermissionId);\r\n\r\n        if (permissionToBeSelected) {\r\n          this.selectedUserPermissionNodes.push(permissionToBeSelected);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private findPermissionById(permissionNode: UserPermissionNode, idToFind: number): UserPermissionNode | undefined {\r\n    if (permissionNode.data && permissionNode.data.id === idToFind)\r\n      return permissionNode;\r\n\r\n    if (permissionNode.hasChildren()) {\r\n      for (const nodeChild of permissionNode.children!) {\r\n        const result = this.findPermissionById(nodeChild, idToFind);\r\n\r\n        if (result)\r\n          return result;\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private getPermissionNodeToBeSelected(permissionId: number): UserPermissionNode | undefined {\r\n    let permission: UserPermissionNode | undefined;\r\n\r\n    for (const userPermissionGroup of this.userPermissionNodes) {\r\n      permission = this.findPermissionById(userPermissionGroup, permissionId);\r\n\r\n      if (permission)\r\n        return permission;\r\n    }\r\n\r\n    return permission;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { SelectItem } from \"primeng/api\";\r\nimport { Router } from \"@angular/router\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { RegexPatterns } from \"src/app/tools/regexPatterns\";\r\nimport { UserCreationModel } from \"src/app/interfaces/user\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { Routes } from \"src/app/constants/routes.constants\";\r\nimport { Form } from \"../../abstract/forms/form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\n\r\n@Component({\r\n  selector: \"user-create\",\r\n  templateUrl: \"./user-create.component.html\"\r\n})\r\nexport class UserCreationComponent\r\n  extends Form<UserCreationModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareUserCreationModel;\r\n\r\n  languages: SelectItem<number>[];\r\n  userRoles: SelectItem<number>[];\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'User',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Creation,\r\n      router,\r\n      ApiRoutes.user.post,\r\n      translate,\r\n      Routes.users.navigations.list);\r\n\r\n    this.createForm({\r\n      Email: ['', Validators.pattern(RegexPatterns.emailPattern)],\r\n      FirstName: ['', Validators.required],\r\n      IsActive: false,\r\n      LanguageId: null,\r\n      LastName: ['', Validators.required],\r\n      Login: ['', Validators.required],\r\n      Password: ['', Validators.pattern(RegexPatterns.passwordPattern)],\r\n      UserRoleId: null\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.users.navigations.list]);\r\n  }\r\n\r\n  private populateDropdowns() {\r\n\r\n    this.selectOptionsService\r\n      .getLanguages()\r\n      .subscribe(options => {\r\n        this.languages = options;\r\n      });\r\n\r\n    this.selectOptionsService\r\n      .getUserRoles()\r\n      .subscribe(options => {\r\n        this.userRoles = options;\r\n      });\r\n  }\r\n\r\n  private prepareUserCreationModel(): UserCreationModel {\r\n    const user = <UserCreationModel>{\r\n      Email: this.form.value.Email,\r\n      FirstName: this.form.value.FirstName,\r\n      IsActive: this.form.value.IsActive,\r\n      LanguageId: this.form.value.LanguageId,\r\n      LastName: this.form.value.LastName,\r\n      Login: this.form.value.Login,\r\n      Password: this.form.value.Password,\r\n      UserRoleId: this.form.value.UserRoleId\r\n    };\r\n\r\n    return user;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { ConfirmationService, SelectItem } from \"primeng/api\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { UserPermissionEnum } from \"src/app/enums/user-permission.enum\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { PrimeNgHelper } from \"src/app/tools/primeNgHelper\";\r\nimport { RegexPatterns } from \"src/app/tools/regexPatterns\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { Routes } from \"src/app/constants/routes.constants\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\nimport { AccessControlForm } from \"../../abstract/forms/access-control-form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { StringBuilder } from \"src/app/tools/stringBuilder\";\r\nimport { UserDetailsModel } from \"src/app/interfaces/user\";\r\n\r\n@Component({\r\n  selector: \"user-details\",\r\n  templateUrl: \"./user-details.component.html\"\r\n})\r\nexport class UserDetailsComponent\r\n  extends AccessControlForm<UserDetailsModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareUserDetailsModel;\r\n\r\n  protected override afterSubmitionCustomOperationsHandler = undefined;\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n  protected override entityId: string;\r\n\r\n  user: UserDetailsModel;\r\n  userRoles: SelectItem<number>[];\r\n\r\n  public override get shouldActionsBeDisabled(): boolean {\r\n    return super.shouldActionsBeDisabled ||\r\n      !this.user;\r\n  }\r\n\r\n  constructor(\r\n    protected override readonly activatedRoute: ActivatedRoute,\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n\r\n    super(\r\n      activatedRoute,\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteUser',\r\n      ApiRoutes.user.delete,\r\n      dialogMessageService,\r\n      'User',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      router,\r\n      ApiRoutes.user.put,\r\n      translate,\r\n      [UserPermissionEnum.Users_CanModify],\r\n      Routes.users.navigations.list);\r\n\r\n    this.createForm({\r\n      CreatedOn: [{ value: '', disabled: true }],\r\n      Email: ['', Validators.pattern(RegexPatterns.emailPattern)],\r\n      FirstName: ['', Validators.required],\r\n      IsActive: false,\r\n      LastName: ['', Validators.required],\r\n      Login: [{ value: '', disabled: true }],\r\n      UserRoleId: null,\r\n      Password: ['', Validators.pattern(RegexPatterns.passwordPattern)]\r\n    });\r\n\r\n    this.loadUser();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  public onBack() {\r\n    this.router.navigate([Routes.users.navigations.list]);\r\n  }\r\n\r\n  private getEntityInstanceName(): string {\r\n    return new StringBuilder(this.user.LastName)\r\n      .append(' ')\r\n      .append(this.user.FirstName)\r\n      .toString();\r\n  }\r\n\r\n  private isPasswordFieldFilled() {\r\n    return this.form.value.Password.length > 0;\r\n  }\r\n\r\n  private loadUser() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<UserDetailsModel>(ApiRoutes.user.getById(this.entityId))\r\n      .subscribe(result => {\r\n        this.user = result;\r\n\r\n        this.updateForm({\r\n          CreatedOn: PrimeNgHelper.getDateFromCalendarAsString(new Date(this.user.CreatedOn ?? \"\")),\r\n          Email: this.user.Email,\r\n          FirstName: this.user.FirstName,\r\n          IsActive: this.user.IsActive,\r\n          LastName: this.user.LastName,\r\n          Login: this.user.Login,\r\n          UserRoleId: this.user.UserRoleId.toString(),\r\n        });\r\n      });\r\n  }\r\n\r\n  private populateDropdowns() {\r\n    this.selectOptionsService\r\n      .getUserRoles()\r\n      .subscribe(options => {\r\n        this.userRoles = options;\r\n      });\r\n  }\r\n\r\n  private prepareUserDetailsModel(): UserDetailsModel {\r\n    const user = <UserDetailsModel>{\r\n      Email: this.form.value.Email,\r\n      FirstName: this.form.value.FirstName,\r\n      Id: this.user.Id,\r\n      IsActive: this.form.value.IsActive,\r\n      LastName: this.form.value.LastName,\r\n      UserRoleId: this.form.value.UserRoleId\r\n    };\r\n\r\n    if (this.isPasswordFieldFilled()) {\r\n      user.Password = this.form.value.Password;\r\n    }\r\n\r\n    return user;\r\n  }\r\n}","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { PngTableColumn } from '../../../interfaces/png';\r\nimport { UserListItemModel, UserListModel } from 'src/app/interfaces/user';\r\nimport { Table } from 'primeng/table';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ConfirmationService, LazyLoadEvent, SelectItem } from 'primeng/api';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { FilterService } from '../../../services/filters/filter.service';\r\nimport { SelectOptionsService } from 'src/app/services/select-options/select-options.service';\r\nimport { ApiRoutes } from 'src/app/constants/api-routes.constants';\r\nimport { Router } from '@angular/router';\r\nimport { StringBuilder } from 'src/app/tools/stringBuilder';\r\nimport { UserPermissionEnum } from 'src/app/enums/user-permission.enum';\r\nimport { ErrorService } from 'src/app/services/errors/error.service';\r\nimport { DialogMessageService } from 'src/app/services/messages/dialog-message.service';\r\nimport { ConsoleMessageService } from 'src/app/services/messages/console-message.service';\r\nimport { Routes } from 'src/app/constants/routes.constants';\r\nimport { AccessControlComponent } from '../../abstract/access-controls/access-control';\r\nimport { AuthorizationService } from 'src/app/services/authorization/authorization.service';\r\nimport { FilterTypeEnum } from 'src/app/enums/filter-type.enum';\r\n\r\n@Component({\r\n  selector: \"user-list\",\r\n  templateUrl: \"./user-list.component.html\"\r\n})\r\nexport class UserListComponent\r\n  extends AccessControlComponent<UserListItemModel>\r\n  implements OnInit {\r\n\r\n  protected override deletedEntityInstanceIdentificationInitializer = this.getEntityInstanceName;\r\n\r\n  private readonly _dataPopulator = {\r\n    multiSelects: {\r\n      userRoles: {\r\n        get: () => this.getUserRoleMultiSelectData(),\r\n        set: (userRoles: SelectItem[]) => this.setUserRoleMultiSelectData(userRoles)\r\n      }\r\n    },\r\n    users: {\r\n      get: (event: LazyLoadEvent) => this.getUsers(event),\r\n      set: (users: UserListModel) => this.setUsers(users)\r\n    }\r\n  };\r\n\r\n  private tempLazyLoadEvent: LazyLoadEvent;\r\n\r\n  cols: PngTableColumn[];\r\n  totalRecords: number;\r\n  userRoleOptions: SelectItem[];\r\n  users: UserListItemModel[];\r\n\r\n  @ViewChild('dataTable') dataTable: Table;\r\n\r\n  constructor(\r\n    protected override readonly authorizationService: AuthorizationService,\r\n    protected override readonly confirmationService: ConfirmationService,\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    public readonly filterService: FilterService,\r\n    protected override readonly httpClient: HttpClient,\r\n    protected override readonly router: Router,\r\n    public readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n    super(\r\n      authorizationService,\r\n      confirmationService,\r\n      consoleMessageService,\r\n      'deleteUser',\r\n      ApiRoutes.user.delete,\r\n      dialogMessageService,\r\n      'User',\r\n      errorService,\r\n      httpClient,\r\n      () => {\r\n        this._dataPopulator.users\r\n          .get(this.tempLazyLoadEvent)\r\n          .subscribe(result => this._dataPopulator.users.set(result));\r\n      },\r\n      router,\r\n      translate,\r\n      [UserPermissionEnum.Users_CanModify]);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cols = [\r\n      <PngTableColumn>{\r\n        field: 'Login',\r\n        header: 'User.Login',\r\n        width: '10%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'FirstName',\r\n        header: 'User.FirstName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'LastName',\r\n        header: 'User.LastName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'UserRoleName',\r\n        header: 'User.UserRoleName',\r\n        width: '20%',\r\n        filterType: FilterTypeEnum.Text,\r\n        applyGlobalFiltering: true,\r\n        replaceWith: 'UserRoleId'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'IsActive',\r\n        header: 'User.IsActive',\r\n        width: '10%'\r\n      },\r\n      <PngTableColumn>{\r\n        field: 'Actions',\r\n        header: '',\r\n        width: '20%'\r\n      }\r\n    ];\r\n\r\n    this._dataPopulator.multiSelects.userRoles\r\n      .get()\r\n      .subscribe(userRoles => this._dataPopulator.multiSelects.userRoles.set(userRoles));\r\n  }\r\n\r\n  public loadUsersLazy(event: LazyLoadEvent) {\r\n    this.tempLazyLoadEvent = event;\r\n    this._dataPopulator.users\r\n      .get(event)\r\n      .subscribe(result => this._dataPopulator.users.set(result));\r\n  }\r\n\r\n  public onCreate() {\r\n    this.router.navigate([Routes.users.navigations.creation]);\r\n  }\r\n\r\n  public onEdit(user: UserListItemModel) {\r\n    this.router.navigate([Routes.users.navigations.edition(user.Id)]);\r\n  }\r\n\r\n  private getEntityInstanceName(user: UserListItemModel): string {\r\n    return new StringBuilder(user.LastName)\r\n      .append(' ')\r\n      .append(user.FirstName)\r\n      .toString();\r\n  }\r\n\r\n  private getUserRoleMultiSelectData() {\r\n    return this.selectOptionsService.getUserRoles();\r\n  }\r\n\r\n  private getUsers(event: LazyLoadEvent) {\r\n    event.sortField ??= this.cols[0]?.field;\r\n\r\n    return this.httpClient\r\n      .get<UserListModel>(ApiRoutes.user.getAll(event, this.cols));\r\n  }\r\n\r\n  private setUserRoleMultiSelectData(userRoles: SelectItem[]) {\r\n    this.userRoleOptions = userRoles;\r\n\r\n    const userRoleColumn = this.cols.find(c => c.field === \"UserRoleName\");\r\n    if (userRoleColumn) {\r\n      userRoleColumn.options = this.userRoleOptions;\r\n    }\r\n  }\r\n\r\n  private setUsers(users: UserListModel) {\r\n    this.totalRecords = users.TotalRowsCount;\r\n    this.users = users.List;\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { SelectItem } from \"primeng/api\";\r\nimport { ApiRoutes } from \"src/app/constants/api-routes.constants\";\r\nimport { UserProfileModel } from \"src/app/interfaces/user\";\r\nimport { SelectOptionsService } from \"src/app/services/select-options/select-options.service\";\r\nimport { RegexPatterns } from \"src/app/tools/regexPatterns\";\r\nimport { ErrorService } from \"src/app/services/errors/error.service\";\r\nimport { DialogMessageService } from \"src/app/services/messages/dialog-message.service\";\r\nimport { ConsoleMessageService } from \"src/app/services/messages/console-message.service\";\r\nimport { Routes } from \"src/app/constants/routes.constants\";\r\nimport { MenuService } from \"src/app/layout/services/menu.service\";\r\nimport { Form } from \"../../abstract/forms/form\";\r\nimport { FormModeEnum } from \"src/app/enums/form-mode.enum\";\r\nimport { AuthorizationService } from \"src/app/services/authorization/authorization.service\";\r\n\r\n@Component({\r\n  selector: \"user-profile\",\r\n  templateUrl: \"./user-profile.component.html\"\r\n})\r\nexport class UserProfileComponent\r\n  extends Form<UserProfileModel>\r\n  implements OnInit {\r\n\r\n  public override readonly beforeSubmitionCustomOperationsHandler = this.prepareUserProfileModel;\r\n\r\n  protected override afterSubmitionCustomOperationsHandler = undefined;\r\n\r\n  private readonly entityId: string;\r\n\r\n  user: UserProfileModel;\r\n  userRoles: SelectItem<number>[];\r\n\r\n  constructor(\r\n    protected override readonly consoleMessageService: ConsoleMessageService,\r\n    protected override readonly dialogMessageService: DialogMessageService,\r\n    protected override readonly errorService: ErrorService,\r\n    protected override readonly formBuilder: FormBuilder,\r\n    protected override readonly httpClient: HttpClient,\r\n    private readonly menuService: MenuService,\r\n    protected override readonly router: Router,\r\n    private readonly selectOptionsService: SelectOptionsService,\r\n    public override readonly translate: TranslateService\r\n  ) {\r\n\r\n    super(\r\n      consoleMessageService,\r\n      dialogMessageService,\r\n      'User',\r\n      errorService,\r\n      formBuilder,\r\n      httpClient,\r\n      FormModeEnum.Edition,\r\n      router,\r\n      ApiRoutes.user.saveProfile,\r\n      translate,\r\n      Routes.home.navigations.default);\r\n\r\n    this.createForm({\r\n      Email: ['', Validators.pattern(RegexPatterns.emailPattern)],\r\n      FirstName: ['', Validators.required],\r\n      LastName: ['', Validators.required],\r\n      Login: [{ value: '', disabled: true }],\r\n      UserRoleId: null,\r\n      Password: ['', Validators.pattern(RegexPatterns.passwordPattern)]\r\n    });\r\n\r\n    this.entityId = AuthorizationService.currentUserId!;\r\n    this.loadUser();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.populateDropdowns();\r\n  }\r\n\r\n  public onBack() {\r\n    const firstMenuItemUserIsAuthorizedFor = this.menuService.getFirstMenuItemUserIsAuthorizedFor();\r\n    this.router.navigate([Routes.home.navigations.default]);\r\n  }\r\n\r\n  private isPasswordFieldFilled() {\r\n    return this.form.value.Password.length > 0;\r\n  }\r\n\r\n  private loadUser() {\r\n    if (!this.entityId)\r\n      return;\r\n\r\n    this.httpClient\r\n      .get<UserProfileModel>(ApiRoutes.user.getProfileById(this.entityId))\r\n      .subscribe(result => {\r\n        this.user = result;\r\n\r\n        this.updateForm({\r\n          Email: this.user.Email,\r\n          FirstName: this.user.FirstName,\r\n          LastName: this.user.LastName,\r\n          Login: this.user.Login,\r\n          UserRoleId: this.user.UserRoleId.toString(),\r\n        });\r\n      });\r\n  }\r\n\r\n  private populateDropdowns() {\r\n    this.selectOptionsService\r\n      .getUserRoles()\r\n      .subscribe(options => {\r\n        this.userRoles = options;\r\n      });\r\n  }\r\n\r\n  private prepareUserProfileModel(): UserProfileModel {\r\n    const user = <UserProfileModel>{\r\n      Email: this.form.value.Email,\r\n      FirstName: this.form.value.FirstName,\r\n      Id: this.user.Id,\r\n      LastName: this.form.value.LastName\r\n    };\r\n\r\n    if (this.isPasswordFieldFilled()) {\r\n      user.Password = this.form.value.Password;\r\n    }\r\n\r\n    return user;\r\n  }\r\n}","import { LazyLoadEvent } from \"primeng/api\";\r\nimport { PngTableColumn } from \"../interfaces/png\";\r\nimport { PngTableSearchQueryBuilder } from \"../tools/png-table-search-query-builder\";\r\n\r\nexport const ApiRoutes = {\r\n  audit: {\r\n    getObjectHistory: (event: LazyLoadEvent, columns: PngTableColumn[], entityId: string, entityTableName: string) => `audit${new PngTableSearchQueryBuilder(event, columns).create()}&entityId=${entityId}&entityTableName=${entityTableName}`,\r\n    getFieldNames: \"audit/getFieldNames\"\r\n  },\r\n  client: {\r\n    delete: (clientId: string) => `client/${clientId}`,\r\n    getAll: (event: LazyLoadEvent, columns: PngTableColumn[]) => `client${new PngTableSearchQueryBuilder(event, columns).create()}`,\r\n    getById: (clientId: string) => `client/${clientId}`,\r\n    post: \"client\",\r\n    put: \"client\"\r\n  },\r\n  clientRepresentative: {\r\n    delete: (clientRepresentativeId: string) => `client/representative/${clientRepresentativeId}`,\r\n    getAll: (event: LazyLoadEvent, columns: PngTableColumn[], clientId: string) => `client/representative${new PngTableSearchQueryBuilder(event, columns).create()}&clientId=${clientId}`,\r\n    getById: (clientRepresentativeId: string) => `client/representative/${clientRepresentativeId}`,\r\n    post: \"client/representative\",\r\n    put: \"client/representative\"\r\n  },\r\n  equipment: {\r\n    delete: (equipmentId: string) => `equipment/${equipmentId}`,\r\n    getAll: (event: LazyLoadEvent, columns: PngTableColumn[]) => `equipment${new PngTableSearchQueryBuilder(event, columns).create()}`,\r\n    file: {\r\n      photo: {\r\n        download: (photoId: string) => `equipment/file/photo/download/${photoId}`,\r\n        makeThumbnailForFile: `equipment/file/photo/makeThumbnailForFile`,\r\n        upload: {\r\n          multiple: `equipment/file/photo/upload/multiple`,\r\n        }\r\n      }\r\n    },\r\n    getById: (equipmentId: string) => `equipment/${equipmentId}`,\r\n    post: \"equipment\",\r\n    put: \"equipment\"\r\n  },\r\n  identity: {\r\n    authenticate: \"identity/authenticate\",\r\n    refreshToken: \"identity/refreshToken\"\r\n  },\r\n  manufacturer: {\r\n    delete: (manufacturerId: string) => `manufacturer/${manufacturerId}`,\r\n    getAll: (event: LazyLoadEvent, columns: PngTableColumn[]) => `manufacturer${new PngTableSearchQueryBuilder(event, columns).create()}`,\r\n    getById: (manufacturerId: string) => `manufacturer/${manufacturerId}`,\r\n    post: \"manufacturer\",\r\n    put: \"manufacturer\"\r\n  },\r\n  selectOptions: {\r\n    audits: (event: LazyLoadEvent, columns: PngTableColumn[], entityId: string, entityTableName: string) => `audit/getFieldNames${new PngTableSearchQueryBuilder(event, columns).create()}&entityId=${entityId}&entityTableName=${entityTableName}`,\r\n    clientTypes: \"selectoptions/clientTypes\",\r\n    countries: \"selectoptions/countries\",\r\n    equipmentTypes: \"selectoptions/equipmentTypes\",\r\n    languages: \"selectoptions/languages\",\r\n    manufacturers: \"selectoptions/manufacturers\",\r\n    userRoles: \"selectoptions/userRoles\",\r\n    yesNoOptions: \"selectoptions/yesNo\"\r\n  },\r\n  user: {\r\n    changeLanguage: \"user/changeLanguage\",\r\n    changeRole: \"user/changeRole\",\r\n    changeTheme: \"user/changeTheme\",\r\n    delete: (userId: string) => `user/${userId}`,\r\n    getAll: (event: LazyLoadEvent, columns: PngTableColumn[]) => `user${new PngTableSearchQueryBuilder(event, columns).create()}`,\r\n    getById: (userId: string) => `user/${userId}`,\r\n    getLanguage: (userId: string) => `user/getLanguage/${userId}`,\r\n    getProfileById: (userId: string) => `user/profile/${userId}`,\r\n    getTheme: (userId: string) => `user/getTheme/${userId}`,\r\n    post: \"user\",\r\n    put: \"user\",\r\n    saveProfile: \"user/profile\"\r\n  },\r\n  userRole: {\r\n    delete: (userRoleId: number) => `userRole/${userRoleId}`,\r\n    getAll: (event: LazyLoadEvent, columns: PngTableColumn[]) => `userRole${new PngTableSearchQueryBuilder(event, columns).create()}`,\r\n    getById: (userRoleId: number) => `userRole/${userRoleId}`,\r\n    getUserRolePermissionsForCreation: \"userRole/getUserRolePermissionsForCreation\",\r\n    post: \"userRole\",\r\n    put: \"userRole\"\r\n  }\r\n}","export const Assets = {\r\n  images: {\r\n    notFound: {\r\n      path: '/assets/images/not-found.png'\r\n    }\r\n  }\r\n}","export const LIST_ICON_NAME = 'pi pi-list'\r\nexport const MODIFY_ICON_NAME = 'pi pi-pencil';\r\n\r\nexport const Icons: { [key: string]: string } = {\r\n  'Permissions.Clients': 'fa fa-solid fa-face-smile',\r\n  'Permissions.ClientRepresentatives': 'fa fa-solid fa-circle-user',\r\n  'Permissions.UserRoles': 'pi pi-users',\r\n  'Permissions.Users': 'pi pi-user'\r\n}","export const LOCAL_STORAGE_PROPERTIES = {\r\n  LanguageId: 'languageId'\r\n};","export const Routes = {\r\n  home: {\r\n    breadcrumbs: {\r\n      default: 'General.Dashboard'\r\n    },\r\n    navigations: {\r\n      default: 'home'\r\n    },\r\n    paths: {\r\n      default: 'home'\r\n    }\r\n  },\r\n  login: {\r\n    navigations: {\r\n      default: 'login'\r\n    },\r\n    paths: {\r\n      default: 'login'\r\n    }\r\n  },\r\n  clientRepresentatives: {\r\n    breadcrumbs: {\r\n      creation: 'ClientRepresentative.Create',\r\n      edition: 'ClientRepresentative.Edit',\r\n      list: 'ClientRepresentative.List'\r\n    },\r\n    navigations: {\r\n      creation: 'home/client-representatives/create',\r\n      edition: (id: string) => `home/client-representatives/edit/${id}`,\r\n      list: 'home/client-representatives'\r\n    },\r\n    paths: {\r\n      create: 'create',\r\n      edit: 'edit/:id',\r\n      list: 'client-representatives'\r\n    }\r\n  },\r\n  clients: {\r\n    breadcrumbs: {\r\n      creation: 'Client.Create',\r\n      edition: 'Client.Edit',\r\n      list: 'Client.List'\r\n    },\r\n    navigations: {\r\n      creation: 'home/clients/create',\r\n      edition: (id: string) => `home/clients/edit/${id}`,\r\n      list: 'home/clients'\r\n    },\r\n    paths: {\r\n      create: 'create',\r\n      edit: 'edit/:id',\r\n      list: 'clients'\r\n    },\r\n    tabs: {\r\n      general: {\r\n        index: 0\r\n      },\r\n      representatives: {\r\n        index: 1\r\n      },\r\n      audits: {\r\n        index: 2\r\n      }\r\n    }\r\n  },\r\n  equipments: {\r\n    breadcrumbs: {\r\n      creation: 'Equipment.Create',\r\n      edition: 'Equipment.Edit',\r\n      list: 'Equipment.List'\r\n    },\r\n    navigations: {\r\n      creation: 'home/equipments/create',\r\n      edition: (id: string) => `home/equipments/edit/${id}`,\r\n      list: `home/equipments`\r\n    },\r\n    paths: {\r\n      create: 'create',\r\n      edit: 'edit/:id',\r\n      list: 'equipments'\r\n    }\r\n  },\r\n  manufacturers: {\r\n    breadcrumbs: {\r\n      creation: 'Manufacturer.Create',\r\n      edition: 'Manufacturer.Edit',\r\n      list: 'Manufacturer.List'\r\n    },\r\n    navigations: {\r\n      creation: 'home/manufacturers/create',\r\n      edition: (id: string) => `home/manufacturers/edit/${id}`,\r\n      list: `home/manufacturers`\r\n    },\r\n    paths: {\r\n      create: 'create',\r\n      edit: 'edit/:id',\r\n      list: 'manufacturers'\r\n    }\r\n  },\r\n  userRoles: {\r\n    breadcrumbs: {\r\n      creation: 'UserRole.Create',\r\n      edition: 'UserRole.Edit',\r\n      list: 'UserRole.List'\r\n    },\r\n    navigations: {\r\n      creation: 'home/user-roles/create',\r\n      edition: (id: number) => `home/user-roles/edit/${id}`,\r\n      list: 'home/user-roles'\r\n    },\r\n    paths: {\r\n      create: 'create',\r\n      edit: 'edit/:id',\r\n      list: 'user-roles'\r\n    }\r\n  },\r\n  users: {\r\n    breadcrumbs: {\r\n      creation: 'User.Create',\r\n      edition: 'User.Edit',\r\n      list: 'User.List',\r\n      profile: 'User.Profile',\r\n    },\r\n    navigations: {\r\n      creation: 'home/users/create',\r\n      edition: (id: string) => `home/users/edit/${id}`,\r\n      list: 'home/users',\r\n      profile: 'home/profile'\r\n    },\r\n    paths: {\r\n      create: 'create',\r\n      edit: 'edit/:id',\r\n      list: 'users',\r\n      profile: 'profile',\r\n    }\r\n  }\r\n}","export enum ApiResultEnum {\r\n  AssignedRoleDeletionAttempt,\r\n  BadRequest,\r\n  DoesNotExist,\r\n  DoesNotMatchJWT,\r\n  Error,\r\n  ExistsInDatabase,\r\n  Invalid,\r\n  LoginExists,\r\n  NameExists,\r\n  NationalIdExists,\r\n  None,\r\n  NotActive,\r\n  NotFound,\r\n  NoUserPermissionAssigned,\r\n  OK,\r\n  RepresentativeExists,\r\n  TheOnlyAssignedRoleDeletionAttempt,\r\n  Used,\r\n  UserHasBeenAlreadyAssignedToRole,\r\n  WrongOldPassword,\r\n}","export enum ClientTypeEnum {\r\n  Private = 1,\r\n  Company = 2,\r\n}","export enum ErrorMessageTypeEnum {\r\n  Email = \"Email\",\r\n  Empty = \"Empty\",\r\n  Length = \"Length\",\r\n  MatchAllowedLetters = \"MatchAllowedLetters\",\r\n  MatchSmallLetters = \"MatchSmallLetters\"\r\n}","export enum FilterTypeEnum {\r\n  Date = \"date\",\r\n  Numeric = \"numeric\",\r\n  Special = \"special\",\r\n  Text = \"text\",\r\n}","export enum FormModeEnum {\r\n  Creation,\r\n  Edition\r\n}","export enum LanguageCodeEnum {\r\n  En = 1,\r\n  Pl = 2\r\n}","export enum MessageLifeTimeEnum {\r\n  Error = 2000,\r\n  Info = 2000,\r\n  Success = 3000,\r\n  Warning = 2000\r\n}","export enum MessageTypeEnum {\r\n  Error = \"error\",\r\n  Info = \"info\",\r\n  Success = \"success\",\r\n  Warning = \"warn\"\r\n}","export enum SearchOperatorEnum {\r\n  MatchAll = \"and\",\r\n  MatchAny = \"or\"\r\n}","export enum UserPermissionEnum {\r\n  ForAll = 0,\r\n  Users_CanList = 1,\r\n  Users_CanModify = 2,\r\n  UserRoles_CanList = 3,\r\n  UserRoles_CanModify = 4,\r\n  Clients_CanList = 5,\r\n  Clients_CanModify = 6,\r\n  ClientRepresentatives_CanList = 7,\r\n  ClientRepresentatives_CanModify = 8,\r\n  Equipments_CanList = 9,\r\n  Equipments_CanModify = 10,\r\n  Manufacturers_CanList = 11,\r\n  Manufacturers_CanModify = 12,\r\n}","export class NameInLanguage {\r\n  Name: string;\r\n  LanguageId: number;\r\n  LanguageName: string;\r\n}\r\n\r\nexport abstract class NameInLanguagesBase {\r\n  NameInLanguages: NameInLanguage[];\r\n}","import { SelectItem } from \"primeng/api\";\r\nimport { FilterTypeEnum } from \"../enums/filter-type.enum\";\r\n\r\nexport class PngTable {\r\n  cols: PngTableColumn[] = [];\r\n\r\n  constructor(cols: PngTableColumn[]) {\r\n    this.cols = cols;\r\n  }\r\n\r\n  public setOptionsForColumn(columnName: string, options: SelectItem[]) {\r\n    const column = this.cols.find(c => c.field === columnName);\r\n\r\n    if (column) {\r\n      column.options = options;\r\n    }\r\n  }\r\n}\r\n\r\nexport class PngTableColumn {\r\n  applyGlobalFiltering: boolean;\r\n  field: string;\r\n  filterMatchMode?: string;\r\n  header: string;\r\n  options?: SelectItem[];\r\n  replaceWith?: string;\r\n  filterType: FilterTypeEnum = FilterTypeEnum.Text;\r\n  width?: string;\r\n\r\n  constructor(field: string, header: string, width: string, applyGlobalFiltering?: boolean) {\r\n    this.field = field;\r\n    this.header = header;\r\n    this.width = width;\r\n    this.applyGlobalFiltering = applyGlobalFiltering ? applyGlobalFiltering : false;\r\n    this.filterType = FilterTypeEnum.Text;\r\n  }\r\n}\r\n\r\nexport class PngTreeColumn {\r\n  field: string;\r\n  header: string;\r\n  icon: string;\r\n}","export class Menu {\r\n    Icon?: string;\r\n    Items?: MenuArray;\r\n    Label: string;\r\n    Permissions?: number[];\r\n    RouterLink?: string[];\r\n}\r\n\r\nexport class MenuArray extends Array<Menu> {\r\n    public getItemsForLabel(label: string): MenuArray | undefined {\r\n        return this.find(m => m.Label == label)?.Items;\r\n    }\r\n}\r\n\r\nexport interface SelectOption {\r\n    IsSelected: boolean;\r\n    Name: string;\r\n    Value: string | number;\r\n}","import { UserPermissionNode } from \"../components/user-roles/permissions/models/user-permission-node\";\r\n\r\nexport class PermissionGroupItemModel {\r\n  Name: string;\r\n  Permissions: PermissionItemModel[];\r\n}\r\n\r\nexport class PermissionItemModel {\r\n  Id: number;\r\n  Name: string;\r\n  IsSelected: boolean;\r\n  LinkedPermissionsIds: number[];\r\n}\r\n\r\nexport class SelectedUserPermissionNodeArray extends Array<UserPermissionNode<any>> {\r\n  public tryPush(item: UserPermissionNode<any>) {\r\n    if (item.data.isSelected)\r\n      this.push(item);\r\n  }\r\n}\r\n\r\nexport interface UserPermissionNodeData {\r\n  icon?: string;\r\n  id: number | null,\r\n  isSelected?: boolean,\r\n  linkedPermissionIds: number[],\r\n  name: string\r\n}","import { UserPermissionNode } from \"../components/user-roles/permissions/models/user-permission-node\";\r\nimport { NameInLanguagesBase } from \"./name-in-language\";\r\nimport { PermissionGroupItemModel, PermissionItemModel, SelectedUserPermissionNodeArray } from \"./user-permission\";\r\n\r\nexport class UserRoleCreationModel extends NameInLanguagesBase {\r\n  PermissionsSelected: PermissionItemModel[] = [];\r\n\r\n  public doesPermissionExistWithinSelected(permissionId: number) {\r\n    return this.PermissionsSelected.find(p => p.Id === permissionId);\r\n  }\r\n}\r\n\r\nexport class UserRoleDetailsModel extends NameInLanguagesBase {\r\n  Id: number;\r\n  Name?: string;\r\n  GroupedPermissions: PermissionGroupItemModel[] = [];\r\n  PermissionsSelected: PermissionItemModel[] = [];\r\n\r\n  public doesPermissionExistWithinSelected(permissionId: number) {\r\n    return this.PermissionsSelected.find(p => p.Id === permissionId);\r\n  }\r\n}\r\n\r\nexport interface UserRoleListModel {\r\n  List: UserRoleListItemModel[];\r\n  TotalRowsCount: number;\r\n}\r\n\r\nexport interface UserRoleListItemModel {\r\n  Id: number;\r\n  Name: string;\r\n}\r\n\r\nexport interface UserRolePermissionsDestinations {\r\n  allItems: UserPermissionNode<any>[];\r\n  selectedItems: SelectedUserPermissionNodeArray;\r\n}\r\n\r\nexport interface UserRolePermissionsForCreation {\r\n  List: PermissionGroupItemModel[];\r\n}","import { Component } from '@angular/core';\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { LayoutService } from \"./services/app.layout.service\";\r\nimport { ApiRoutes } from '../constants/api-routes.constants';\r\nimport { AuthorizationService } from '../services/authorization/authorization.service';\r\nimport { UserChangeThemeModel } from '../interfaces/user';\r\nimport { ApiResultEnum } from '../enums/api-result.enum';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n    selector: 'app-footer',\r\n    templateUrl: './app.footer.component.html'\r\n})\r\nexport class AppFooterComponent {\r\n\r\n    isDarkModeThemeSelected: boolean = false;\r\n\r\n    constructor(\r\n        private readonly httpClient: HttpClient,\r\n        public readonly layoutService: LayoutService,\r\n        public readonly translate: TranslateService) {\r\n\r\n        const isDarkModeThemeSelectedFromStorage = localStorage.getItem('isDarkModeThemeSelected');\r\n\r\n        if (isDarkModeThemeSelectedFromStorage) {\r\n            this.isDarkModeThemeSelected = Boolean(isDarkModeThemeSelectedFromStorage);\r\n        }\r\n\r\n        this.httpClient\r\n            .get<boolean>(ApiRoutes.user.getTheme(AuthorizationService.currentUserId!))\r\n            .subscribe({\r\n                next: result => {\r\n                    this.isDarkModeThemeSelected = result;\r\n                    this.changeTheme();\r\n                }\r\n            });\r\n    }\r\n\r\n    changeUserTheme() {\r\n        localStorage.setItem('isDarkModeThemeSelected', this.isDarkModeThemeSelected.toString());\r\n\r\n        const model = <UserChangeThemeModel>{\r\n            Id: AuthorizationService.currentUserId\r\n        };\r\n\r\n        this.httpClient\r\n            .post<string>(ApiRoutes.user.changeTheme, model)\r\n            .subscribe({\r\n                next: result => {\r\n                    if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n                        this.changeTheme();\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    private changeTheme() {\r\n        const theme = this.isDarkModeThemeSelected ? 'arya-blue' : 'saga-orange';\r\n        const colorScheme = this.isDarkModeThemeSelected ? 'dark' : 'light';\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const newHref = themeLink.getAttribute('href')!.replace(this.layoutService.config.theme, theme);\r\n\r\n        this.layoutService.config.colorScheme\r\n        this.replaceThemeLink(newHref, () => {\r\n            this.layoutService.config.theme = theme;\r\n            this.layoutService.config.colorScheme = colorScheme;\r\n            this.layoutService.onConfigUpdate();\r\n        });\r\n    }\r\n\r\n    private replaceThemeLink(href: string, onComplete: Function) {\r\n        const id = 'theme-css';\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const cloneLinkElement = <HTMLLinkElement>themeLink.cloneNode(true);\r\n\r\n        cloneLinkElement.setAttribute('href', href);\r\n        cloneLinkElement.setAttribute('id', id + '-clone');\r\n\r\n        themeLink.parentNode!.insertBefore(cloneLinkElement, themeLink.nextSibling);\r\n\r\n        cloneLinkElement.addEventListener('load', () => {\r\n            themeLink.remove();\r\n            cloneLinkElement.setAttribute('id', id);\r\n            onComplete();\r\n        });\r\n    }\r\n}\r\n","import { Component, OnDestroy, Renderer2, ViewChild } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { filter, Subscription } from 'rxjs';\r\nimport { LayoutService } from \"./services/app.layout.service\";\r\nimport { AppSidebarComponent } from \"./app.sidebar.component\";\r\nimport { AppTopBarComponent } from './app.topbar.component';\r\nimport { AuthenticationService } from '../services/authentication/authentication.service';\r\nimport { Routes } from '../constants/routes.constants';\r\nimport { MenuService } from './services/menu.service';\r\n\r\n@Component({\r\n    selector: 'app-layout',\r\n    templateUrl: './app.layout.component.html',\r\n})\r\nexport class AppLayoutComponent implements OnDestroy {\r\n\r\n    isUserLoggedIn: boolean;\r\n    menuOutsideClickListener: any;\r\n    overlayMenuOpenSubscription: Subscription;\r\n    profileMenuOutsideClickListener: any;\r\n\r\n    @ViewChild(AppSidebarComponent) appSidebar!: AppSidebarComponent;\r\n    @ViewChild(AppTopBarComponent) appTopbar!: AppTopBarComponent;\r\n\r\n    constructor(\r\n        private readonly authenticationService: AuthenticationService,\r\n        public readonly layoutService: LayoutService,\r\n        private readonly menuService: MenuService,\r\n        public readonly renderer: Renderer2,\r\n        public readonly router: Router\r\n    ) {\r\n        this.isUserLoggedIn = this.authenticationService.isLoggedIn();\r\n        if (!this.isUserLoggedIn) {\r\n            this.router.navigate([Routes.login.navigations.default]);\r\n        }\r\n        else {\r\n            this.overlayMenuOpenSubscription = this.layoutService.overlayOpen$.subscribe(() => {\r\n                if (!this.menuOutsideClickListener) {\r\n                    this.menuOutsideClickListener = this.renderer.listen('document', 'click', event => {\r\n                        const isOutsideClicked = !(this.appSidebar.el.nativeElement.isSameNode(event.target) || this.appSidebar.el.nativeElement.contains(event.target)\r\n                            || this.appTopbar.menuButton.nativeElement.isSameNode(event.target) || this.appTopbar.menuButton.nativeElement.contains(event.target));\r\n\r\n                        if (isOutsideClicked) {\r\n                            this.hideMenu();\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (!this.profileMenuOutsideClickListener) {\r\n                    this.profileMenuOutsideClickListener = this.renderer.listen('document', 'click', event => {\r\n                        const isOutsideClicked = !(this.appTopbar.menu.nativeElement.isSameNode(event.target) || this.appTopbar.menu.nativeElement.contains(event.target)\r\n                            || this.appTopbar.topbarMenuButton.nativeElement.isSameNode(event.target) || this.appTopbar.topbarMenuButton.nativeElement.contains(event.target));\r\n\r\n                        if (isOutsideClicked) {\r\n                            this.hideProfileMenu();\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (this.layoutService.state.staticMenuMobileActive) {\r\n                    this.blockBodyScroll();\r\n                }\r\n            });\r\n\r\n            this.router.events.pipe(filter(event => event instanceof NavigationEnd))\r\n                .subscribe(() => {\r\n                    this.hideMenu();\r\n                    this.hideProfileMenu();\r\n                });\r\n\r\n            if (this.authenticationService.isFirstTimeLoggedIn) {\r\n                const firstMenuItemUserIsAuthorizedFor = this.menuService.getFirstMenuItemUserIsAuthorizedFor();\r\n                if (firstMenuItemUserIsAuthorizedFor?.Items && firstMenuItemUserIsAuthorizedFor.Items[0]?.RouterLink) {\r\n                    this.router.navigate(firstMenuItemUserIsAuthorizedFor!.Items![0].RouterLink!);\r\n                }\r\n\r\n                this.authenticationService.isFirstTimeLoggedIn = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    blockBodyScroll(): void {\r\n        if (document.body.classList) {\r\n            document.body.classList.add('blocked-scroll');\r\n        }\r\n        else {\r\n            document.body.className += ' blocked-scroll';\r\n        }\r\n    }\r\n\r\n    hideMenu() {\r\n        this.layoutService.state.overlayMenuActive = false;\r\n        this.layoutService.state.staticMenuMobileActive = false;\r\n        this.layoutService.state.menuHoverActive = false;\r\n        if (this.menuOutsideClickListener) {\r\n            this.menuOutsideClickListener();\r\n            this.menuOutsideClickListener = null;\r\n        }\r\n        this.unblockBodyScroll();\r\n    }\r\n\r\n    hideProfileMenu() {\r\n        this.layoutService.state.profileSidebarVisible = false;\r\n        if (this.profileMenuOutsideClickListener) {\r\n            this.profileMenuOutsideClickListener();\r\n            this.profileMenuOutsideClickListener = null;\r\n        }\r\n    }\r\n\r\n    unblockBodyScroll(): void {\r\n        if (document.body.classList) {\r\n            document.body.classList.remove('blocked-scroll');\r\n        }\r\n        else {\r\n            document.body.className = document.body.className.replace(new RegExp('(^|\\\\b)' +\r\n                'blocked-scroll'.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\r\n        }\r\n    }\r\n\r\n    get containerClass() {\r\n        return {\r\n            'layout-theme-light': this.layoutService.config.colorScheme === 'light',\r\n            'layout-theme-dark': this.layoutService.config.colorScheme === 'dark',\r\n            'layout-overlay': this.layoutService.config.menuMode === 'overlay',\r\n            'layout-static': this.layoutService.config.menuMode === 'static',\r\n            'layout-static-inactive': this.layoutService.state.staticMenuDesktopInactive && this.layoutService.config.menuMode === 'static',\r\n            'layout-overlay-active': this.layoutService.state.overlayMenuActive,\r\n            'layout-mobile-active': this.layoutService.state.staticMenuMobileActive,\r\n            'p-input-filled': this.layoutService.config.inputStyle === 'filled',\r\n            'p-ripple-disabled': !this.layoutService.config.ripple\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.overlayMenuOpenSubscription) {\r\n            this.overlayMenuOpenSubscription.unsubscribe();\r\n        }\r\n\r\n        if (this.menuOutsideClickListener) {\r\n            this.menuOutsideClickListener();\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { SidebarModule } from 'primeng/sidebar';\r\nimport { BadgeModule } from 'primeng/badge';\r\nimport { RadioButtonModule } from 'primeng/radiobutton';\r\nimport { InputSwitchModule } from 'primeng/inputswitch';\r\nimport { RippleModule } from 'primeng/ripple';\r\nimport { AppMenuComponent } from './app.menu.component';\r\nimport { AppMenuitemComponent } from './app.menuitem.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AppTopBarComponent } from './app.topbar.component';\r\nimport { AppFooterComponent } from './app.footer.component';\r\nimport { AppConfigModule } from './config/config.module';\r\nimport { AppSidebarComponent } from \"./app.sidebar.component\";\r\nimport { AppLayoutComponent } from \"./app.layout.component\";\r\nimport { MessagesModule } from 'primeng/messages';\r\n\r\n\r\n//primeng\r\nimport { BreadcrumbModule } from 'primeng/breadcrumb';\r\nimport { PanelMenuModule } from 'primeng/panelmenu';\r\nimport { SplitButtonModule } from 'primeng/splitbutton';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppFooterComponent,\r\n        AppLayoutComponent,\r\n        AppMenuComponent,\r\n        AppMenuitemComponent,\r\n        AppSidebarComponent,\r\n        AppTopBarComponent,\r\n    ],\r\n    imports: [\r\n        AppConfigModule,\r\n        BadgeModule,\r\n        BrowserAnimationsModule,\r\n        BrowserModule,\r\n        FormsModule,\r\n        HttpClientModule,\r\n        InputSwitchModule,\r\n        InputTextModule,\r\n        RadioButtonModule,\r\n        RippleModule,\r\n        RouterModule,\r\n        SidebarModule,\r\n        //primeng\r\n        BreadcrumbModule,\r\n        MessagesModule,\r\n        PanelMenuModule,\r\n        SplitButtonModule,\r\n    ],\r\n    exports: [AppLayoutComponent]\r\n})\r\nexport class AppLayoutModule { }\r\n","import { OnInit } from '@angular/core';\r\nimport { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Menu } from '../interfaces/ui-models';\r\nimport { LayoutService } from './services/app.layout.service';\r\nimport { AuthorizationService } from '../services/authorization/authorization.service';\r\nimport { MenuService } from './services/menu.service';\r\n\r\n@Component({\r\n    selector: 'app-menu',\r\n    templateUrl: './app.menu.component.html'\r\n})\r\nexport class AppMenuComponent implements OnInit {\r\n\r\n    model: any[] = [];\r\n\r\n    constructor(public layoutService: LayoutService,\r\n        private router: Router,\r\n        private menuService: MenuService,\r\n        private authorizationService: AuthorizationService,\r\n        public translate: TranslateService) {\r\n\r\n        this.buildMenu();\r\n        this.router.events.forEach(() => {\r\n            this.buildMenu();\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    public buildMenu() {\r\n        this.authorizationService.decodeTokenAndSetData();\r\n        this.model = [];\r\n        const menu = this.menuService.getMenu();\r\n        menu.forEach(menu => this.appendMenu(menu));\r\n        this.model = [...this.model];\r\n    }\r\n\r\n    private appendMenu(menu: Menu) {\r\n        if (!this.model)\r\n            return;\r\n\r\n        const menuItemsCurrentUserIsAuthorizedFor = menu.Items!.filter(item => this.isLoggedUserAuthorizedForMenu(item.Permissions!));\r\n        const menuItems: { label: string; icon: string | undefined; routerLink: string[] | undefined; }[] = [];\r\n\r\n        menuItemsCurrentUserIsAuthorizedFor.forEach(m => menuItems.push({\r\n            label: this.translate.instant(m.Label),\r\n            icon: m.Icon,\r\n            routerLink: m.RouterLink\r\n        }));\r\n\r\n        this.model.push({\r\n            label: this.translate.instant(menu.Label),\r\n            items: menuItems\r\n        });\r\n    }\r\n\r\n    private isLoggedUserAuthorizedForMenu(permissions: number[]): boolean {\r\n        return permissions.some(permission => this.authorizationService.isAuthorized([permission]));\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { MenuChangeEvent } from './api/menuchangeevent';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MenuService {\r\n\r\n    private menuSource = new Subject<MenuChangeEvent>();\r\n    private resetSource = new Subject();\r\n\r\n    menuSource$ = this.menuSource.asObservable();\r\n    resetSource$ = this.resetSource.asObservable();\r\n\r\n    onMenuStateChange(event: MenuChangeEvent) {\r\n        this.menuSource.next(event);\r\n    }\r\n\r\n    reset() {\r\n        this.resetSource.next(true);\r\n    }\r\n}\r\n","import { ChangeDetectorRef, Component, Host, HostBinding, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { Subscription } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { MenuService } from './app.menu.service';\r\nimport { LayoutService } from './services/app.layout.service';\r\n\r\n@Component({\r\n    // eslint-disable-next-line @angular-eslint/component-selector\r\n    selector: '[app-menuitem]',\r\n    template: `\r\n\t\t<ng-container>\r\n            <div *ngIf=\"root && item.visible !== false\" class=\"layout-menuitem-root-text\">{{item.label}}</div>\r\n\t\t\t<a *ngIf=\"(!item.routerLink || item.items) && item.visible !== false\" [attr.href]=\"item.url\" (click)=\"itemClick($event)\"\r\n\t\t\t   [ngClass]=\"item.class\" [attr.target]=\"item.target\" tabindex=\"0\" pRipple>\r\n\t\t\t\t<i [ngClass]=\"item.icon\" class=\"layout-menuitem-icon\"></i>\r\n\t\t\t\t<span class=\"layout-menuitem-text\">{{item.label}}</span>\r\n\t\t\t\t<i class=\"pi pi-fw pi-angle-down layout-submenu-toggler\" *ngIf=\"item.items\"></i>\r\n\t\t\t</a>\r\n\t\t\t<a *ngIf=\"(item.routerLink && !item.items) && item.visible !== false\" (click)=\"itemClick($event)\" [ngClass]=\"item.class\" \r\n\t\t\t   [routerLink]=\"item.routerLink\" routerLinkActive=\"active-route\" [routerLinkActiveOptions]=\"item.routerLinkActiveOptions||{ paths: 'exact', queryParams: 'ignored', matrixParams: 'ignored', fragment: 'ignored' }\"\r\n               [fragment]=\"item.fragment\" [queryParamsHandling]=\"item.queryParamsHandling\" [preserveFragment]=\"item.preserveFragment\" \r\n               [skipLocationChange]=\"item.skipLocationChange\" [replaceUrl]=\"item.replaceUrl\" [state]=\"item.state\" [queryParams]=\"item.queryParams\"\r\n               [attr.target]=\"item.target\" tabindex=\"0\" pRipple>\r\n\t\t\t\t<i [ngClass]=\"item.icon\" class=\"layout-menuitem-icon\"></i>\r\n\t\t\t\t<span class=\"layout-menuitem-text\">{{item.label}}</span>\r\n\t\t\t\t<i class=\"pi pi-fw pi-angle-down layout-submenu-toggler\" *ngIf=\"item.items\"></i>\r\n\t\t\t</a>\r\n\r\n\t\t\t<ul *ngIf=\"item.items && item.visible !== false\" [@children]=\"submenuAnimation\">\r\n\t\t\t\t<ng-template ngFor let-child let-i=\"index\" [ngForOf]=\"item.items\">\r\n\t\t\t\t\t<li app-menuitem [item]=\"child\" [index]=\"i\" [parentKey]=\"key\" [class]=\"child.badgeClass\"></li>\r\n\t\t\t\t</ng-template>\r\n\t\t\t</ul>\r\n\t\t</ng-container>\r\n    `,\r\n    animations: [\r\n        trigger('children', [\r\n            state('collapsed', style({\r\n                height: '0'\r\n            })),\r\n            state('expanded', style({\r\n                height: '*'\r\n            })),\r\n            transition('collapsed <=> expanded', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))\r\n        ])\r\n    ]\r\n})\r\nexport class AppMenuitemComponent implements OnInit, OnDestroy {\r\n\r\n    @Input() item: any;\r\n\r\n    @Input() index!: number;\r\n\r\n    @Input() @HostBinding('class.layout-root-menuitem') root!: boolean;\r\n\r\n    @Input() parentKey!: string;\r\n\r\n    active = false;\r\n\r\n    menuSourceSubscription: Subscription;\r\n\r\n    menuResetSubscription: Subscription;\r\n\r\n    key: string = \"\";\r\n\r\n    constructor(public layoutService: LayoutService, private cd: ChangeDetectorRef, public router: Router, private menuService: MenuService) {\r\n        this.menuSourceSubscription = this.menuService.menuSource$.subscribe(value => {\r\n            Promise.resolve(null).then(() => {\r\n                if (value.routeEvent) {\r\n                    this.active = (value.key === this.key || value.key.startsWith(this.key + '-')) ? true : false;\r\n                }\r\n                else {\r\n                    if (value.key !== this.key && !value.key.startsWith(this.key + '-')) {\r\n                        this.active = false;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        this.menuResetSubscription = this.menuService.resetSource$.subscribe(() => {\r\n            this.active = false;\r\n        });\r\n\r\n        this.router.events.pipe(filter(event => event instanceof NavigationEnd))\r\n            .subscribe(params => {\r\n                if (this.item.routerLink) {\r\n                    this.updateActiveStateFromRoute();\r\n                }\r\n            });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.key = this.parentKey ? this.parentKey + '-' + this.index : String(this.index);\r\n\r\n        if (this.item.routerLink) {\r\n            this.updateActiveStateFromRoute();\r\n        }\r\n    }\r\n\r\n    updateActiveStateFromRoute() {\r\n        let activeRoute = this.router.isActive(this.item.routerLink[0], { paths: 'exact', queryParams: 'ignored', matrixParams: 'ignored', fragment: 'ignored' });\r\n\r\n        if (activeRoute) {\r\n            this.menuService.onMenuStateChange({ key: this.key, routeEvent: true });\r\n        }\r\n    }\r\n\r\n    itemClick(event: Event) {\r\n        // avoid processing disabled items\r\n        if (this.item.disabled) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // execute command\r\n        if (this.item.command) {\r\n            this.item.command({ originalEvent: event, item: this.item });\r\n        }\r\n\r\n        // toggle active state\r\n        if (this.item.items) {\r\n            this.active = !this.active;\r\n        }\r\n\r\n        this.menuService.onMenuStateChange({ key: this.key });\r\n    }\r\n\r\n    get submenuAnimation() {\r\n        return this.root ? 'expanded' : (this.active ? 'expanded' : 'collapsed');\r\n    }\r\n\r\n    @HostBinding('class.active-menuitem') \r\n    get activeClass() {\r\n        return this.active && !this.root;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.menuSourceSubscription) {\r\n            this.menuSourceSubscription.unsubscribe();\r\n        }\r\n\r\n        if (this.menuResetSubscription) {\r\n            this.menuResetSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n","import { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { LayoutService } from \"./services/app.layout.service\";\r\nimport { AppMenuComponent } from './app.menu.component';\r\n\r\n@Component({\r\n    selector: 'app-sidebar',\r\n    templateUrl: './app.sidebar.component.html'\r\n})\r\nexport class AppSidebarComponent {\r\n\r\n    @ViewChild('appMenu') appMenu: AppMenuComponent;\r\n\r\n    constructor(public layoutService: LayoutService, public el: ElementRef) { }\r\n}\r\n\r\n","import { Component, ElementRef, Input, ViewChild } from '@angular/core';\r\nimport { MenuItem, PrimeNGConfig, SelectItem } from 'primeng/api';\r\nimport { AppComponent } from '../app.component';\r\nimport { LayoutService } from \"./services/app.layout.service\";\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AuthenticationService } from '../services/authentication/authentication.service';\r\nimport { ActivatedRoute, NavigationEnd, Router, RouterEvent, Scroll } from '@angular/router';\r\nimport { SelectOptionsService } from '../services/select-options/select-options.service';\r\nimport { LanguageCodeEnum } from '../enums/language-code.enum';\r\nimport { Title } from \"@angular/platform-browser\";\r\nimport { AppSidebarComponent } from './app.sidebar.component';\r\nimport { AuthorizationService } from '../services/authorization/authorization.service';\r\nimport { UserChangeLanguageModel } from '../interfaces/user';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ApiRoutes } from '../constants/api-routes.constants';\r\nimport { ApiResultEnum } from '../enums/api-result.enum';\r\nimport { concatMap, filter } from 'rxjs';\r\nimport { StringBuilder } from '../tools/stringBuilder';\r\nimport { Routes } from '../constants/routes.constants';\r\nimport { LOCAL_STORAGE_PROPERTIES } from '../constants/local-storage.constants';\r\n\r\n@Component({\r\n    selector: 'app-topbar',\r\n    templateUrl: './app.topbar.component.html'\r\n})\r\nexport class AppTopBarComponent {\r\n\r\n    public readonly home = { icon: 'pi pi-home', url: 'home' };\r\n\r\n    private languageId: number;\r\n\r\n    breadcrumbItems: MenuItem[] = [];\r\n    userMenuItems: MenuItem[] = [];\r\n\r\n    @Input('appSidebar') appSidebar!: AppSidebarComponent;\r\n\r\n    @ViewChild('menubutton') menuButton!: ElementRef;\r\n    @ViewChild('topbarmenubutton') topbarMenuButton!: ElementRef;\r\n    @ViewChild('topbarmenu') menu!: ElementRef;\r\n\r\n    constructor(\r\n        private activatedRoute: ActivatedRoute,\r\n        public app: AppComponent,\r\n        public authenticationService: AuthenticationService,\r\n        private config: PrimeNGConfig,\r\n        private httpClient: HttpClient,\r\n        public layoutService: LayoutService,\r\n        private router: Router,\r\n        private selectOptionsService: SelectOptionsService,\r\n        private titleService: Title,\r\n        public translate: TranslateService) {\r\n\r\n        this.updateWithLanguageOnInit();\r\n    }\r\n\r\n    public onProfileButtonClick() {\r\n        this.router.navigate([Routes.users.navigations.profile]);\r\n    }\r\n\r\n    public setTheme(withDarkMode: boolean) {\r\n        const theme = withDarkMode ? 'arya-blue' : 'saga-orange';\r\n        const colorScheme = withDarkMode ? 'dark' : 'light';\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const newHref = themeLink.getAttribute('href')!.replace(this.layoutService.config.theme, theme);\r\n\r\n        this.layoutService.config.colorScheme\r\n        this.replaceThemeLink(newHref, () => {\r\n            this.layoutService.config.theme = theme;\r\n            this.layoutService.config.colorScheme = colorScheme;\r\n            this.layoutService.onConfigUpdate();\r\n        });\r\n    }\r\n\r\n    private createBreadcrumbs(route: ActivatedRoute, urlBuilder = new StringBuilder(), breadcrumbs: MenuItem[] = []): MenuItem[] {\r\n        const children: ActivatedRoute[] = route.children;\r\n\r\n        if (children.length === 0)\r\n            return breadcrumbs;\r\n\r\n        for (const child of children) {\r\n            const routeURL: string = child.snapshot.url.map(segment => segment.path).join('/');\r\n\r\n            if (routeURL !== '') {\r\n                urlBuilder.append(`/${routeURL}`);\r\n            }\r\n\r\n            const label = child.snapshot.data['breadcrumb'];\r\n\r\n            if (label) {\r\n                breadcrumbs.push(<MenuItem>{ label: label, url: urlBuilder.toString(), target: \"_self\" });\r\n            }\r\n\r\n            return this.createBreadcrumbs(child, urlBuilder, breadcrumbs);\r\n        }\r\n\r\n        return breadcrumbs;\r\n    }\r\n\r\n    private getLanguageCodeById(id: number): string {\r\n        switch (id) {\r\n            case LanguageCodeEnum.Pl.valueOf():\r\n                return \"pl\";\r\n            case LanguageCodeEnum.En.valueOf():\r\n                return \"en\";\r\n            default:\r\n                return \"---\";\r\n        }\r\n    }\r\n\r\n    private initializeLayout() {\r\n        this.titleService.setTitle(this.translate.instant('AppName'));\r\n        this.appSidebar?.appMenu?.buildMenu();\r\n    }\r\n\r\n    private initializeUserMenu(languages: SelectItem[]) {\r\n        this.userMenuItems = [\r\n            {\r\n                label: this.translate.instant('Language.Plural'),\r\n                icon: 'fa fa-solid fa-language',\r\n                items: languages.map(l => <MenuItem>{ label: l.label, command: () => this.onLanguageChange(l.value) })\r\n            },\r\n            { label: this.translate.instant('General.LogOut'), icon: 'fa fa-power-off', command: () => this.logout() }\r\n        ];\r\n    }\r\n\r\n    private logout(): void {\r\n        if (this.authenticationService.logout()) {\r\n            this.router.navigate([Routes.login.navigations.default]);\r\n        }\r\n    }\r\n\r\n    private onLanguageChange(id: number) {\r\n        const currentUserId = AuthorizationService.currentUserId;\r\n\r\n        if (!currentUserId)\r\n            return;\r\n\r\n        this.languageId = Number(id);\r\n        localStorage.setItem(LOCAL_STORAGE_PROPERTIES.LanguageId, this.languageId.toString());\r\n\r\n        const model = <UserChangeLanguageModel>{\r\n            Id: currentUserId,\r\n            LanguageId: this.languageId\r\n        };\r\n\r\n        this.httpClient\r\n            .put<string>(ApiRoutes.user.changeLanguage, model)\r\n            .subscribe(\r\n                result => {\r\n                    if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n                        this.updateWithLanguageOnLanguageChange();\r\n                    }\r\n                }\r\n            );\r\n    }\r\n\r\n    private updateBreadcrumbItemsWithLanguage() {\r\n        this.breadcrumbItems = this.breadcrumbItems.map(breadcrumbItem => ({ ...breadcrumbItem, label: this.translate.instant(breadcrumbItem.label!) }));\r\n    }\r\n\r\n    private updateWithLanguageOnInit() {\r\n        const userLanguageId = AuthorizationService.currentUserLanguageId;\r\n\r\n        if (userLanguageId) {\r\n            this.languageId = Number(userLanguageId);\r\n        }\r\n        else {\r\n            const languageIdFromStorage = localStorage.getItem(LOCAL_STORAGE_PROPERTIES.LanguageId);\r\n\r\n            if (languageIdFromStorage) {\r\n                this.languageId = Number(languageIdFromStorage);\r\n            }\r\n        }\r\n\r\n        if (this.languageId) {\r\n            const language = this.getLanguageCodeById(this.languageId);\r\n\r\n            this.router.events\r\n                .pipe(filter(event => event instanceof Scroll || event instanceof NavigationEnd))\r\n                .pipe(\r\n                    concatMap(() => {\r\n                        this.breadcrumbItems = this.createBreadcrumbs(this.activatedRoute.root);\r\n\r\n                        return this.translate.use(language);\r\n                    }),\r\n                    concatMap(() => {\r\n                        this.initializeLayout();\r\n\r\n                        return this.translate.get('primeng');\r\n                    }),\r\n                    concatMap(translation => {\r\n                        this.config.setTranslation(translation);\r\n\r\n                        return this.selectOptionsService.getLanguages();\r\n                    }))\r\n                .subscribe(languages => {\r\n                    this.initializeUserMenu(languages);\r\n                    this.updateBreadcrumbItemsWithLanguage();\r\n                });\r\n        }\r\n    }\r\n\r\n    private updateWithLanguageOnLanguageChange() {\r\n        const language = this.getLanguageCodeById(this.languageId);\r\n\r\n        this.translate\r\n            .use(language)\r\n            .pipe(\r\n                concatMap(() => {\r\n                    this.initializeLayout();\r\n\r\n                    return this.translate.get('primeng');\r\n                }),\r\n                concatMap(translation => {\r\n                    this.config.setTranslation(translation);\r\n\r\n                    return this.selectOptionsService.getLanguages();\r\n                }))\r\n            .subscribe(languages => {\r\n                this.initializeUserMenu(languages);\r\n                this.updateBreadcrumbItemsWithLanguage();\r\n            });\r\n    }\r\n\r\n    private replaceThemeLink(href: string, onComplete: Function) {\r\n        const id = 'theme-css';\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const cloneLinkElement = <HTMLLinkElement>themeLink.cloneNode(true);\r\n\r\n        cloneLinkElement.setAttribute('href', href);\r\n        cloneLinkElement.setAttribute('id', id + '-clone');\r\n\r\n        themeLink.parentNode!.insertBefore(cloneLinkElement, themeLink.nextSibling);\r\n\r\n        cloneLinkElement.addEventListener('load', () => {\r\n            themeLink.remove();\r\n            cloneLinkElement.setAttribute('id', id);\r\n            onComplete();\r\n        });\r\n    }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { LayoutService } from \"../services/app.layout.service\";\r\nimport { MenuService } from \"../app.menu.service\";\r\n\r\n@Component({\r\n    selector: 'app-config',\r\n    templateUrl: './app.config.component.html'\r\n})\r\nexport class AppConfigComponent {\r\n\r\n    @Input() minimal: boolean = false;\r\n\r\n    scales: number[] = [12, 13, 14, 15, 16];\r\n\r\n    constructor(public layoutService: LayoutService, public menuService: MenuService) { }\r\n\r\n    get visible(): boolean {\r\n        return this.layoutService.state.configSidebarVisible;\r\n    }\r\n\r\n    set visible(_val: boolean) {\r\n        this.layoutService.state.configSidebarVisible = _val;\r\n    }\r\n\r\n    get scale(): number {\r\n        return this.layoutService.config.scale;\r\n    }\r\n\r\n    set scale(_val: number) {\r\n        this.layoutService.config.scale = _val;\r\n    }\r\n\r\n    get menuMode(): string {\r\n        return this.layoutService.config.menuMode;\r\n    }\r\n\r\n    set menuMode(_val: string) {\r\n        this.layoutService.config.menuMode = _val;\r\n    }\r\n\r\n    get inputStyle(): string {\r\n        return this.layoutService.config.inputStyle;\r\n    }\r\n\r\n    set inputStyle(_val: string) {\r\n        this.layoutService.config.inputStyle = _val;\r\n    }\r\n\r\n    get ripple(): boolean {\r\n        return this.layoutService.config.ripple;\r\n    }\r\n\r\n    set ripple(_val: boolean) {\r\n        this.layoutService.config.ripple = _val;\r\n    }\r\n\r\n    onConfigButtonClick() {\r\n        this.layoutService.showConfigSidebar();\r\n    }\r\n\r\n    changeTheme(theme: string, colorScheme: string) {\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const newHref = themeLink.getAttribute('href')!.replace(this.layoutService.config.theme, theme);\r\n        this.layoutService.config.colorScheme\r\n        this.replaceThemeLink(newHref, () => {\r\n            this.layoutService.config.theme = theme;\r\n            this.layoutService.config.colorScheme = colorScheme;\r\n            this.layoutService.onConfigUpdate();\r\n        });\r\n    }\r\n\r\n    replaceThemeLink(href: string, onComplete: Function) {\r\n        const id = 'theme-css';\r\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\r\n        const cloneLinkElement = <HTMLLinkElement>themeLink.cloneNode(true);\r\n\r\n        cloneLinkElement.setAttribute('href', href);\r\n        cloneLinkElement.setAttribute('id', id + '-clone');\r\n\r\n        themeLink.parentNode!.insertBefore(cloneLinkElement, themeLink.nextSibling);\r\n\r\n        cloneLinkElement.addEventListener('load', () => {\r\n            themeLink.remove();\r\n            cloneLinkElement.setAttribute('id', id);\r\n            onComplete();\r\n        });\r\n    }\r\n\r\n    decrementScale() {\r\n        this.scale--;\r\n        this.applyScale();\r\n    }\r\n\r\n    incrementScale() {\r\n        this.scale++;\r\n        this.applyScale();\r\n    }\r\n\r\n    applyScale() {\r\n        document.documentElement.style.fontSize = this.scale + 'px';\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SidebarModule } from 'primeng/sidebar';\r\nimport { RadioButtonModule } from 'primeng/radiobutton';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { InputSwitchModule } from 'primeng/inputswitch';\r\nimport { AppConfigComponent } from './app.config.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        ButtonModule,\r\n        CommonModule,\r\n        FormsModule,\r\n        InputSwitchModule,\r\n        RadioButtonModule,\r\n        SidebarModule,\r\n    ],\r\n    declarations: [\r\n        AppConfigComponent\r\n    ],\r\n    exports: [\r\n        AppConfigComponent\r\n    ]\r\n})\r\nexport class AppConfigModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nexport interface AppConfig {\r\n    inputStyle: string;\r\n    colorScheme: string;\r\n    theme: string;\r\n    ripple: boolean;\r\n    menuMode: string;\r\n    scale: number;\r\n}\r\n\r\ninterface LayoutState {\r\n    staticMenuDesktopInactive: boolean;\r\n    overlayMenuActive: boolean;\r\n    profileSidebarVisible: boolean;\r\n    configSidebarVisible: boolean;\r\n    staticMenuMobileActive: boolean;\r\n    menuHoverActive: boolean;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LayoutService {\r\n\r\n    config: AppConfig = {\r\n        ripple: false,\r\n        inputStyle: 'outlined',\r\n        menuMode: 'static',\r\n        colorScheme: 'light',\r\n        theme: 'arya-blue',\r\n        scale: 14,\r\n    };\r\n\r\n    state: LayoutState = {\r\n        staticMenuDesktopInactive: false,\r\n        overlayMenuActive: false,\r\n        profileSidebarVisible: false,\r\n        configSidebarVisible: false,\r\n        staticMenuMobileActive: false,\r\n        menuHoverActive: false\r\n    };\r\n\r\n    private configUpdate = new Subject<AppConfig>();\r\n\r\n    private overlayOpen = new Subject<any>();\r\n\r\n    configUpdate$ = this.configUpdate.asObservable();\r\n\r\n    overlayOpen$ = this.overlayOpen.asObservable();\r\n\r\n    onMenuToggle() {\r\n        if (this.isOverlay()) {\r\n            this.state.overlayMenuActive = !this.state.overlayMenuActive;\r\n            if (this.state.overlayMenuActive) {\r\n                this.overlayOpen.next(null);\r\n            }\r\n        }\r\n\r\n        if (this.isDesktop()) {\r\n            this.state.staticMenuDesktopInactive = !this.state.staticMenuDesktopInactive;\r\n        }\r\n        else {\r\n            this.state.staticMenuMobileActive = !this.state.staticMenuMobileActive;\r\n\r\n            if (this.state.staticMenuMobileActive) {\r\n                this.overlayOpen.next(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    showProfileSidebar() {\r\n        this.state.profileSidebarVisible = !this.state.profileSidebarVisible;\r\n        if (this.state.profileSidebarVisible) {\r\n            this.overlayOpen.next(null);\r\n        }\r\n    }\r\n\r\n    showConfigSidebar() {\r\n        this.state.configSidebarVisible = true;\r\n    }\r\n\r\n    isOverlay() {\r\n        return this.config.menuMode === 'overlay';\r\n    }\r\n\r\n    isDesktop() {\r\n        return window.innerWidth > 991;\r\n    }\r\n\r\n    isMobile() {\r\n        return !this.isDesktop();\r\n    }\r\n\r\n    onConfigUpdate() {\r\n        this.configUpdate.next(this.config);\r\n    }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Menu, MenuArray } from \"src/app/interfaces/ui-models\";\r\nimport { UserPermissionEnum } from \"../../enums/user-permission.enum\";\r\nimport { AuthorizationService } from \"../../services/authorization/authorization.service\";\r\nimport { Routes } from \"../../constants/routes.constants\";\r\nimport { Menus } from \"./menus\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MenuService {\r\n\r\n  private menu = new MenuArray();\r\n\r\n  constructor(private readonly authorizationService: AuthorizationService) {\r\n    this.initializeMenu();\r\n    this.initializeMenuItems();\r\n  }\r\n\r\n  public getMenu(): MenuArray {\r\n    return this.menu;\r\n  }\r\n\r\n  public getFirstMenuItemUserIsAuthorizedFor(): Menu | undefined {\r\n    const firstMenuUserIsAuthorizedFor = this.menu.find(menu =>\r\n      (menu.Items || []).some(menuItem => this.authorizationService.isAuthorized(menuItem.Permissions)));\r\n\r\n    return firstMenuUserIsAuthorizedFor;\r\n  }\r\n\r\n  private getAdministrationItems() {\r\n    return this.menu.getItemsForLabel(Menus.administration.label);\r\n  }\r\n\r\n  private getMainMenuItems() {\r\n    return this.menu.getItemsForLabel(Menus.main.label);\r\n  }\r\n\r\n  private initializeMenu() {\r\n\r\n    //MENU\r\n    this.menu.push({\r\n      Label: Menus.main.label,\r\n      Items: new MenuArray()\r\n    });\r\n\r\n    //ADMINISTRATION\r\n    this.menu.push({\r\n      Label: Menus.administration.label,\r\n      Items: new MenuArray()\r\n    });\r\n  }\r\n\r\n  private initializeMenuItems() {\r\n    const mainMenuItems = this.getMainMenuItems();\r\n\r\n    //CLIENTS\r\n    mainMenuItems?.push(<Menu>{\r\n      Permissions: [\r\n        UserPermissionEnum.Clients_CanList\r\n      ],\r\n      Label: Menus.main.items.clients.label,\r\n      Icon: Menus.main.items.clients.icon,\r\n      RouterLink: [`/${Routes.clients.navigations.list}`]\r\n    });\r\n\r\n    //EQUIPMENTS\r\n    mainMenuItems?.push(<Menu>{\r\n      Permissions: [\r\n        UserPermissionEnum.Equipments_CanList\r\n      ],\r\n      Label: Menus.main.items.equipments.label,\r\n      Icon: Menus.main.items.equipments.icon,\r\n      RouterLink: [`/${Routes.equipments.navigations.list}`]\r\n    });\r\n\r\n    //MANUFACTURERS\r\n    mainMenuItems?.push(<Menu>{\r\n      Permissions: [\r\n        UserPermissionEnum.Manufacturers_CanList\r\n      ],\r\n      Label: Menus.main.items.manufacturers.label,\r\n      Icon: Menus.main.items.manufacturers.icon,\r\n      RouterLink: [`/${Routes.manufacturers.navigations.list}`]\r\n    });\r\n\r\n    const administrationItems = this.getAdministrationItems();\r\n\r\n    //USERS\r\n    administrationItems?.push(<Menu>{\r\n      Permissions: [\r\n        UserPermissionEnum.Users_CanList\r\n      ],\r\n      Label: Menus.administration.items.users.label,\r\n      Icon: Menus.administration.items.users.icon,\r\n      RouterLink: [`/${Routes.users.navigations.list}`]\r\n    });\r\n\r\n    //USER ROLES\r\n    administrationItems?.push(<Menu>{\r\n      Permissions: [\r\n        UserPermissionEnum.UserRoles_CanList\r\n      ],\r\n      Label: Menus.administration.items.userRoles.label,\r\n      Icon: Menus.administration.items.userRoles.icon,\r\n      RouterLink: [`/${Routes.userRoles.navigations.list}`]\r\n    });\r\n  }\r\n}","export const Menus = {\r\n  administration: {\r\n    label: 'Menu.Administration',\r\n    items: {\r\n      userRoles: {\r\n        label: 'Menu.UserRoles',\r\n        icon: 'fa fa-solid fa-users'\r\n      },\r\n      users: {\r\n        label: 'Menu.Users',\r\n        icon: 'fa fa-solid fa-user'\r\n      }\r\n    }\r\n  },\r\n  main: {\r\n    label: 'Menu.Title',\r\n    items: {\r\n      clients: {\r\n        label: 'Menu.Clients',\r\n        icon: 'fa fa-solid fa-face-smile'\r\n      },\r\n      equipments: {\r\n        label: 'Menu.Equipments',\r\n        icon: 'fa fa-solid fa-dumbbell',\r\n      },\r\n      manufacturers: {\r\n        label: 'Menu.Manufacturers',\r\n        icon: 'fa fa-solid fa-industry'\r\n      }\r\n    }\r\n  }\r\n};","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { lastValueFrom } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AssetService {\r\n\r\n  constructor(private readonly httpClient: HttpClient) { }\r\n\r\n  async doesAssetExistAsync(assetUrl: string): Promise<boolean> {\r\n    try {\r\n      await lastValueFrom(this.httpClient.head(assetUrl, { observe: 'response' }));\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n}","import { AuthorizationService } from '../authorization/authorization.service';\r\nimport { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Router } from '@angular/router';\r\nimport { Routes } from '../../constants/routes.constants';\r\n\r\n@Injectable()\r\nexport class AuthGuard {\r\n\r\n  constructor(\r\n    private readonly authorizationService: AuthorizationService,\r\n    private readonly router: Router) {\r\n  }\r\n\r\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n    return this.getCanActivateResult(false, next);\r\n  }\r\n\r\n  canActivateChild(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n    return this.getCanActivateResult(true, next);\r\n  }\r\n\r\n  private getCanActivateResult(checkForChild: boolean, next: ActivatedRouteSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n    const allowedPermissions = next.data['allowedPermissions'];\r\n    const isAuthorized = this.authorizationService.isAuthorized(allowedPermissions);\r\n\r\n    if (!isAuthorized) {\r\n      if (checkForChild)\r\n        this.authorizationService.resetAllData();\r\n      else\r\n        this.authorizationService.decodeTokenAndSetData();\r\n\r\n      this.router.navigate([Routes.login.navigations.default]);\r\n    }\r\n\r\n    this.authorizationService.decodeTokenAndSetData();\r\n\r\n    return isAuthorized;\r\n  }\r\n}","import { AuthorizationService } from '../authorization/authorization.service';\r\nimport { SignInModel } from '../../interfaces/authentication';\r\nimport { Inject, Injectable, PLATFORM_ID } from \"@angular/core\";\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { environment } from \"../../../environments/environment\";\r\nimport { TokenResponse } from '../../interfaces/identity';\r\nimport { ApiRoutes } from '../../constants/api-routes.constants';\r\nimport { ApiResultEnum } from '../../enums/api-result.enum';\r\n\r\n@Injectable()\r\nexport class AuthenticationService {\r\n\r\n    isLoggedIn$: Observable<boolean>;\r\n    isFirstTimeLoggedIn = false;\r\n\r\n    constructor(\r\n        private readonly authorizationService: AuthorizationService,\r\n        private readonly httpClient: HttpClient,\r\n        @Inject(PLATFORM_ID) private platformId: any) {\r\n    }\r\n\r\n    getAuth(): TokenResponse | null {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            const key = localStorage.getItem(environment.auth_key);\r\n\r\n            if (key) {\r\n                return JSON.parse(key);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    isLoggedIn(): boolean {\r\n        return isPlatformBrowser(this.platformId) && localStorage.getItem(environment.auth_key) != null;\r\n    }\r\n\r\n    // performs the login\r\n    login(authData: SignInModel): Observable<string> {\r\n        const data = {\r\n            UserName: authData.Login,\r\n            Password: authData.Password,\r\n            // required when signing up with username/password\r\n            GrantType: \"password\",\r\n            // space-separated list of scopes for which the token is issued\r\n            Scope: \"offline_access profile email\"\r\n        };\r\n\r\n        return this.httpClient\r\n            .post<TokenResponse>(ApiRoutes.identity.authenticate, data)\r\n            .pipe(\r\n                map(res => {\r\n                    const token = res && res.Token;\r\n\r\n                    if (res.Code == 165) {\r\n                        return ApiResultEnum[ApiResultEnum.NotActive];\r\n                    }\r\n                    else if (res.Code !== 200) {\r\n                        return ApiResultEnum[ApiResultEnum.Error];\r\n                    }\r\n\r\n                    if (token) {\r\n                        // store username and jwt token\r\n                        this.setAuth(res);\r\n                        this.authorizationService.decodeTokenAndSetData();\r\n\r\n                        return ApiResultEnum[ApiResultEnum.OK];\r\n                    }\r\n\r\n                    return \"Error\";\r\n                }),\r\n                catchError(error => {\r\n                    console.log(error);\r\n                    return new Observable<any>(error);\r\n                }));\r\n    }\r\n\r\n    logout() {\r\n        this.setAuth(null);\r\n        this.authorizationService.resetAllData();\r\n\r\n        return true;\r\n    }\r\n\r\n    refreshToken(): Observable<string> {\r\n        const tokenData = JSON.parse(localStorage.getItem(environment.auth_key) || '') as TokenResponse;\r\n\r\n        const data = {\r\n            Token: tokenData.Token,\r\n            RefreshToken: tokenData.RefreshToken\r\n        };\r\n\r\n        return this.httpClient\r\n            .post<TokenResponse>(ApiRoutes.identity.refreshToken, data)\r\n            .pipe(\r\n                map(res => {\r\n                    this.setAuth(res);\r\n                    this.authorizationService.decodeTokenAndSetData();\r\n\r\n                    return ApiResultEnum[ApiResultEnum.OK];\r\n                }),\r\n                catchError(error => {\r\n                    console.log(error);\r\n\r\n                    return new Observable<any>(error);\r\n                }));\r\n    }\r\n\r\n    setAuth(auth: TokenResponse | null): boolean {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            if (auth) {\r\n                localStorage.setItem(environment.auth_key, JSON.stringify(auth));\r\n\r\n                this.isLoggedIn$ = of(true);\r\n            }\r\n            else {\r\n                localStorage.removeItem(environment.auth_key);\r\n\r\n                this.isLoggedIn$ = of(false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthorizationService {\r\n  private static _currentUserId?: string;\r\n  private static _currentUserName?: string;\r\n  private static _currentUserLanguageId?: number;\r\n  private static _currentUserPermissions?: number[];\r\n  private static _currentUserRoleId?: number;\r\n  private static _currentUserRoleName?: string;\r\n  private static _currentUserRoles?: string[];\r\n\r\n  //property let to use static properties.\r\n  AS = AuthorizationService;\r\n\r\n  public static get currentUserId(): string | undefined {\r\n    return this._currentUserId;\r\n  }\r\n\r\n  public static get currentUserName(): string | undefined {\r\n    return this._currentUserName;\r\n  }\r\n\r\n  public static get currentUserRoles(): string[] | undefined {\r\n    return this._currentUserRoles;\r\n  }\r\n\r\n  public static get currentUserLanguageId(): number | undefined {\r\n    return this._currentUserLanguageId;\r\n  }\r\n\r\n  public static get currentUserPermissions(): number[] | undefined {\r\n    return this._currentUserPermissions;\r\n  }\r\n\r\n  public static get currentUserRoleId(): number | undefined {\r\n    return this._currentUserRoleId;\r\n  }\r\n\r\n  public static get currentUserRoleName(): string | undefined {\r\n    return this._currentUserRoleName;\r\n  }\r\n\r\n  constructor(private jwtHelperService: JwtHelperService) {\r\n  }\r\n\r\n  decodeToken() {\r\n    const token = localStorage.getItem(environment.auth_key);\r\n\r\n    return this.jwtHelperService.decodeToken(token || '');\r\n  }\r\n\r\n  decodeTokenAndSetData() {\r\n    const decodedToken = this.decodeToken();\r\n\r\n    if (decodedToken) {\r\n      AuthorizationService._currentUserId = decodedToken['sub'];\r\n      AuthorizationService._currentUserName = decodedToken['given_name'];\r\n      AuthorizationService._currentUserLanguageId = decodedToken['userlanguageid'];\r\n      AuthorizationService._currentUserRoleId = decodedToken['userroleid'];\r\n      AuthorizationService._currentUserRoleName = decodedToken['userrolename'];\r\n      AuthorizationService._currentUserRoles = decodedToken['role'];\r\n      AuthorizationService._currentUserPermissions = [];\r\n\r\n      var currentUserPermissionsTextArray = (decodedToken['permissions'] as string).split(',');\r\n\r\n      currentUserPermissionsTextArray.forEach(item =>\r\n        AuthorizationService._currentUserPermissions?.push(Number(item))\r\n      );\r\n    }\r\n    else {\r\n      this.resetAllData();\r\n    }\r\n  }\r\n\r\n  isAuthorized(allowedPermissions: number[] | undefined): boolean {\r\n    if (allowedPermissions === undefined)\r\n      return false;\r\n    // check if the list of allowed permissions is empty, if empty, authorize the user to access the page\r\n    if (allowedPermissions == null || allowedPermissions.length === 0)\r\n      return true;\r\n\r\n    const decodedToken = this.decodeToken();\r\n    // check if it was decoded successfully, if not the token is not valid, deny access\r\n    if (!decodedToken)\r\n      return false;\r\n    // check if the user roles is in the list of allowed permissions, return true if allowed and false if not allowed\r\n    var permissions: number[] = [];\r\n    var permissionsTextArray = (decodedToken['permissions'] as string).split(',');\r\n\r\n    permissionsTextArray.forEach(item => permissions.push(Number(item)));\r\n\r\n    return allowedPermissions.some(r => permissions.includes(r));\r\n  }\r\n\r\n  resetAllData() {\r\n    AuthorizationService._currentUserId = undefined;\r\n    AuthorizationService._currentUserName = undefined;\r\n    AuthorizationService._currentUserLanguageId = undefined;\r\n    AuthorizationService._currentUserRoleId = undefined;\r\n    AuthorizationService._currentUserRoleName = undefined;\r\n    AuthorizationService._currentUserRoles = undefined;\r\n    AuthorizationService._currentUserPermissions = undefined;\r\n  }\r\n}\r\n","import { Component, Injectable } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { StringBuilder } from \"../../tools/stringBuilder\";\r\nimport { ErrorMessageTypeEnum } from \"../../enums/error-messag-type.enum\";\r\nimport { Form } from \"src/app/components/abstract/forms/form\";\r\n\r\n@Injectable()\r\nexport class ErrorService {\r\n\r\n  private static readonly _idMessagePart = \"ID\";\r\n  private static readonly _maxLengthMessagePart = \"MAX\";\r\n  private static readonly _messageSeparator = \"|\";\r\n  private static readonly _messageInnerSeparator = \":\";\r\n  private static readonly _minLengthMessagePart = \"MIN\";\r\n  private static readonly _typeMessagePart = \"TYPE\";\r\n\r\n  private readonly errorMessage: ErrorMessage;\r\n  private readonly errorMessageBuilder: ErrorMessageBuilder;\r\n\r\n  constructor(private readonly translate: TranslateService) {\r\n    this.errorMessage = new ErrorMessage();\r\n    this.errorMessageBuilder = new ErrorMessageBuilder(translate, this.errorMessage);\r\n  }\r\n\r\n  public getDefaultErrorMessage() {\r\n    return this.translate.instant('General.Error.Global');\r\n  }\r\n\r\n  public getFirstErrorMessageKey(error: any) {\r\n    if (this.isValidErrorObject(error)) {\r\n      const errorObject = error.errors;\r\n      const firstErrorPropertyName = this.getFirstErrorName(errorObject);\r\n\r\n      if (!firstErrorPropertyName)\r\n        return;\r\n\r\n      const firstError: string | string[] = errorObject[firstErrorPropertyName];\r\n\r\n      if (!firstError)\r\n        return;\r\n\r\n      const splitError = this.getSplitError(firstError);\r\n\r\n      return splitError[0];\r\n    }\r\n    else {\r\n      return this.getDefaultErrorMessage();\r\n    }\r\n  }\r\n\r\n  public getFirstTranslatedErrorMessage(error: any) {\r\n\r\n    if (this.isValidErrorObject(error)) {\r\n      const errorObject = error.errors;\r\n      const firstErrorPropertyName = this.getFirstErrorName(errorObject);\r\n\r\n      if (!firstErrorPropertyName)\r\n        return;\r\n\r\n      const firstError: string | string[] = errorObject[firstErrorPropertyName];\r\n\r\n      if (!firstError)\r\n        return;\r\n\r\n      const splitError = this.getSplitError(firstError);\r\n      this.fillErrorMessageBasedOnError(splitError);\r\n\r\n      if (!this.errorMessage.hasRequiredPropertiesAssigned()) {\r\n        return this.getDefaultErrorMessage();\r\n      }\r\n\r\n      this.errorMessageBuilder.build();\r\n\r\n      return this.errorMessageBuilder.getMessage();\r\n    }\r\n    else {\r\n      return this.getDefaultErrorMessage();\r\n    }\r\n  }\r\n\r\n  private fillErrorMessageBasedOnError(error: string[]) {\r\n    for (const message of error) {\r\n      const splitMessage = message.split(ErrorService._messageInnerSeparator);\r\n\r\n      switch (splitMessage[0]) {\r\n        case ErrorService._idMessagePart:\r\n          this.errorMessage.id = splitMessage[1];\r\n          break;\r\n        case ErrorService._maxLengthMessagePart:\r\n          this.errorMessage.maxLength = splitMessage[1];\r\n          break;\r\n        case ErrorService._minLengthMessagePart:\r\n          this.errorMessage.minLength = splitMessage[1];\r\n          break;\r\n        case ErrorService._typeMessagePart:\r\n          this.errorMessage.type = splitMessage[1];\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  private getFirstErrorName(errors: any) {\r\n    return Object.keys(errors)[0];\r\n  }\r\n\r\n  private getSplitError(error: string[] | string) {\r\n    return Array.isArray(error)\r\n      ? error[0].split(ErrorService._messageSeparator)\r\n      : error.split(ErrorService._messageSeparator)\r\n  }\r\n\r\n  private isValidErrorObject(error: any) {\r\n    return error?.errors;\r\n  }\r\n}\r\n\r\nclass ErrorMessage {\r\n  id?: string;\r\n  maxLength?: string;\r\n  minLength?: string;\r\n  type?: string;\r\n\r\n  hasRequiredPropertiesAssigned() {\r\n    return this.id && this.type;\r\n  }\r\n}\r\n\r\nclass ErrorMessageBuilder {\r\n  message: ErrorMessage;\r\n  resultMessageBuilder = new StringBuilder();\r\n  translate: TranslateService;\r\n\r\n  constructor(translate: TranslateService, errorMessage: ErrorMessage) {\r\n    this.message = errorMessage;\r\n    this.translate = translate;\r\n  }\r\n\r\n  append(messagePart: string): ErrorMessageBuilder {\r\n    this.resultMessageBuilder.append(messagePart);\r\n    return this;\r\n  }\r\n\r\n  build() {\r\n    this.clean();\r\n\r\n    this\r\n      .append(this.translate.instant('Messages.TheValueOfTheField'))\r\n      .append(\" \")\r\n      .append(\"'\")\r\n      .withId()\r\n      .append(\"'\")\r\n      .append(\" \")\r\n      .withTypeSpecificMessagePart()\r\n      .append(\".\");\r\n  }\r\n\r\n  private clean() {\r\n    if (this.resultMessageBuilder.length() > 0)\r\n      this.resultMessageBuilder = new StringBuilder();\r\n  }\r\n\r\n  getMessage() {\r\n    return this.resultMessageBuilder.toString();\r\n  }\r\n\r\n  private withId(): ErrorMessageBuilder {\r\n    return this.append(this.translate.instant(this.message.id!));\r\n  }\r\n\r\n  private withTypeSpecificMessagePart(): ErrorMessageBuilder {\r\n\r\n    let typeSpecificMessage = '';\r\n\r\n    switch (this.message.type) {\r\n      case ErrorMessageTypeEnum.Email:\r\n        typeSpecificMessage = this.translate.instant('General.Error.IsNotValidEmail');\r\n        break;\r\n      case ErrorMessageTypeEnum.Empty:\r\n        typeSpecificMessage = this.translate.instant('General.Error.IsEmpty');\r\n        break;\r\n      case ErrorMessageTypeEnum.Length:\r\n        typeSpecificMessage = this.translate.instant('General.Error.HasIncorrectLength', { minLength: this.message.minLength, maxLength: this.message.maxLength });\r\n        break;\r\n      case ErrorMessageTypeEnum.MatchAllowedLetters:\r\n        typeSpecificMessage = this.translate.instant('General.Error.IsNotMatchingAllowedLetters');\r\n        break;\r\n      case ErrorMessageTypeEnum.MatchSmallLetters:\r\n        typeSpecificMessage = this.translate.instant('General.Error.IsNotMatchingSmallLetters');\r\n        break;\r\n    }\r\n\r\n    return this.append(typeSpecificMessage);\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { StringBuilder } from 'src/app/tools/stringBuilder';\r\n\r\n@Injectable()\r\nexport class FileService {\r\n\r\n  constructor() { }\r\n\r\n  public convertFileToBase64String(file: ArrayBuffer): string {\r\n    const bytes = new Uint8Array(file);\r\n    const dataBuilder = new StringBuilder();\r\n\r\n    for (let i = 0; i < bytes.length; i++) {\r\n      dataBuilder.append(String.fromCharCode(bytes[i]));\r\n    }\r\n\r\n    return btoa(dataBuilder.toString());\r\n  }\r\n\r\n  public async getArrayBuffer(file: File) {\r\n    const arrayBuffer = (await this.getFixedArrayBuffer(file)) as ArrayBuffer;\r\n    if (!arrayBuffer || (arrayBuffer && arrayBuffer.byteLength == 0)) {\r\n      return undefined;\r\n    }\r\n\r\n    return arrayBuffer;\r\n  }\r\n\r\n  private async getFixedArrayBuffer(file: File) {\r\n    return new Promise(function (resolve) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = function () {\r\n        resolve(reader.result);\r\n      };\r\n      reader.readAsArrayBuffer(file);\r\n    });\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { FilterMatchMode } from \"primeng/api\";\r\nimport { Table } from \"primeng/table\";\r\n\r\n@Injectable()\r\nexport class FilterService {\r\n\r\n  constructor(public readonly translate: TranslateService) {\r\n  }\r\n\r\n  public getPlaceholder(field: string): string {\r\n    const capitalizedField = field.replace(/^\\w/, (c) => c.toUpperCase());\r\n    return `${this.translate.instant('General.SearchFor')} ${capitalizedField}`;\r\n  }\r\n\r\n  onClearFilters(dataTable: Table) {\r\n    dataTable.reset();\r\n  }\r\n\r\n  onFilterGlobal(dataTable: Table, filterValue: string) {\r\n    dataTable.filterGlobal(filterValue, FilterMatchMode.CONTAINS);\r\n  }\r\n\r\n  public shouldHideIcon(filterValue: string): boolean {\r\n    let inputWidth = 0;\r\n\r\n    const filterElement = document.getElementById('filter');\r\n    const textContentLengthHelper = document.createElement('span');\r\n\r\n    textContentLengthHelper.style.visibility = 'hidden';\r\n    textContentLengthHelper.style.position = 'absolute';\r\n\r\n    textContentLengthHelper.textContent = filterValue;\r\n\r\n    if (filterElement)\r\n      inputWidth = filterElement.offsetWidth;\r\n\r\n    document.body.appendChild(textContentLengthHelper);\r\n    const textContentWidth = textContentLengthHelper.offsetWidth;\r\n    document.body.removeChild(textContentLengthHelper);\r\n\r\n    return textContentWidth > inputWidth - 30;\r\n  }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\r\nimport { AssetService } from '../assets/asset.service';\r\nimport { Assets } from 'src/app/constants/assets.constants';\r\n\r\n@Injectable()\r\nexport class ImageService {\r\n\r\n  constructor(\r\n    private readonly assetService: AssetService,\r\n    private readonly httpClient: HttpClient,\r\n    private readonly sanitizer: DomSanitizer) {\r\n  }\r\n\r\n  public getImageUrlForEncodedFile(file: string | undefined): SafeUrl | undefined {\r\n    return file\r\n      ? this.sanitizer.bypassSecurityTrustUrl(`data:image/jpg;base64, ${file}`)\r\n      : undefined;\r\n  }\r\n\r\n  public async getImageUrlWithAssetImageAsync(assetImageFilePath: string) {\r\n    if (await this.assetService.doesAssetExistAsync(assetImageFilePath)) {\r\n      return this.sanitizer.bypassSecurityTrustUrl(assetImageFilePath);\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  public async getNotFoundImageUrlAsync() {\r\n    return await this.getImageUrlWithAssetImageAsync(Assets.images.notFound.path);\r\n  }\r\n}","import { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable()\r\nexport class ApiUrlInterceptor implements HttpInterceptor {\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        const baseAddress = req.url.includes('assets/i18n')\r\n            ? `${location.protocol === 'https:' ? 'https' : 'http'}://${window.location.host}`\r\n            : environment.apiUrl;\r\n\r\n        const apiRequest = req.clone({ url: `${baseAddress}${req.url}` });\r\n\r\n        return next.handle(apiRequest);\r\n    }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { HttpHandler, HttpEvent, HttpInterceptor, HttpRequest, HttpErrorResponse } from \"@angular/common/http\";\r\nimport { AuthenticationService } from \"../authentication/authentication.service\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { catchError, tap } from \"rxjs/operators\";\r\nimport { ApiResultEnum } from \"src/app/enums/api-result.enum\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    isRefreshingToken: boolean;\r\n\r\n    constructor(private readonly injector: Injector) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const authenticationService = this.injector.get(AuthenticationService);\r\n\r\n        const token = (authenticationService.isLoggedIn())\r\n            ? authenticationService.getAuth()!.Token\r\n            : null;\r\n\r\n        if (token) {\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    ApiKey: '5f97f178-1fb8-4a24-a71c-0b145a3709c4'\r\n                }\r\n            });\r\n        }\r\n\r\n        return next.handle(request).pipe(\r\n            catchError((errorResponse: HttpErrorResponse) => {\r\n                if (errorResponse.status === 401 && !this.isRefreshingToken) {\r\n                    this.isRefreshingToken = true;\r\n\r\n                    console.log(\"refreshing token...\");\r\n\r\n                    authenticationService.refreshToken().subscribe(result => {\r\n                        console.log(`token refreshed with result: ${result}`);\r\n\r\n                        if (result === ApiResultEnum[ApiResultEnum.OK]) {\r\n                            this.isRefreshingToken = false;\r\n\r\n                            window.location.reload();\r\n\r\n                            return tap(() => ApiResultEnum[ApiResultEnum.OK]);\r\n                        }\r\n                        else {\r\n                            console.error(errorResponse);\r\n\r\n                            return throwError(() => errorResponse.error);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                console.error(errorResponse);\r\n\r\n                return throwError(() => errorResponse.error);\r\n            })\r\n        );\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { DataBaseOperationTypeMessagePartsForConsole, DatabaseOperationTypeMessagePartForConsole } from '../../tools/database-operation-type';\r\n\r\n@Injectable()\r\nexport class ConsoleMessageService {\r\n  constructor() { }\r\n\r\n  public getConsoleMessageWithResultForEntityAfterCreation(entity: string, result: string) {\r\n    return this.getConsoleMessage(entity, result, DataBaseOperationTypeMessagePartsForConsole.create);\r\n  }\r\n\r\n  public getConsoleMessageWithResultForEntityAfterDeletion(entity: string, result: string) {\r\n    return this.getConsoleMessage(entity, result, DataBaseOperationTypeMessagePartsForConsole.delete);\r\n  }\r\n\r\n  public getConsoleMessageWithResultForEntityAfterUpdate(entity: string, result: string) {\r\n    return this.getConsoleMessage(entity, result, DataBaseOperationTypeMessagePartsForConsole.update);\r\n  }\r\n\r\n  private getConsoleMessage(entity: string, result: string, operation: DatabaseOperationTypeMessagePartForConsole) {\r\n    return `The ${entity} has been ${operation.name} with result: ${result}`;\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Message, MessageService } from 'primeng/api';\r\nimport { MessageType, MessageTypes } from '../../tools/message-type';\r\n\r\n@Injectable()\r\nexport class DialogMessageService {\r\n\r\n  constructor(private readonly messageService: MessageService) {\r\n  }\r\n\r\n  public addError(summary: string) {\r\n    this.addMessage(MessageTypes.error, summary);\r\n  }\r\n\r\n  public addInfo(summary: string) {\r\n    this.addMessage(MessageTypes.info, summary);\r\n  }\r\n\r\n  public addSuccess(summary: string) {\r\n    this.addMessage(MessageTypes.success, summary);\r\n  }\r\n\r\n  public addWarning(summary: string) {\r\n    this.addMessage(MessageTypes.warning, summary);\r\n  }\r\n\r\n  private addMessage(type: MessageType, summary: string) {\r\n    this.messageService.add(<Message>{ severity: type.name, summary: summary, life: type.lifeTime });\r\n  }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { LazyLoadEvent, SelectItem } from \"primeng/api\";\r\nimport { Observable, catchError, map } from \"rxjs\";\r\nimport { SelectOption } from \"../../interfaces/ui-models\";\r\nimport { ApiRoutes } from \"../../constants/api-routes.constants\";\r\nimport { PngTableColumn } from \"../../interfaces/png\";\r\n\r\n@Injectable()\r\nexport class SelectOptionsService {\r\n\r\n  constructor(\r\n    private readonly httpClient: HttpClient,\r\n    public readonly translate: TranslateService) {\r\n  }\r\n\r\n  getClientTypes(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.clientTypes);\r\n  }\r\n\r\n  getCountries(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.countries);\r\n  }\r\n\r\n  getFieldNamesForObjectHistory(event: LazyLoadEvent, columns: PngTableColumn[], entityId: string, entityTableName: string): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.audits(event, columns, entityId, entityTableName), true);\r\n  }\r\n\r\n  getEquipmentTypes(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.equipmentTypes);\r\n  }\r\n\r\n  getLanguages(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.languages);\r\n  }\r\n\r\n  getManufacturers(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.manufacturers);\r\n  }\r\n\r\n  getUserRoles(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.userRoles);\r\n  }\r\n\r\n  getYesNoOptions(): Observable<SelectItem[]> {\r\n    return this.getOptions(ApiRoutes.selectOptions.yesNoOptions, true);\r\n  }\r\n\r\n  private getOptions(url: string, insertAllOption: boolean = false): Observable<SelectItem[]> {\r\n    return this.httpClient\r\n      .get<SelectOption[]>(url)\r\n      .pipe(map(result => {\r\n        const options: SelectItem[] = [];\r\n\r\n        if (insertAllOption) {\r\n          options.push({ label: this.translate.instant('General.All'), value: -1 });\r\n        }\r\n\r\n        for (let item of result) {\r\n          options.push({ label: item.Name, value: item.Value });\r\n        }\r\n\r\n        return options;\r\n      }),\r\n        catchError(error => {\r\n          console.log(error);\r\n\r\n          return new Observable<SelectItem[]>(error);\r\n        }));\r\n  }\r\n}","import { TranslateService } from \"@ngx-translate/core\";\r\nimport { AuthorizationService } from \"../services/authorization/authorization.service\";\r\n\r\nexport class AccessControl {\r\n\r\n  hasAccessToButtons: boolean = true;\r\n\r\n  constructor(\r\n    private readonly authorizationService: AuthorizationService,\r\n    private readonly permissions: number[]) {\r\n    this.determineWhetherUserHasAccessToButtons();\r\n  }\r\n\r\n  private determineWhetherUserHasAccessToButtons(): void {\r\n    this.permissions.forEach(permission => {\r\n      this.hasAccessToButtons = this.hasAccessToButtons && this.authorizationService.isAuthorized([permission]);\r\n    });\r\n  }\r\n}","export const DataBaseOperationTypeMessagePartsForConsole = {\r\n  create: <DatabaseOperationTypeMessagePartForConsole>{\r\n    name: \"created\"\r\n  },\r\n  delete: <DatabaseOperationTypeMessagePartForConsole>{\r\n    name: \"deleted\"\r\n  },\r\n  update: <DatabaseOperationTypeMessagePartForConsole>{\r\n    name: \"updated\"\r\n  },\r\n};\r\n\r\nexport interface DatabaseOperationTypeMessagePartForConsole {\r\n  name: string;\r\n}","import { MessageLifeTimeEnum } from \"../enums/message-lifetime.enum\";\r\nimport { MessageTypeEnum } from \"../enums/message-type.enum\";\r\n\r\nexport const MessageTypes = {\r\n  error: <MessageType>{\r\n    name: MessageTypeEnum.Error,\r\n    lifeTime: MessageLifeTimeEnum.Error\r\n  },\r\n  info: <MessageType>{\r\n    name: MessageTypeEnum.Info,\r\n    lifeTime: MessageLifeTimeEnum.Info\r\n  },\r\n  success: <MessageType>{\r\n    name: MessageTypeEnum.Success,\r\n    lifeTime: MessageLifeTimeEnum.Success\r\n  },\r\n  warning: <MessageType>{\r\n    name: MessageTypeEnum.Warning,\r\n    lifeTime: MessageLifeTimeEnum.Warning\r\n  }\r\n};\r\n\r\nexport interface MessageType {\r\n  name: string,\r\n  lifeTime: number;\r\n}","import { PngTableColumn } from '../interfaces/png';\r\nimport { FilterMatchMode, FilterMetadata, LazyLoadEvent, SelectItem } from 'primeng/api';\r\nimport { StringBuilder } from './stringBuilder';\r\nimport { PrimeNgHelper } from './primeNgHelper';\r\nimport { SearchOperatorEnum } from '../enums/search-operator.enum';\r\nimport { FilterTypeEnum } from '../enums/filter-type.enum';\r\n\r\nexport class PngTableSearchQueryBuilder {\r\n\r\n    private static DATE_MATCH_MODES = [FilterMatchMode.DATE_IS, FilterMatchMode.DATE_AFTER, FilterMatchMode.DATE_BEFORE, FilterMatchMode.DATE_IS_NOT];\r\n\r\n    resultUriBuilder = new StringBuilder();\r\n\r\n    constructor(\r\n        private readonly event: LazyLoadEvent,\r\n        private readonly columns: PngTableColumn[]) {\r\n    }\r\n\r\n    create() {\r\n        this.buildBaseUri();\r\n        this.addFilters();\r\n        return this.resultUriBuilder.toString();\r\n    }\r\n\r\n    public buildBaseUri() {\r\n        this.event.sortField ??= this.columns[0]?.field;\r\n        this.resultUriBuilder.append(`?sf=${this.event.sortField}&so=${this.event.sortOrder}&pc=${this.event.rows}&sr=${this.event.first}`);\r\n    }\r\n\r\n    private addFilters() {\r\n        let whereBuilder = new StringBuilder();\r\n\r\n        this.addGlobalFilters(whereBuilder);\r\n        this.addLocalFilters(whereBuilder);\r\n\r\n        if (whereBuilder.length() > 1) {\r\n            whereBuilder.removeFromEnd(2);\r\n        }\r\n\r\n        this.resultUriBuilder.append(`&f=${whereBuilder.toString()}`);\r\n    }\r\n\r\n    private addGlobalFilters(whereBuilder: StringBuilder) {\r\n        if (this.event.globalFilter) {\r\n            const globalFilterColumns = this.columns.filter(c => c.applyGlobalFiltering === true);\r\n\r\n            for (const column of globalFilterColumns) {\r\n                const replaceWith = column.replaceWith ?? column.field;\r\n\r\n                let value: string = this.event.globalFilter;\r\n                let matchMode = FilterMatchMode.CONTAINS;\r\n\r\n                if (column.options) {\r\n                    value = column.options.filter(o => o.label?.toLowerCase().includes(value.toLowerCase())).map(o => o.value).join(\", \");\r\n                    matchMode = FilterMatchMode.IN;\r\n                }\r\n\r\n                whereBuilder.append(`${replaceWith}|${matchMode}|${value}|${SearchOperatorEnum.MatchAny}|${column.filterType}||`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private addLocalFilters(whereBuilder: StringBuilder) {\r\n        for (const column of this.columns) {\r\n            const filtersGroup = this.event.filters?.[column.field];\r\n\r\n            if (filtersGroup === undefined)\r\n                continue;\r\n\r\n            if (column.filterType === FilterTypeEnum.Special && column.replaceWith === undefined)\r\n                continue;\r\n\r\n            const replaceWith = column.replaceWith ?? column.field;\r\n            const filters = filtersGroup as FilterMetadata[];\r\n\r\n            for (const filter of filters) {\r\n                if (filter.value == null)\r\n                    continue;\r\n\r\n                let value = undefined;\r\n\r\n                if (Array.isArray(filter.value)) {\r\n                    const filterValues = filter.value as SelectItem[];\r\n                    const valueBuilder = new StringBuilder();\r\n\r\n                    filterValues.forEach(fv => valueBuilder.append(`${fv.value},`));\r\n\r\n                    if (valueBuilder.length() > 0)\r\n                        valueBuilder.removeFromEnd(1);\r\n\r\n                    value = valueBuilder.toString();\r\n                }\r\n                else {\r\n                    value = filter.value;\r\n                }\r\n\r\n                if (PngTableSearchQueryBuilder.DATE_MATCH_MODES.find(mode => mode == filter.matchMode))\r\n                    value = PrimeNgHelper.getDateFromCalendarAsString(value);\r\n\r\n                whereBuilder.append(`${replaceWith}|${filter.matchMode}|${value}|${filter.operator}|${column.filterType}||`);\r\n            }\r\n        }\r\n    }\r\n}","import { StringBuilder } from \"./stringBuilder\";\r\n\r\nexport class PrimeNgHelper {\r\n\r\n  static getDateFromCalendar(date: string): Date | null {\r\n    if (!isNaN(Date.parse(date))) {\r\n      const parsedDate = new Date(date);\r\n      return new Date(Date.UTC(parsedDate.getFullYear(), parsedDate.getMonth(), parsedDate.getDate()));\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  static getDateFromCalendarAsString(date: Date): string | undefined {\r\n    date = new Date(date);\r\n\r\n    if (!date)\r\n      return;\r\n\r\n    date = new Date(date.setMinutes(date.getMinutes() - date.getTimezoneOffset()));\r\n\r\n    return new StringBuilder(date.getFullYear().toString())\r\n      .append('-')\r\n      .append((date.getMonth() + 1).toLocaleString('pl-PL', { minimumIntegerDigits: 2, useGrouping: false }))\r\n      .append('-')\r\n      .append(date.getDate().toLocaleString('pl-PL', { minimumIntegerDigits: 2, useGrouping: false }))\r\n      .toString();\r\n  }\r\n\r\n  static galleriaResponsiveOptions: any[] = [\r\n    {\r\n      breakpoint: '1024px',\r\n      numVisible: 5\r\n    },\r\n    {\r\n      breakpoint: '960px',\r\n      numVisible: 4\r\n    },\r\n    {\r\n      breakpoint: '768px',\r\n      numVisible: 3\r\n    },\r\n    {\r\n      breakpoint: '560px',\r\n      numVisible: 1\r\n    }\r\n  ];\r\n}","export class RegexPatterns {\r\n  // static emailPattern = '^(([^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@\"]+(\\.[^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@\"]+)*)|(\".+\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$';\r\n  static emailPattern = \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}$\";\r\n  static phoneNumberPattern = '^[+]*[(]{0,1}[0-9\\\\s]{1,4}[)]{0,1}[-\\s\\.[0-9\\\\s]*$';\r\n  static bankAccountPattern = '^[0-9]{26}$';\r\n  static postalCodePattern = /\\d{2}-\\d{3}/;\r\n  static passwordPattern = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,20}$/;\r\n  static passwordOrEmptyPattern = /^$|[0-9a-zA-Z]{8,20}$/;\r\n  static decimalNumber = /^\\d+[\\d\\s]*[,]?[\\d]{0,2}?$/;\r\n  static regonPattern = /^(?:[^\\d]|^)(\\d{9}|\\d{14})(?:[^\\d]|$)/;\r\n  static vehicleRegistrationNumberPattern = /^[A-Z]|[0-9]/;\r\n}","export class StringBuilder {\r\n  private value: string[];\r\n\r\n  constructor(initialValue?: string) {\r\n    this.value = [];\r\n\r\n    if (initialValue)\r\n      this.append(initialValue);\r\n  }\r\n\r\n  append(text: string): StringBuilder {\r\n    this.value.push(text);\r\n\r\n    return this;\r\n  }\r\n\r\n  appendLine(text?: string): StringBuilder {\r\n    return this.append(text ? text : '').append('\\n');\r\n  }\r\n\r\n  removeFromEnd(numberOfChars: number): StringBuilder {\r\n    if (this.value.length == 0) {\r\n      return this;\r\n    }\r\n\r\n    if (numberOfChars >= this.value[this.value.length - 1].length) {\r\n      this.value = [];\r\n    }\r\n    else {\r\n      this.value[this.value.length - 1] = this.value[this.value.length - 1]?.slice(0, -numberOfChars);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  charAtEquals(index: number, char: string): boolean {\r\n    if (index < 0 || index >= this.value.length) {\r\n      return false;\r\n    }\r\n\r\n    return this.value[index] === char;\r\n  }\r\n\r\n  length(): number {\r\n    return this.value.length > 0 ? this.value[this.value.length - 1].length : 0;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.value.join('');\r\n  }\r\n}","import { FormGroup } from '@angular/forms';\r\n\r\nexport class FormValidator {\r\n  form: FormGroup;\r\n  constructor(currentForm: FormGroup) {\r\n    this.form = currentForm;\r\n  }\r\n  // retrieve a FormControl\r\n  getFormControl(name: string) {\r\n    return this.form.get(name);\r\n  }\r\n  // returns TRUE if the FormControl is valid\r\n  isValid(name: string) {\r\n    var e = this.getFormControl(name);\r\n    return e && e.valid;\r\n  }\r\n  // returns TRUE if the FormControl has been changed\r\n  isChanged(name: string) {\r\n    var e = this.getFormControl(name);\r\n    return e && (e.dirty || e.touched);\r\n  }\r\n  // returns TRUE if the FormControl is invalid after user changes\r\n  hasError(name: string) {\r\n    var e = this.getFormControl(name);\r\n    return e && (e.dirty || e.touched) && !e.valid;\r\n  }\r\n\r\n  updateAllControlsToTouched() {\r\n    if (this.form) {\r\n      Object.keys(this.form.controls).forEach(key => {\r\n        this.form.get(key)!.markAsTouched();\r\n      });\r\n    }\r\n  }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiUrl: 'http://localhost:61869/api/',\r\n  auth_key: \"Equiprent\"\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","/// <reference types=\"@angular/localize\" />\r\n\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"names":["RouterModule","NgModule","AppLayoutComponent","UserListComponent","UserRoleListComponent","LoginComponent","AuthGuard","UserPermissionEnum","UserDetailsComponent","UserCreationComponent","LocationStrategy","PathLocationStrategy","Routes","UserRoleCreationComponent","UserRoleDetailsComponent","ClientListComponent","ClientCreationComponent","ClientDetailsComponent","ManufacturerListComponent","ManufacturerCreationComponent","ManufacturerDetailsComponent","EquipmentListComponent","EquipmentCreationComponent","EquipmentDetailsComponent","UserProfileComponent","AppRoutingModule","imports","forRoot","path","home","paths","default","component","data","breadcrumb","breadcrumbs","children","users","profile","canActivate","allowedPermissions","ForAll","clients","list","Clients_CanList","create","Clients_CanModify","creation","edit","edition","equipments","Equipments_CanList","Equipments_CanModify","manufacturers","Manufacturers_CanList","Manufacturers_CanModify","Users_CanList","Users_CanModify","userRoles","UserRoles_CanList","UserRoles_CanModify","login","redirectTo","pathMatch","scrollPositionRestoration","anchorScrolling","onSameUrlNavigation","useHash","providers","provide","useClass","exports","Component","HostListener","Title","TranslateService","PrimeNGConfig","AuthenticationService","AuthorizationService","AppComponent","constructor","primengConfig","translate","authenticationService","authorizationService","titleService","setDefaultLang","isUserLoggedIn","isLoggedIn","decodeTokenAndSetData","onKeydownHandler","event","preventDefault","ngOnInit","ripple","setTitle","args","selector","template","CommonModule","registerLocaleData","localePl","NgxMaskModule","TranslateLoader","TranslateModule","TranslateHttpLoader","HttpClient","HttpClientModule","HTTP_INTERCEPTORS","BrowserModule","JwtModule","AppLayoutModule","environment","AssetService","AuthInterceptor","ConsoleMessageService","DialogMessageService","ErrorService","FileService","FilterService","FormsModule","ReactiveFormsModule","ImageService","MenuService","SelectOptionsService","AddressComponent","AuditListForEntityComponent","ClientRepresentativeCreationComponent","ClientRepresentativeDetailsComponent","ClientRepresentativeListComponent","CompanyClientAddressComponent","DeletionDialogComponent","EquipmentPhotosComponent","LoginResetPasswordComponent","ManufacturerAddressComponent","NameInLanguagesComponent","PrivateClientAddressComponent","PrivateClientComponent","UserRolePermissionsComponent","ApiUrlInterceptor","BreadcrumbModule","ButtonModule","CheckboxModule","ConfirmDialogModule","ConfirmationService","DialogService","DropdownModule","DynamicDialogModule","FileUploadModule","GalleriaModule","MessageModule","MessagesModule","MessageService","MultiSelectModule","PanelMenuModule","PasswordModule","ProgressSpinnerModule","SplitButtonModule","TableModule","TabViewModule","ToastModule","TreeTableModule","options","AppModule","declarations","config","tokenGetter","jwtTokenGetter","loader","useFactory","HttpLoaderFactory","deps","multi","bootstrap","localStorage","getItem","auth_key","http","AccessControl","ApiResultEnum","AccessControlComponent","confirmationService","consoleMessageService","deletionKey","deletionLinkInitializer","dialogMessageService","entityName","errorService","httpClient","onAfterDeletionSuccessOperationsHandler","router","userPermissions","accessControl","hasAccessToButtons","onEditLabelId","onDelete","entity","confirm","key","message","instant","deletedEntityInstanceIdentificationInitializer","accept","deleteEntity","delete","Id","subscribe","next","result","OK","addSuccess","addError","getErrorMessageForResult","getDefaultErrorMessage","console","log","getConsoleMessageWithResultForEntityAfterDeletion","error","getFirstTranslatedErrorMessage","Object","keys","includes","apiErrorKey","Number","getApiResultKeyByValue","toString","undefined","value","filter","length","Form","AccessControlForm","activatedRoute","formBuilder","mode","submitionLink","afterSubmitionNavigationLink","entityId","snapshot","params","deletionLink","isDisabled","isExecuting","updateForm","obj","setAccess","form","disabled","formValidator","updateAllControlsToTouched","onAfterDeletionSuccessNavigateUsingLinkHandler","navigate","enable","disable","AccessControlOpenableAsDialogForm","openedAsDialogConfig","openedAsDialogRef","onAfterDeletionSuccessNavigateUsingLink","onAfterSubmitSuccessNavigateUsingLink","onBackNavigateUsingLink","_dialogConfigData","getOpenedAsDialogData","getEntityId","onBack","close","isOfTypeT","Directive","Input","SimpleFormComponent","SimpleForm","FormBuilder","Validators","DynamicRequirementForm","updateFormAfterInit","requiredFields","forEach","fieldName","requiredField","get","setValidators","required","FormModeEnum","PostAction","PutAction","FormSubmitionActionFactory","getFormSubmitionAction","Creation","Edition","getConsoleMessageWithResultForEntityAfterCreation","execute","formComponent","beforeSubmitionCustomOperationsHandler","post","getConsoleMessageWithResultForEntityAfterUpdate","put","FormValidator","shouldActionsBeDisabled","invalid","_formValidator","validator","createForm","formFieldGroup","group","onSubmit","onSubmitAction","onAfterSubmitionSuccessNavigateUsingLinkHandler","successMessageTag","getConsoleMessage","afterSubmitionCustomOperationsHandler","firstTranslatedErrorMessage","requestValidationByDatabaseErrorMessage","getFirstErrorMessageKey","patchValue","OpenableAsDialogForm","FormGroup","_form","reloadForm","ADDRESS_CONTROL_NAMES","selectOptionsService","ApartmentNumber","City","Country","Email","PhoneNumber","PostalCode","StreetName","StreetNumber","populateDropdowns","entityAddress","getCountries","countries","COMPANY_CLIENT_ADDRESS_CONTROL_NAMES","NationalCompanyId","clientAddress","NationalId","MANUFACTURER_ADDRESS_CONTROL_NAMES","manufacturerAddress","PRIVATE_CLIENT_ADDRESS_CONTROL_NAMES","NationalCitizenId","PngTable","ApiRoutes","concatMap","filterService","fieldNamesForObjectHistory","getFieldNamesForObjectHistory","set","setFieldNamesForObjectHistory","objectHistory","getObjectHistory","audits","setObjectHistory","table","field","header","width","applyGlobalFiltering","loadAuditsLazy","tempLazyLoadEvent","_dataPopulator","pipe","cols","entityTableName","audit","fieldNameOptions","setOptionsForColumn","totalRecords","TotalRowsCount","List","ViewChild","Router","ClientTypeEnum","CLIENT_CREATE_CONTROL_NAMES","PRIVATE_CLIENT_CONTROL_NAMES","client","navigations","prepareClientCreationModel","ClientType","Name","addressForm","companyClientAddressForm","privateClientAddressForm","privateClientForm","getClientNationalId","ClientTypeId","Private","Company","getClientTypes","clientTypes","Addresses","FirstName","LastName","TypeId","ActivatedRoute","CLIENT_DETAILS_CONTROL_NAMES","prepareClientDetailsModel","getEntityInstanceName","loadClient","ngAfterViewInit","activeTab","switchActiveTab","tabIndex","getById","FilterTypeEnum","selectOptionService","multiSelects","getClientTypeMultiSelectData","setClientTypeMultiSelectData","getClients","setClients","filterType","Text","replaceWith","loadClientsLazy","onCreate","onEdit","sortField","getAll","clientTypeOptions","clientTypeColumn","find","c","RegexPatterns","EQUIPMENT_CREATE_CONTROL_NAMES","equipment","prepareEquipmentCreationModel","Description","Manufacturer","MarketValue","pattern","decimalNumber","PricePerDay","SerialNumber","Type","getManufacturers","getEquipmentTypes","types","ManufacturerId","replace","StringBuilder","formatNumber","EQUIPMENT_DETAILS_CONTROL_NAMES","imageService","user","prepareEquipmentDetailsModel","loadEquipment","append","photo","Photos","ThumbnailFile","ThumbnailUrl","getImageUrlForEncodedFile","getDefaultLang","getManufacturerMultiSelectData","setManufacturerMultiSelectData","getTypeMultiSelectData","setTypeMultiSelectData","getEquipments","setEquipments","loadEquipmentsLazy","manufacturerOptions","manufacturerColumn","typeOptions","typeColumn","PrimeNgHelper","EquipmentPhotoUploaderFactory","fileService","galleriaResponsiveOptions","activeIndex","_activeIndex","newValue","equipmentPhotos","sourcePhotos","push","equipmentPhotoUploadAsync","uploader","equipmentId","makeUploader","uploadedEquipmentPhotos","uploadToPhotosAsync","files","splice","equipmentPhotoUpload","clear","getEquipmentPhotoSource","item","equipmentPhoto","p","IsBeingDownloaded","file","download","File","SourceUrl","getNotFoundImageUrlAsync","EquipmentPhotoUploader","lastValueFrom","EquipmentPhotoOnCreationUploader","photos","fileArrayBuffer","getArrayBuffer","encodedFile","convertFileToBase64String","thumbnail","makeThumbnailForFile","FileName","name","EquipmentPhotoOnEditionUploader","UploadPhotosToApiAsync","photosToUploadToApi","map","request","EquipmentId","upload","multiple","uploadedPhoto","UploadedPhotos","formMode","Error","LanguageCodeEnum","LOGIN_CONTROL_NAMES","LOCAL_STORAGE_PROPERTIES","app","Login","Password","getLanguages","languages","languageIdFromStorage","LanguageId","languageId","setLanguage","isFirstTimeLoggedIn","NotActive","getLanguageCodeById","id","Pl","valueOf","En","lang","use","queryParams","token","add","severity","summary","detail","MANUFACTURER_CREATE_CONTROL_NAMES","manufacturer","prepareManufacturerCreationModel","IsOperational","manufacturerAddressForm","Address","MANUFACTURER_DETAILS_CONTROL_NAMES","prepareManufacturerDetailsModel","loadManufacturer","IsDeleted","setManufacturers","loadManufacturersLazy","EventEmitter","Output","FormControl","nameInLanguages","isValid","emit","getNameInLanguages","l","controls","label","onChangeInput","isFormValid","valid","d","DynamicDialogConfig","DynamicDialogRef","clientRepresentative","clientRepresentatives","prepareClientRepresentativeCreationModel","getClientRepresentativeClientId","ClientId","clientId","clientRepresentativeAddress","CountryId","height","modal","style","margin","padding","ClientRepresentatives_CanModify","prepareClientRepresentativeDetailsModel","loadClientRepresentative","dialogService","getClientRepresentatives","setClientRepresentatives","ngOnDestroy","clientRepresentativeCreationDialog","loadClientRepresentativesLazy","openClientRepresentativeDialog","clientRepresentativeDialogConfigData","open","OPEN_AS_DIALOG_SETTINGS","onClose","UserRoleCreationModel","userRole","prepareUserRoleCreationModel","getUserRolePermissionsForCreation","groupedUserPermissions","onIsNameInLanguagesValid","isNameInLanguagesValid","NameInLanguages","permissionsSubmitted","userRolePermissions","getPermissionsSubmitted","permission","doesPermissionExistWithinSelected","PermissionsSelected","SelectedUserPermissionNodeArray","UserRoleDetailsModel","prepareUserRoleDetailsModel","loadUserRole","getUserRoleMultiSelectData","setUserRoleMultiSelectData","getUserRoles","setUserRoles","Numeric","loadUserRolesLazy","userRoleOptions","userRoleColumn","UserRolePermissionsOnCreationFiller","UserRolePermissionsOnEditionFiller","UserRolePermissionsFillerFactory","makeFiller","source","destinations","filler","Icons","LIST_ICON_NAME","MODIFY_ICON_NAME","UserRolePermissionsFiller","getIconStyleClassNameForPermission","endsWith","UserPermissionNode","createChildNode","icon","linkedPermissionIds","LinkedPermissionsIds","createParentNode","permissionsGroup","fill","permissionsGroupChildren","Permissions","allItems","isSelected","IsSelected","expanded","partialSelected","every","some","updateUserRolePermissions","updateUserRolePermissionsSelected","permissionNode","hasChildren","childPermissionNode","selectedItems","tryPush","hasLinkedPermissions","userRolePermissionColumns","userPermissionNodes","selectedUserPermissionNodes","onPermissionSelected","linkedPermissionId","isPermissionAlreadySelected","permissionToBeSelected","getPermissionNodeToBeSelected","findPermissionById","idToFind","nodeChild","permissionId","userPermissionGroup","prepareUserCreationModel","emailPattern","IsActive","passwordPattern","UserRoleId","prepareUserDetailsModel","CreatedOn","loadUser","isPasswordFieldFilled","getDateFromCalendarAsString","Date","getUsers","setUsers","loadUsersLazy","menuService","saveProfile","prepareUserProfileModel","currentUserId","firstMenuItemUserIsAuthorizedFor","getFirstMenuItemUserIsAuthorizedFor","getProfileById","PngTableSearchQueryBuilder","columns","getFieldNames","clientRepresentativeId","photoId","identity","authenticate","refreshToken","manufacturerId","selectOptions","equipmentTypes","yesNoOptions","changeLanguage","changeRole","changeTheme","userId","getLanguage","getTheme","userRoleId","Assets","images","notFound","tabs","general","index","representatives","ErrorMessageTypeEnum","MessageLifeTimeEnum","MessageTypeEnum","SearchOperatorEnum","NameInLanguage","NameInLanguagesBase","columnName","column","PngTableColumn","PngTreeColumn","Menu","MenuArray","Array","getItemsForLabel","m","Label","Items","PermissionGroupItemModel","PermissionItemModel","LayoutService","AppFooterComponent","layoutService","isDarkModeThemeSelectedFromStorage","isDarkModeThemeSelected","Boolean","changeUserTheme","setItem","model","theme","colorScheme","themeLink","document","getElementById","newHref","getAttribute","replaceThemeLink","onConfigUpdate","href","onComplete","cloneLinkElement","cloneNode","setAttribute","parentNode","insertBefore","nextSibling","addEventListener","remove","Renderer2","NavigationEnd","AppSidebarComponent","AppTopBarComponent","renderer","overlayMenuOpenSubscription","overlayOpen$","menuOutsideClickListener","listen","isOutsideClicked","appSidebar","el","nativeElement","isSameNode","target","contains","appTopbar","menuButton","hideMenu","profileMenuOutsideClickListener","menu","topbarMenuButton","hideProfileMenu","state","staticMenuMobileActive","blockBodyScroll","events","RouterLink","body","classList","className","overlayMenuActive","menuHoverActive","unblockBodyScroll","profileSidebarVisible","RegExp","split","join","containerClass","menuMode","staticMenuDesktopInactive","inputStyle","unsubscribe","BrowserAnimationsModule","InputTextModule","SidebarModule","BadgeModule","RadioButtonModule","InputSwitchModule","RippleModule","AppMenuComponent","AppMenuitemComponent","AppConfigModule","buildMenu","getMenu","appendMenu","menuItemsCurrentUserIsAuthorizedFor","isLoggedUserAuthorizedForMenu","menuItems","Icon","routerLink","items","permissions","isAuthorized","Injectable","Subject","menuSource","asObservable","resetSource","onMenuStateChange","reset","providedIn","ChangeDetectorRef","HostBinding","animate","transition","trigger","cd","menuSourceSubscription","menuSource$","Promise","resolve","then","routeEvent","active","startsWith","menuResetSubscription","resetSource$","updateActiveStateFromRoute","parentKey","String","activeRoute","isActive","matrixParams","fragment","itemClick","command","originalEvent","submenuAnimation","root","activeClass","type","animations","ElementRef","Scroll","url","updateWithLanguageOnInit","onProfileButtonClick","setTheme","withDarkMode","createBreadcrumbs","route","urlBuilder","child","routeURL","segment","initializeLayout","appMenu","initializeUserMenu","userMenuItems","onLanguageChange","logout","updateWithLanguageOnLanguageChange","updateBreadcrumbItemsWithLanguage","breadcrumbItems","breadcrumbItem","userLanguageId","currentUserLanguageId","language","translation","setTranslation","AppConfigComponent","visible","configSidebarVisible","_val","scale","onConfigButtonClick","showConfigSidebar","decrementScale","applyScale","incrementScale","documentElement","fontSize","configUpdate","overlayOpen","onMenuToggle","isOverlay","isDesktop","showProfileSidebar","window","innerWidth","isMobile","Menus","initializeMenu","initializeMenuItems","firstMenuUserIsAuthorizedFor","menuItem","getAdministrationItems","administration","getMainMenuItems","main","mainMenuItems","administrationItems","doesAssetExistAsync","assetUrl","head","observe","getCanActivateResult","canActivateChild","checkForChild","resetAllData","Inject","PLATFORM_ID","isPlatformBrowser","Observable","of","catchError","platformId","getAuth","JSON","parse","authData","UserName","GrantType","Scope","res","Token","Code","setAuth","tokenData","RefreshToken","auth","stringify","isLoggedIn$","removeItem","JwtHelperService","jwtHelperService","AuthorizationService_1","_currentUserId","currentUserName","_currentUserName","currentUserRoles","_currentUserRoles","_currentUserLanguageId","currentUserPermissions","_currentUserPermissions","currentUserRoleId","_currentUserRoleId","currentUserRoleName","_currentUserRoleName","decodeToken","decodedToken","currentUserPermissionsTextArray","permissionsTextArray","r","errorMessage","ErrorMessage","errorMessageBuilder","ErrorMessageBuilder","isValidErrorObject","errorObject","errors","firstErrorPropertyName","getFirstErrorName","firstError","splitError","getSplitError","fillErrorMessageBasedOnError","hasRequiredPropertiesAssigned","build","getMessage","splitMessage","ErrorService_1","_messageInnerSeparator","_idMessagePart","_maxLengthMessagePart","maxLength","_minLengthMessagePart","minLength","_typeMessagePart","isArray","_messageSeparator","messagePart","resultMessageBuilder","clean","withId","withTypeSpecificMessagePart","typeSpecificMessage","Empty","Length","MatchAllowedLetters","MatchSmallLetters","bytes","Uint8Array","dataBuilder","i","fromCharCode","btoa","arrayBuffer","getFixedArrayBuffer","byteLength","reader","FileReader","onloadend","readAsArrayBuffer","FilterMatchMode","getPlaceholder","capitalizedField","toUpperCase","onClearFilters","dataTable","onFilterGlobal","filterValue","filterGlobal","CONTAINS","shouldHideIcon","inputWidth","filterElement","textContentLengthHelper","createElement","visibility","position","textContent","offsetWidth","appendChild","textContentWidth","removeChild","DomSanitizer","assetService","sanitizer","bypassSecurityTrustUrl","getImageUrlWithAssetImageAsync","assetImageFilePath","intercept","req","baseAddress","location","protocol","host","apiUrl","apiRequest","clone","handle","Injector","throwError","tap","injector","setHeaders","Authorization","ApiKey","errorResponse","status","isRefreshingToken","reload","DataBaseOperationTypeMessagePartsForConsole","update","operation","MessageTypes","messageService","addMessage","addInfo","info","success","addWarning","warning","life","lifeTime","getOptions","getYesNoOptions","insertAllOption","Value","determineWhetherUserHasAccessToButtons","Info","Success","Warning","buildBaseUri","addFilters","resultUriBuilder","sortOrder","rows","first","whereBuilder","addGlobalFilters","addLocalFilters","removeFromEnd","globalFilter","globalFilterColumns","matchMode","o","toLowerCase","IN","MatchAny","filtersGroup","filters","Special","filterValues","valueBuilder","fv","DATE_MATCH_MODES","operator","DATE_IS","DATE_AFTER","DATE_BEFORE","DATE_IS_NOT","getDateFromCalendar","date","isNaN","parsedDate","UTC","getFullYear","getMonth","getDate","setMinutes","getMinutes","getTimezoneOffset","toLocaleString","minimumIntegerDigits","useGrouping","breakpoint","numVisible","initialValue","text","appendLine","numberOfChars","slice","charAtEquals","char","currentForm","getFormControl","e","isChanged","dirty","touched","hasError","markAsTouched","production","enableProdMode","platformBrowserDynamic","bootstrapModule","catch","err"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}